{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":363,"column":0,"index":12316}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":363,"column":0,"index":12316}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":363,"column":0,"index":12316}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":363,"column":0,"index":12316}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":363,"column":0,"index":12316}}],"key":"aU3Lrys8xTVpYSDJal2nhppojC8="}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":363,"column":0,"index":12316}}],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":363,"column":0,"index":12316}}],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA="}},{"name":"../fs.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":159},"end":{"line":5,"column":26,"index":185}}],"key":"/jnTnbi7ck3MIiEV2jE4OJ78uUo="}},{"name":"../utils/uuid","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":186},"end":{"line":6,"column":36,"index":222}}],"key":"LH97xGo3mh63ZFDbEj950pFx0Ww="}},{"name":"../utils/log.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":223},"end":{"line":7,"column":34,"index":257}}],"key":"xJwTlCXWvEHR3+3tdgk52DzSJZU="}},{"name":"../utils/uri","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":258},"end":{"line":8,"column":35,"index":293}}],"key":"EYM5VVM8ihCqYCNx4WwY6t5ZN6o="}},{"name":"./EventTarget","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":294},"end":{"line":9,"column":40,"index":334}}],"key":"UGxb2OybOV5JV5vUQIKv+/vBo/Q="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/inherits\"));\n  var _fs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"../fs.js\"));\n  var _uuid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"../utils/uuid\"));\n  var _log = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"../utils/log.js\"));\n  var _uri = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"../utils/uri\"));\n  var _EventTarget2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11], \"./EventTarget\"));\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // Copyright 2016 wkh237@github. All rights reserved.\n  // Use of this source code is governed by a MIT-style license that can be\n  // found in the LICENSE file.\n  var log = new _log.default('Blob');\n  var blobCacheDir = _fs.default.dirs.DocumentDir + '/ReactNativeBlobUtil-blobs/';\n  log.disable();\n  // log.level(3)\n\n  /**\n   * A ReactNativeBlobUtil style Blob polyfill class, this is a Blob which compatible to\n   * Response object attain fron ReactNativeBlobUtil.fetch.\n   */\n  var Blob = exports.default = /*#__PURE__*/function (_EventTarget) {\n    /**\n     * ReactNativeBlobUtil Blob polyfill, create a Blob directly from file path, BASE64\n     * encoded data, and string. The conversion is done implicitly according to\n     * given `mime`. However, the blob creation is asynchronously, to register\n     * event `onCreated` is need to ensure the Blob is creadted.\n     * @param  {any} data Content of Blob object\n     * @param  {any} mime Content type settings of Blob object, `text/plain`\n     *                    by default\n     * @param  {boolean} defer When this argument set to `true`, blob constructor\n     *                         will not invoke blob created event automatically.\n     */\n    function Blob(data, cType, defer) {\n      var _this;\n      (0, _classCallCheck2.default)(this, Blob);\n      _this = _callSuper(this, Blob);\n      _this.isReactNativeBlobUtilPolyfill = true;\n      _this.multipartBoundary = null;\n      _this._ref = null;\n      _this._blobCreated = false;\n      _this._onCreated = [];\n      _this._closed = false;\n      cType = cType || {};\n      _this.cacheName = getBlobName();\n      _this.isReactNativeBlobUtilPolyfill = true;\n      _this.isDerived = defer;\n      _this.type = cType.type || 'text/plain';\n      log.verbose('Blob constructor called', 'mime', _this.type, 'type', typeof data, 'length', data ? data.length : 0);\n      _this._ref = blobCacheDir + _this.cacheName;\n      var p = null;\n      if (!data) data = '';\n      if (data.isReactNativeBlobUtilPolyfill) {\n        log.verbose('create Blob cache file from Blob object');\n        var size = 0;\n        _this._ref = String(data.getReactNativeBlobUtilRef());\n        var orgPath = _this._ref;\n        p = _fs.default.exists(orgPath).then(function (exist) {\n          if (exist) return _fs.default.writeFile(orgPath, data, 'uri').then(function (size) {\n            return Promise.resolve(size);\n          }).catch(function (err) {\n            throw `ReactNativeBlobUtil Blob file creation error, ${err}`;\n          });else throw `could not create Blob from path ${orgPath}, file not exists`;\n        });\n      }\n      // process FormData\n      else if (data instanceof FormData) {\n        log.verbose('create Blob cache file from FormData', data);\n        var boundary = `ReactNativeBlobUtil-${_this.cacheName}-${Date.now()}`;\n        _this.multipartBoundary = boundary;\n        var parts = data.getParts();\n        var formArray = [];\n        if (!parts) {\n          p = _fs.default.writeFile(_this._ref, '', 'utf8');\n        } else {\n          for (var i in parts) {\n            formArray.push('\\r\\n--' + boundary + '\\r\\n');\n            var part = parts[i];\n            for (var j in part.headers) {\n              formArray.push(j + ': ' + part.headers[j] + '\\r\\n');\n            }\n            formArray.push('\\r\\n');\n            if (part.isReactNativeBlobUtilPolyfill) formArray.push(part);else formArray.push(part.string);\n          }\n          log.verbose('FormData array', formArray);\n          formArray.push('\\r\\n--' + boundary + '--\\r\\n');\n          p = createMixedBlobData(_this._ref, formArray);\n        }\n      }\n      // if the data is a string starts with `ReactNativeBlobUtil-file://`, append the\n      // Blob data from file path\n      else if (typeof data === 'string' && data.startsWith('ReactNativeBlobUtil-file://')) {\n        log.verbose('create Blob cache file from file path', data);\n        // set this flag so that we know this blob is a wrapper of an existing file\n        _this._isReference = true;\n        _this._ref = String(data).replace('ReactNativeBlobUtil-file://', '');\n        var _orgPath = _this._ref;\n        if (defer) return (0, _possibleConstructorReturn2.default)(_this);else {\n          p = _fs.default.stat(_orgPath).then(function (stat) {\n            return Promise.resolve(stat.size);\n          });\n        }\n      }\n      // content from variable need create file\n      else if (typeof data === 'string') {\n        var encoding = 'utf8';\n        var mime = String(_this.type);\n        // when content type contains application/octet* or *;base64, ReactNativeBlobUtil\n        // fs will treat it as BASE64 encoded string binary data\n        if (/(application\\/octet|\\;base64)/i.test(mime)) encoding = 'base64';else data = data.toString();\n        // create cache file\n        _this.type = String(_this.type).replace(/;base64/ig, '');\n        log.verbose('create Blob cache file from string', 'encode', encoding);\n        p = _fs.default.writeFile(_this._ref, data, encoding).then(function (size) {\n          return Promise.resolve(size);\n        });\n      }\n      // TODO : ArrayBuffer support\n      // else if (data instanceof ArrayBuffer ) {\n      //\n      // }\n      // when input is an array of mixed data types, create a file cache\n      else if (Array.isArray(data)) {\n        log.verbose('create Blob cache file from mixed array', data);\n        p = createMixedBlobData(_this._ref, data);\n      } else {\n        data = data.toString();\n        p = _fs.default.writeFile(_this._ref, data, 'utf8').then(function (size) {\n          return Promise.resolve(size);\n        });\n      }\n      p && p.then(function (size) {\n        _this.size = size;\n        _this._invokeOnCreateEvent();\n      }).catch(function (err) {\n        log.error('ReactNativeBlobUtil could not create Blob : ' + _this._ref, err);\n      });\n      return _this;\n    }\n\n    /**\n     * Since Blob content will asynchronously write to a file during creation,\n     * use this method to register an event handler for Blob initialized event.\n     * @nonstandard\n     * @param  {(b:Blob) => void} An event handler invoked when Blob created\n     * @return {Blob} The Blob object instance itself\n     */\n    (0, _inherits2.default)(Blob, _EventTarget);\n    return (0, _createClass2.default)(Blob, [{\n      key: \"blobPath\",\n      get: function get() {\n        return this._ref;\n      }\n    }, {\n      key: \"onCreated\",\n      value: function onCreated(fn) {\n        log.verbose('#register blob onCreated', this._blobCreated);\n        if (!this._blobCreated) this._onCreated.push(fn);else {\n          fn(this);\n        }\n        return this;\n      }\n    }, {\n      key: \"markAsDerived\",\n      value: function markAsDerived() {\n        this._isDerived = true;\n      }\n    }, {\n      key: \"isDerived\",\n      get: function get() {\n        return this._isDerived || false;\n      }\n\n      /**\n       * Get file reference of the Blob object.\n       * @nonstandard\n       * @return {string} Blob file reference which can be consumed by ReactNativeBlobUtil fs\n       */\n    }, {\n      key: \"getReactNativeBlobUtilRef\",\n      value: function getReactNativeBlobUtilRef() {\n        return this._ref;\n      }\n\n      /**\n       * Create a Blob object which is sliced from current object\n       * @param  {number} start    Start byte number\n       * @param  {number} end      End byte number\n       * @param  {string} contentType Optional, content type of new Blob object\n       * @return {Blob}\n       */\n    }, {\n      key: \"slice\",\n      value: function slice(start, end) {\n        var _this2 = this;\n        var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n        if (this._closed) throw 'Blob has been released.';\n        log.verbose('slice called', start, end, contentType);\n        var resPath = blobCacheDir + getBlobName();\n        var pass = false;\n        log.debug('fs.slice new blob will at', resPath);\n        var result = new Blob(_uri.default.wrap(resPath), {\n          type: contentType\n        }, true);\n        _fs.default.exists(blobCacheDir).then(function (exist) {\n          if (exist) return Promise.resolve();\n          return _fs.default.mkdir(blobCacheDir);\n        }).then(function () {\n          return _fs.default.slice(_this2._ref, resPath, start, end);\n        }).then(function (dest) {\n          log.debug('fs.slice done', dest);\n          result._invokeOnCreateEvent();\n          pass = true;\n        }).catch(function (err) {\n          console.warn('Blob.slice failed:', err);\n          pass = true;\n        });\n        log.debug('slice returning new Blob');\n        return result;\n      }\n\n      /**\n       * Read data of the Blob object, this is not standard method.\n       * @nonstandard\n       * @param  {string} encoding Read data with encoding\n       * @return {Promise}\n       */\n    }, {\n      key: \"readBlob\",\n      value: function readBlob(encoding) {\n        if (this._closed) throw 'Blob has been released.';\n        return _fs.default.readFile(this._ref, encoding || 'utf8');\n      }\n\n      /**\n       * Release the resource of the Blob object.\n       * @nonstandard\n       * @return {Promise}\n       */\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (this._closed) return Promise.reject('Blob has been released.');\n        this._closed = true;\n        return _fs.default.unlink(this._ref).catch(function (err) {\n          console.warn(err);\n        });\n      }\n    }, {\n      key: \"safeClose\",\n      value: function safeClose() {\n        if (this._closed) return Promise.reject('Blob has been released.');\n        this._closed = true;\n        if (!this._isReference) {\n          return _fs.default.unlink(this._ref).catch(function (err) {\n            console.warn(err);\n          });\n        } else {\n          return Promise.resolve();\n        }\n      }\n    }, {\n      key: \"_invokeOnCreateEvent\",\n      value: function _invokeOnCreateEvent() {\n        log.verbose('invoke create event', this._onCreated);\n        this._blobCreated = true;\n        var fns = this._onCreated;\n        for (var i in fns) {\n          if (typeof fns[i] === 'function') {\n            fns[i](this);\n          }\n        }\n        delete this._onCreated;\n      }\n    }], [{\n      key: \"clearCache\",\n      value:\n      /**\n       * Static method that remove all files in Blob cache folder.\n       * @nonstandard\n       * @return {Promise}\n       */\n      function clearCache() {\n        return _fs.default.unlink(blobCacheDir).then(function () {\n          return _fs.default.mkdir(blobCacheDir);\n        });\n      }\n    }, {\n      key: \"build\",\n      value: function build(data, cType) {\n        return new Promise(function (resolve, reject) {\n          new Blob(data, cType).onCreated(resolve);\n        });\n      }\n    }, {\n      key: \"setLog\",\n      value: function setLog(level) {\n        if (level === -1) log.disable();else log.level(level);\n      }\n    }]);\n  }(_EventTarget2.default);\n  /**\n   * Get a temp filename for Blob object\n   * @return {string} Temporary filename\n   */\n  function getBlobName() {\n    return 'blob-' + (0, _uuid.default)();\n  }\n\n  /**\n   * Create a file according to given array. The element in array can be a number,\n   * Blob, String, Array.\n   * @param  {string} ref File path reference\n   * @param  {Array} dataArray An array contains different types of data.\n   * @return {Promise}\n   */\n  function createMixedBlobData(ref, dataArray) {\n    // create an empty file for store blob data\n    var p = _fs.default.writeFile(ref, '');\n    var args = [];\n    var size = 0;\n    for (var i in dataArray) {\n      var part = dataArray[i];\n      if (!part) continue;\n      if (part.isReactNativeBlobUtilPolyfill) {\n        args.push([ref, part._ref, 'uri']);\n      } else if (typeof part === 'string') args.push([ref, part, 'utf8']);\n      // TODO : ArrayBuffer\n      // else if (part instanceof ArrayBuffer) {\n      //\n      // }\n      else if (Array.isArray(part)) args.push([ref, part, 'ascii']);\n    }\n    // start write blob data\n    var _loop = function _loop(_i) {\n      p = p.then(function (written) {\n        var arg = this;\n        if (written) size += written;\n        log.verbose('mixed blob write', args[_i], written);\n        return _fs.default.appendFile.apply(_fs.default, (0, _toConsumableArray2.default)(arg));\n      }.bind(args[_i]));\n    };\n    for (var _i in args) {\n      _loop(_i);\n    }\n    return p.then(function () {\n      return Promise.resolve(size);\n    });\n  }\n});","lineCount":359,"map":[[13,2,5,0],[13,6,5,0,"_fs"],[13,9,5,0],[13,12,5,0,"_interopRequireDefault"],[13,34,5,0],[13,35,5,0,"_$$_REQUIRE"],[13,46,5,0],[13,47,5,0,"_dependencyMap"],[13,61,5,0],[14,2,6,0],[14,6,6,0,"_uuid"],[14,11,6,0],[14,14,6,0,"_interopRequireDefault"],[14,36,6,0],[14,37,6,0,"_$$_REQUIRE"],[14,48,6,0],[14,49,6,0,"_dependencyMap"],[14,63,6,0],[15,2,7,0],[15,6,7,0,"_log"],[15,10,7,0],[15,13,7,0,"_interopRequireDefault"],[15,35,7,0],[15,36,7,0,"_$$_REQUIRE"],[15,47,7,0],[15,48,7,0,"_dependencyMap"],[15,62,7,0],[16,2,8,0],[16,6,8,0,"_uri"],[16,10,8,0],[16,13,8,0,"_interopRequireDefault"],[16,35,8,0],[16,36,8,0,"_$$_REQUIRE"],[16,47,8,0],[16,48,8,0,"_dependencyMap"],[16,62,8,0],[17,2,9,0],[17,6,9,0,"_EventTarget2"],[17,19,9,0],[17,22,9,0,"_interopRequireDefault"],[17,44,9,0],[17,45,9,0,"_$$_REQUIRE"],[17,56,9,0],[17,57,9,0,"_dependencyMap"],[17,71,9,0],[18,2,9,40],[18,11,9,40,"_callSuper"],[18,22,9,40,"t"],[18,23,9,40],[18,25,9,40,"o"],[18,26,9,40],[18,28,9,40,"e"],[18,29,9,40],[18,40,9,40,"o"],[18,41,9,40],[18,48,9,40,"_getPrototypeOf2"],[18,64,9,40],[18,65,9,40,"default"],[18,72,9,40],[18,74,9,40,"o"],[18,75,9,40],[18,82,9,40,"_possibleConstructorReturn2"],[18,109,9,40],[18,110,9,40,"default"],[18,117,9,40],[18,119,9,40,"t"],[18,120,9,40],[18,122,9,40,"_isNativeReflectConstruct"],[18,147,9,40],[18,152,9,40,"Reflect"],[18,159,9,40],[18,160,9,40,"construct"],[18,169,9,40],[18,170,9,40,"o"],[18,171,9,40],[18,173,9,40,"e"],[18,174,9,40],[18,186,9,40,"_getPrototypeOf2"],[18,202,9,40],[18,203,9,40,"default"],[18,210,9,40],[18,212,9,40,"t"],[18,213,9,40],[18,215,9,40,"constructor"],[18,226,9,40],[18,230,9,40,"o"],[18,231,9,40],[18,232,9,40,"apply"],[18,237,9,40],[18,238,9,40,"t"],[18,239,9,40],[18,241,9,40,"e"],[18,242,9,40],[19,2,9,40],[19,11,9,40,"_isNativeReflectConstruct"],[19,37,9,40],[19,51,9,40,"t"],[19,52,9,40],[19,56,9,40,"Boolean"],[19,63,9,40],[19,64,9,40,"prototype"],[19,73,9,40],[19,74,9,40,"valueOf"],[19,81,9,40],[19,82,9,40,"call"],[19,86,9,40],[19,87,9,40,"Reflect"],[19,94,9,40],[19,95,9,40,"construct"],[19,104,9,40],[19,105,9,40,"Boolean"],[19,112,9,40],[19,145,9,40,"t"],[19,146,9,40],[19,159,9,40,"_isNativeReflectConstruct"],[19,184,9,40],[19,196,9,40,"_isNativeReflectConstruct"],[19,222,9,40],[19,235,9,40,"t"],[19,236,9,40],[19,246,1,0],[20,2,2,0],[21,2,3,0],[22,2,11,0],[22,6,11,6,"log"],[22,9,11,9],[22,12,11,12],[22,16,11,16,"Log"],[22,28,11,19],[22,29,11,20],[22,35,11,26],[22,36,11,27],[23,2,12,0],[23,6,12,6,"blobCacheDir"],[23,18,12,18],[23,21,12,21,"fs"],[23,32,12,23],[23,33,12,24,"dirs"],[23,37,12,28],[23,38,12,29,"DocumentDir"],[23,49,12,40],[23,52,12,43],[23,81,12,72],[24,2,14,0,"log"],[24,5,14,3],[24,6,14,4,"disable"],[24,13,14,11],[24,14,14,12],[24,15,14,13],[25,2,15,0],[27,2,17,0],[28,0,18,0],[29,0,19,0],[30,0,20,0],[31,2,17,0],[31,6,21,21,"Blob"],[31,10,21,25],[31,13,21,25,"exports"],[31,20,21,25],[31,21,21,25,"default"],[31,28,21,25],[31,54,21,25,"_EventTarget"],[31,66,21,25],[32,4,60,4],[33,0,61,0],[34,0,62,0],[35,0,63,0],[36,0,64,0],[37,0,65,0],[38,0,66,0],[39,0,67,0],[40,0,68,0],[41,0,69,0],[42,0,70,0],[43,4,71,4],[43,13,71,4,"Blob"],[43,18,71,16,"data"],[43,22,71,25],[43,24,71,27,"cType"],[43,29,71,37],[43,31,71,39,"defer"],[43,36,71,53],[43,38,71,55],[44,6,71,55],[44,10,71,55,"_this"],[44,15,71,55],[45,6,71,55],[45,10,71,55,"_classCallCheck2"],[45,26,71,55],[45,27,71,55,"default"],[45,34,71,55],[45,42,71,55,"Blob"],[45,46,71,55],[46,6,72,8,"_this"],[46,11,72,8],[46,14,72,8,"_callSuper"],[46,24,72,8],[46,31,72,8,"Blob"],[46,35,72,8],[47,6,72,16,"_this"],[47,11,72,16],[47,12,26,4,"isReactNativeBlobUtilPolyfill"],[47,41,26,33],[47,44,26,45],[47,48,26,49],[48,6,26,49,"_this"],[48,11,26,49],[48,12,27,4,"multipartBoundary"],[48,29,27,21],[48,32,27,32],[48,36,27,36],[49,6,27,36,"_this"],[49,11,27,36],[49,12,29,4,"_ref"],[49,16,29,8],[49,19,29,19],[49,23,29,23],[50,6,29,23,"_this"],[50,11,29,23],[50,12,30,4,"_blobCreated"],[50,24,30,16],[50,27,30,28],[50,32,30,33],[51,6,30,33,"_this"],[51,11,30,33],[51,12,31,4,"_onCreated"],[51,22,31,14],[51,25,31,29],[51,27,31,31],[52,6,31,31,"_this"],[52,11,31,31],[52,12,32,4,"_closed"],[52,19,32,11],[52,22,32,23],[52,27,32,28],[53,6,73,8,"cType"],[53,11,73,13],[53,14,73,16,"cType"],[53,19,73,21],[53,23,73,25],[53,24,73,26],[53,25,73,27],[54,6,74,8,"_this"],[54,11,74,8],[54,12,74,13,"cacheName"],[54,21,74,22],[54,24,74,25,"getBlobName"],[54,35,74,36],[54,36,74,37],[54,37,74,38],[55,6,75,8,"_this"],[55,11,75,8],[55,12,75,13,"isReactNativeBlobUtilPolyfill"],[55,41,75,42],[55,44,75,45],[55,48,75,49],[56,6,76,8,"_this"],[56,11,76,8],[56,12,76,13,"isDerived"],[56,21,76,22],[56,24,76,25,"defer"],[56,29,76,30],[57,6,77,8,"_this"],[57,11,77,8],[57,12,77,13,"type"],[57,16,77,17],[57,19,77,20,"cType"],[57,24,77,25],[57,25,77,26,"type"],[57,29,77,30],[57,33,77,34],[57,45,77,46],[58,6,78,8,"log"],[58,9,78,11],[58,10,78,12,"verbose"],[58,17,78,19],[58,18,78,20],[58,43,78,45],[58,45,78,47],[58,51,78,53],[58,53,78,55,"_this"],[58,58,78,55],[58,59,78,60,"type"],[58,63,78,64],[58,65,78,66],[58,71,78,72],[58,73,78,74],[58,80,78,81,"data"],[58,84,78,85],[58,86,78,87],[58,94,78,95],[58,96,78,97,"data"],[58,100,78,101],[58,103,78,104,"data"],[58,107,78,108],[58,108,78,109,"length"],[58,114,78,115],[58,117,78,118],[58,118,78,119],[58,119,78,120],[59,6,79,8,"_this"],[59,11,79,8],[59,12,79,13,"_ref"],[59,16,79,17],[59,19,79,20,"blobCacheDir"],[59,31,79,32],[59,34,79,35,"_this"],[59,39,79,35],[59,40,79,40,"cacheName"],[59,49,79,49],[60,6,80,8],[60,10,80,12,"p"],[60,11,80,13],[60,14,80,16],[60,18,80,20],[61,6,81,8],[61,10,81,12],[61,11,81,13,"data"],[61,15,81,17],[61,17,82,12,"data"],[61,21,82,16],[61,24,82,19],[61,26,82,21],[62,6,83,8],[62,10,83,12,"data"],[62,14,83,16],[62,15,83,17,"isReactNativeBlobUtilPolyfill"],[62,44,83,46],[62,46,83,48],[63,8,84,12,"log"],[63,11,84,15],[63,12,84,16,"verbose"],[63,19,84,23],[63,20,84,24],[63,61,84,65],[63,62,84,66],[64,8,85,12],[64,12,85,16,"size"],[64,16,85,20],[64,19,85,23],[64,20,85,24],[65,8,86,12,"_this"],[65,13,86,12],[65,14,86,17,"_ref"],[65,18,86,21],[65,21,86,24,"String"],[65,27,86,30],[65,28,86,31,"data"],[65,32,86,35],[65,33,86,36,"getReactNativeBlobUtilRef"],[65,58,86,61],[65,59,86,62],[65,60,86,63],[65,61,86,64],[66,8,87,12],[66,12,87,16,"orgPath"],[66,19,87,23],[66,22,87,26,"_this"],[66,27,87,26],[66,28,87,31,"_ref"],[66,32,87,35],[67,8,89,12,"p"],[67,9,89,13],[67,12,89,16,"fs"],[67,23,89,18],[67,24,89,19,"exists"],[67,30,89,25],[67,31,89,26,"orgPath"],[67,38,89,33],[67,39,89,34],[67,40,90,17,"then"],[67,44,90,21],[67,45,90,22],[67,55,90,23,"exist"],[67,60,90,28],[67,62,90,33],[68,10,91,20],[68,14,91,24,"exist"],[68,19,91,29],[68,21,92,24],[68,28,92,31,"fs"],[68,39,92,33],[68,40,92,34,"writeFile"],[68,49,92,43],[68,50,92,44,"orgPath"],[68,57,92,51],[68,59,92,53,"data"],[68,63,92,57],[68,65,92,59],[68,70,92,64],[68,71,92,65],[68,72,93,29,"then"],[68,76,93,33],[68,77,93,34],[68,87,93,35,"size"],[68,91,93,39],[69,12,93,39],[69,19,93,44,"Promise"],[69,26,93,51],[69,27,93,52,"resolve"],[69,34,93,59],[69,35,93,60,"size"],[69,39,93,64],[69,40,93,65],[70,10,93,65],[70,12,93,66],[70,13,94,29,"catch"],[70,18,94,34],[70,19,94,35],[70,29,94,36,"err"],[70,32,94,39],[70,34,94,44],[71,12,95,32],[71,18,95,38],[71,67,95,87,"err"],[71,70,95,90],[71,72,95,92],[72,10,96,28],[72,11,96,29],[72,12,96,30],[72,13,96,31],[72,18,98,24],[72,24,98,30],[72,59,98,65,"orgPath"],[72,66,98,72],[72,85,98,91],[73,8,99,16],[73,9,99,17],[73,10,99,18],[74,6,100,8],[75,6,101,8],[76,6,101,8],[76,11,102,13],[76,15,102,17,"data"],[76,19,102,21],[76,31,102,33,"FormData"],[76,39,102,41],[76,41,102,43],[77,8,103,12,"log"],[77,11,103,15],[77,12,103,16,"verbose"],[77,19,103,23],[77,20,103,24],[77,58,103,62],[77,60,103,64,"data"],[77,64,103,68],[77,65,103,69],[78,8,104,12],[78,12,104,16,"boundary"],[78,20,104,24],[78,23,104,27],[78,46,104,50,"_this"],[78,51,104,50],[78,52,104,55,"cacheName"],[78,61,104,64],[78,65,104,68,"Date"],[78,69,104,72],[78,70,104,73,"now"],[78,73,104,76],[78,74,104,77],[78,75,104,78],[78,77,104,80],[79,8,105,12,"_this"],[79,13,105,12],[79,14,105,17,"multipartBoundary"],[79,31,105,34],[79,34,105,37,"boundary"],[79,42,105,45],[80,8,106,12],[80,12,106,16,"parts"],[80,17,106,21],[80,20,106,24,"data"],[80,24,106,28],[80,25,106,29,"getParts"],[80,33,106,37],[80,34,106,38],[80,35,106,39],[81,8,107,12],[81,12,107,16,"formArray"],[81,21,107,25],[81,24,107,28],[81,26,107,30],[82,8,108,12],[82,12,108,16],[82,13,108,17,"parts"],[82,18,108,22],[82,20,108,24],[83,10,109,16,"p"],[83,11,109,17],[83,14,109,20,"fs"],[83,25,109,22],[83,26,109,23,"writeFile"],[83,35,109,32],[83,36,109,33,"_this"],[83,41,109,33],[83,42,109,38,"_ref"],[83,46,109,42],[83,48,109,44],[83,50,109,46],[83,52,109,48],[83,58,109,54],[83,59,109,55],[84,8,110,12],[84,9,110,13],[84,15,111,17],[85,10,112,16],[85,15,112,21],[85,19,112,25,"i"],[85,20,112,26],[85,24,112,30,"parts"],[85,29,112,35],[85,31,112,37],[86,12,113,20,"formArray"],[86,21,113,29],[86,22,113,30,"push"],[86,26,113,34],[86,27,113,35],[86,35,113,43],[86,38,113,46,"boundary"],[86,46,113,54],[86,49,113,57],[86,55,113,63],[86,56,113,64],[87,12,114,20],[87,16,114,24,"part"],[87,20,114,28],[87,23,114,31,"parts"],[87,28,114,36],[87,29,114,37,"i"],[87,30,114,38],[87,31,114,39],[88,12,115,20],[88,17,115,25],[88,21,115,29,"j"],[88,22,115,30],[88,26,115,34,"part"],[88,30,115,38],[88,31,115,39,"headers"],[88,38,115,46],[88,40,115,48],[89,14,116,24,"formArray"],[89,23,116,33],[89,24,116,34,"push"],[89,28,116,38],[89,29,116,39,"j"],[89,30,116,40],[89,33,116,43],[89,37,116,47],[89,40,116,50,"part"],[89,44,116,54],[89,45,116,55,"headers"],[89,52,116,62],[89,53,116,63,"j"],[89,54,116,64],[89,55,116,65],[89,58,116,68],[89,64,116,74],[89,65,116,75],[90,12,117,20],[91,12,118,20,"formArray"],[91,21,118,29],[91,22,118,30,"push"],[91,26,118,34],[91,27,118,35],[91,33,118,41],[91,34,118,42],[92,12,119,20],[92,16,119,24,"part"],[92,20,119,28],[92,21,119,29,"isReactNativeBlobUtilPolyfill"],[92,50,119,58],[92,52,120,24,"formArray"],[92,61,120,33],[92,62,120,34,"push"],[92,66,120,38],[92,67,120,39,"part"],[92,71,120,43],[92,72,120,44],[92,73,120,45],[92,78,122,24,"formArray"],[92,87,122,33],[92,88,122,34,"push"],[92,92,122,38],[92,93,122,39,"part"],[92,97,122,43],[92,98,122,44,"string"],[92,104,122,50],[92,105,122,51],[93,10,123,16],[94,10,124,16,"log"],[94,13,124,19],[94,14,124,20,"verbose"],[94,21,124,27],[94,22,124,28],[94,38,124,44],[94,40,124,46,"formArray"],[94,49,124,55],[94,50,124,56],[95,10,125,16,"formArray"],[95,19,125,25],[95,20,125,26,"push"],[95,24,125,30],[95,25,125,31],[95,33,125,39],[95,36,125,42,"boundary"],[95,44,125,50],[95,47,125,53],[95,55,125,61],[95,56,125,62],[96,10,126,16,"p"],[96,11,126,17],[96,14,126,20,"createMixedBlobData"],[96,33,126,39],[96,34,126,40,"_this"],[96,39,126,40],[96,40,126,45,"_ref"],[96,44,126,49],[96,46,126,51,"formArray"],[96,55,126,60],[96,56,126,61],[97,8,127,12],[98,6,128,8],[99,6,129,12],[100,6,130,8],[101,6,130,8],[101,11,131,13],[101,15,131,17],[101,22,131,24,"data"],[101,26,131,28],[101,31,131,33],[101,39,131,41],[101,43,131,45,"data"],[101,47,131,49],[101,48,131,50,"startsWith"],[101,58,131,60],[101,59,131,61],[101,88,131,90],[101,89,131,91],[101,91,131,93],[102,8,132,12,"log"],[102,11,132,15],[102,12,132,16,"verbose"],[102,19,132,23],[102,20,132,24],[102,59,132,63],[102,61,132,65,"data"],[102,65,132,69],[102,66,132,70],[103,8,133,12],[104,8,134,12,"_this"],[104,13,134,12],[104,14,134,17,"_isReference"],[104,26,134,29],[104,29,134,32],[104,33,134,36],[105,8,135,12,"_this"],[105,13,135,12],[105,14,135,17,"_ref"],[105,18,135,21],[105,21,135,24,"String"],[105,27,135,30],[105,28,135,31,"data"],[105,32,135,35],[105,33,135,36],[105,34,135,37,"replace"],[105,41,135,44],[105,42,135,45],[105,71,135,74],[105,73,135,76],[105,75,135,78],[105,76,135,79],[106,8,136,12],[106,12,136,16,"orgPath"],[106,20,136,23],[106,23,136,26,"_this"],[106,28,136,26],[106,29,136,31,"_ref"],[106,33,136,35],[107,8,137,12],[107,12,137,16,"defer"],[107,17,137,21],[107,19,138,16],[107,30,138,16,"_possibleConstructorReturn2"],[107,57,138,16],[107,58,138,16,"default"],[107,65,138,16],[107,67,138,16,"_this"],[107,72,138,16],[107,74,138,23],[107,79,139,17],[108,10,140,16,"p"],[108,11,140,17],[108,14,140,20,"fs"],[108,25,140,22],[108,26,140,23,"stat"],[108,30,140,27],[108,31,140,28,"orgPath"],[108,39,140,35],[108,40,140,36],[108,41,141,21,"then"],[108,45,141,25],[108,46,141,26],[108,56,141,27,"stat"],[108,60,141,31],[108,62,141,36],[109,12,142,24],[109,19,142,31,"Promise"],[109,26,142,38],[109,27,142,39,"resolve"],[109,34,142,46],[109,35,142,47,"stat"],[109,39,142,51],[109,40,142,52,"size"],[109,44,142,56],[109,45,142,57],[110,10,143,20],[110,11,143,21],[110,12,143,22],[111,8,144,12],[112,6,145,8],[113,6,146,8],[114,6,146,8],[114,11,147,13],[114,15,147,17],[114,22,147,24,"data"],[114,26,147,28],[114,31,147,33],[114,39,147,41],[114,41,147,43],[115,8,148,12],[115,12,148,16,"encoding"],[115,20,148,24],[115,23,148,27],[115,29,148,33],[116,8,149,12],[116,12,149,16,"mime"],[116,16,149,20],[116,19,149,23,"String"],[116,25,149,29],[116,26,149,30,"_this"],[116,31,149,30],[116,32,149,35,"type"],[116,36,149,39],[116,37,149,40],[117,8,150,12],[118,8,151,12],[119,8,152,12],[119,12,152,16],[119,44,152,48],[119,45,152,49,"test"],[119,49,152,53],[119,50,152,54,"mime"],[119,54,152,58],[119,55,152,59],[119,57,153,16,"encoding"],[119,65,153,24],[119,68,153,27],[119,76,153,35],[119,77,153,36],[119,82,155,16,"data"],[119,86,155,20],[119,89,155,23,"data"],[119,93,155,27],[119,94,155,28,"toString"],[119,102,155,36],[119,103,155,37],[119,104,155,38],[120,8,156,12],[121,8,157,12,"_this"],[121,13,157,12],[121,14,157,17,"type"],[121,18,157,21],[121,21,157,24,"String"],[121,27,157,30],[121,28,157,31,"_this"],[121,33,157,31],[121,34,157,36,"type"],[121,38,157,40],[121,39,157,41],[121,40,157,42,"replace"],[121,47,157,49],[121,48,157,50],[121,59,157,61],[121,61,157,63],[121,63,157,65],[121,64,157,66],[122,8,158,12,"log"],[122,11,158,15],[122,12,158,16,"verbose"],[122,19,158,23],[122,20,158,24],[122,56,158,60],[122,58,158,62],[122,66,158,70],[122,68,158,72,"encoding"],[122,76,158,80],[122,77,158,81],[123,8,159,12,"p"],[123,9,159,13],[123,12,159,16,"fs"],[123,23,159,18],[123,24,159,19,"writeFile"],[123,33,159,28],[123,34,159,29,"_this"],[123,39,159,29],[123,40,159,34,"_ref"],[123,44,159,38],[123,46,159,40,"data"],[123,50,159,44],[123,52,159,46,"encoding"],[123,60,159,54],[123,61,159,55],[123,62,160,17,"then"],[123,66,160,21],[123,67,160,22],[123,77,160,23,"size"],[123,81,160,27],[123,83,160,32],[124,10,161,20],[124,17,161,27,"Promise"],[124,24,161,34],[124,25,161,35,"resolve"],[124,32,161,42],[124,33,161,43,"size"],[124,37,161,47],[124,38,161,48],[125,8,162,16],[125,9,162,17],[125,10,162,18],[126,6,164,8],[127,6,165,12],[128,6,166,12],[129,6,167,12],[130,6,168,12],[131,6,169,8],[132,6,169,8],[132,11,170,13],[132,15,170,17,"Array"],[132,20,170,22],[132,21,170,23,"isArray"],[132,28,170,30],[132,29,170,31,"data"],[132,33,170,35],[132,34,170,36],[132,36,170,38],[133,8,171,12,"log"],[133,11,171,15],[133,12,171,16,"verbose"],[133,19,171,23],[133,20,171,24],[133,61,171,65],[133,63,171,67,"data"],[133,67,171,71],[133,68,171,72],[134,8,172,12,"p"],[134,9,172,13],[134,12,172,16,"createMixedBlobData"],[134,31,172,35],[134,32,172,36,"_this"],[134,37,172,36],[134,38,172,41,"_ref"],[134,42,172,45],[134,44,172,47,"data"],[134,48,172,51],[134,49,172,52],[135,6,173,8],[135,7,173,9],[135,13,174,13],[136,8,175,12,"data"],[136,12,175,16],[136,15,175,19,"data"],[136,19,175,23],[136,20,175,24,"toString"],[136,28,175,32],[136,29,175,33],[136,30,175,34],[137,8,176,12,"p"],[137,9,176,13],[137,12,176,16,"fs"],[137,23,176,18],[137,24,176,19,"writeFile"],[137,33,176,28],[137,34,176,29,"_this"],[137,39,176,29],[137,40,176,34,"_ref"],[137,44,176,38],[137,46,176,40,"data"],[137,50,176,44],[137,52,176,46],[137,58,176,52],[137,59,176,53],[137,60,177,17,"then"],[137,64,177,21],[137,65,177,22],[137,75,177,23,"size"],[137,79,177,27],[138,10,177,27],[138,17,177,32,"Promise"],[138,24,177,39],[138,25,177,40,"resolve"],[138,32,177,47],[138,33,177,48,"size"],[138,37,177,52],[138,38,177,53],[139,8,177,53],[139,10,177,54],[140,6,178,8],[141,6,179,8,"p"],[141,7,179,9],[141,11,179,13,"p"],[141,12,179,14],[141,13,179,15,"then"],[141,17,179,19],[141,18,179,20],[141,28,179,21,"size"],[141,32,179,25],[141,34,179,30],[142,8,180,12,"_this"],[142,13,180,12],[142,14,180,17,"size"],[142,18,180,21],[142,21,180,24,"size"],[142,25,180,28],[143,8,181,12,"_this"],[143,13,181,12],[143,14,181,17,"_invokeOnCreateEvent"],[143,34,181,37],[143,35,181,38],[143,36,181,39],[144,6,182,8],[144,7,182,9],[144,8,182,10],[144,9,183,13,"catch"],[144,14,183,18],[144,15,183,19],[144,25,183,20,"err"],[144,28,183,23],[144,30,183,28],[145,8,184,16,"log"],[145,11,184,19],[145,12,184,20,"error"],[145,17,184,25],[145,18,184,26],[145,64,184,72],[145,67,184,75,"_this"],[145,72,184,75],[145,73,184,80,"_ref"],[145,77,184,84],[145,79,184,86,"err"],[145,82,184,89],[145,83,184,90],[146,6,185,12],[146,7,185,13],[146,8,185,14],[147,6,185,15],[147,13,185,15,"_this"],[147,18,185,15],[148,4,187,4],[150,4,189,4],[151,0,190,0],[152,0,191,0],[153,0,192,0],[154,0,193,0],[155,0,194,0],[156,0,195,0],[157,4,189,4],[157,8,189,4,"_inherits2"],[157,18,189,4],[157,19,189,4,"default"],[157,26,189,4],[157,28,189,4,"Blob"],[157,32,189,4],[157,34,189,4,"_EventTarget"],[157,46,189,4],[158,4,189,4],[158,15,189,4,"_createClass2"],[158,28,189,4],[158,29,189,4,"default"],[158,36,189,4],[158,38,189,4,"Blob"],[158,42,189,4],[159,6,189,4,"key"],[159,9,189,4],[160,6,189,4,"get"],[160,9,189,4],[160,11,49,4],[160,20,49,4,"get"],[160,24,49,4],[160,26,49,19],[161,8,50,8],[161,15,50,15],[161,19,50,19],[161,20,50,20,"_ref"],[161,24,50,24],[162,6,51,4],[163,4,51,5],[164,6,51,5,"key"],[164,9,51,5],[165,6,51,5,"value"],[165,11,51,5],[165,13,196,4],[165,22,196,4,"onCreated"],[165,31,196,13,"onCreated"],[165,32,196,14,"fn"],[165,34,196,28],[165,36,196,36],[166,8,197,8,"log"],[166,11,197,11],[166,12,197,12,"verbose"],[166,19,197,19],[166,20,197,20],[166,46,197,46],[166,48,197,48],[166,52,197,52],[166,53,197,53,"_blobCreated"],[166,65,197,65],[166,66,197,66],[167,8,198,8],[167,12,198,12],[167,13,198,13],[167,17,198,17],[167,18,198,18,"_blobCreated"],[167,30,198,30],[167,32,199,12],[167,36,199,16],[167,37,199,17,"_onCreated"],[167,47,199,27],[167,48,199,28,"push"],[167,52,199,32],[167,53,199,33,"fn"],[167,55,199,35],[167,56,199,36],[167,57,199,37],[167,62,200,13],[168,10,201,12,"fn"],[168,12,201,14],[168,13,201,15],[168,17,201,19],[168,18,201,20],[169,8,202,8],[170,8,203,8],[170,15,203,15],[170,19,203,19],[171,6,204,4],[172,4,204,5],[173,6,204,5,"key"],[173,9,204,5],[174,6,204,5,"value"],[174,11,204,5],[174,13,206,4],[174,22,206,4,"markAsDerived"],[174,35,206,17,"markAsDerived"],[174,36,206,17],[174,38,206,20],[175,8,207,8],[175,12,207,12],[175,13,207,13,"_isDerived"],[175,23,207,23],[175,26,207,26],[175,30,207,30],[176,6,208,4],[177,4,208,5],[178,6,208,5,"key"],[178,9,208,5],[179,6,208,5,"get"],[179,9,208,5],[179,11,210,4],[179,20,210,4,"get"],[179,24,210,4],[179,26,210,20],[180,8,211,8],[180,15,211,15],[180,19,211,19],[180,20,211,20,"_isDerived"],[180,30,211,30],[180,34,211,34],[180,39,211,39],[181,6,212,4],[183,6,214,4],[184,0,215,0],[185,0,216,0],[186,0,217,0],[187,0,218,0],[188,4,214,4],[189,6,214,4,"key"],[189,9,214,4],[190,6,214,4,"value"],[190,11,214,4],[190,13,219,4],[190,22,219,4,"getReactNativeBlobUtilRef"],[190,47,219,29,"getReactNativeBlobUtilRef"],[190,48,219,29],[190,50,219,32],[191,8,220,8],[191,15,220,15],[191,19,220,19],[191,20,220,20,"_ref"],[191,24,220,24],[192,6,221,4],[194,6,223,4],[195,0,224,0],[196,0,225,0],[197,0,226,0],[198,0,227,0],[199,0,228,0],[200,0,229,0],[201,4,223,4],[202,6,223,4,"key"],[202,9,223,4],[203,6,223,4,"value"],[203,11,223,4],[203,13,230,4],[203,22,230,4,"slice"],[203,27,230,9,"slice"],[203,28,230,10,"start"],[203,33,230,24],[203,35,230,26,"end"],[203,38,230,38],[203,40,230,73],[204,8,230,73],[204,12,230,73,"_this2"],[204,18,230,73],[205,8,230,73],[205,12,230,40,"contentType"],[205,23,230,60],[205,26,230,60,"arguments"],[205,35,230,60],[205,36,230,60,"length"],[205,42,230,60],[205,50,230,60,"arguments"],[205,59,230,60],[205,67,230,60,"undefined"],[205,76,230,60],[205,79,230,60,"arguments"],[205,88,230,60],[205,94,230,63],[205,96,230,65],[206,8,231,8],[206,12,231,12],[206,16,231,16],[206,17,231,17,"_closed"],[206,24,231,24],[206,26,232,12],[206,32,232,18],[206,57,232,43],[207,8,233,8,"log"],[207,11,233,11],[207,12,233,12,"verbose"],[207,19,233,19],[207,20,233,20],[207,34,233,34],[207,36,233,36,"start"],[207,41,233,41],[207,43,233,43,"end"],[207,46,233,46],[207,48,233,48,"contentType"],[207,59,233,59],[207,60,233,60],[208,8,236,8],[208,12,236,12,"resPath"],[208,19,236,19],[208,22,236,22,"blobCacheDir"],[208,34,236,34],[208,37,236,37,"getBlobName"],[208,48,236,48],[208,49,236,49],[208,50,236,50],[209,8,237,8],[209,12,237,12,"pass"],[209,16,237,16],[209,19,237,19],[209,24,237,24],[210,8,238,8,"log"],[210,11,238,11],[210,12,238,12,"debug"],[210,17,238,17],[210,18,238,18],[210,45,238,45],[210,47,238,47,"resPath"],[210,54,238,54],[210,55,238,55],[211,8,239,8],[211,12,239,12,"result"],[211,18,239,18],[211,21,239,21],[211,25,239,25,"Blob"],[211,29,239,29],[211,30,239,30,"URIUtil"],[211,42,239,37],[211,43,239,38,"wrap"],[211,47,239,42],[211,48,239,43,"resPath"],[211,55,239,50],[211,56,239,51],[211,58,239,53],[212,10,239,54,"type"],[212,14,239,58],[212,16,239,60,"contentType"],[213,8,239,71],[213,9,239,72],[213,11,239,74],[213,15,239,78],[213,16,239,79],[214,8,240,8,"fs"],[214,19,240,10],[214,20,240,11,"exists"],[214,26,240,17],[214,27,240,18,"blobCacheDir"],[214,39,240,30],[214,40,240,31],[214,41,241,13,"then"],[214,45,241,17],[214,46,241,18],[214,56,241,19,"exist"],[214,61,241,24],[214,63,241,29],[215,10,242,16],[215,14,242,20,"exist"],[215,19,242,25],[215,21,243,20],[215,28,243,27,"Promise"],[215,35,243,34],[215,36,243,35,"resolve"],[215,43,243,42],[215,44,243,43],[215,45,243,44],[216,10,244,16],[216,17,244,23,"fs"],[216,28,244,25],[216,29,244,26,"mkdir"],[216,34,244,31],[216,35,244,32,"blobCacheDir"],[216,47,244,44],[216,48,244,45],[217,8,245,12],[217,9,245,13],[217,10,245,14],[217,11,246,13,"then"],[217,15,246,17],[217,16,246,18],[218,10,246,18],[218,17,246,24,"fs"],[218,28,246,26],[218,29,246,27,"slice"],[218,34,246,32],[218,35,246,33,"_this2"],[218,41,246,37],[218,42,246,38,"_ref"],[218,46,246,42],[218,48,246,44,"resPath"],[218,55,246,51],[218,57,246,53,"start"],[218,62,246,58],[218,64,246,60,"end"],[218,67,246,63],[218,68,246,64],[219,8,246,64],[219,10,246,65],[219,11,247,13,"then"],[219,15,247,17],[219,16,247,18],[219,26,247,19,"dest"],[219,30,247,23],[219,32,247,28],[220,10,248,16,"log"],[220,13,248,19],[220,14,248,20,"debug"],[220,19,248,25],[220,20,248,26],[220,35,248,41],[220,37,248,43,"dest"],[220,41,248,47],[220,42,248,48],[221,10,249,16,"result"],[221,16,249,22],[221,17,249,23,"_invokeOnCreateEvent"],[221,37,249,43],[221,38,249,44],[221,39,249,45],[222,10,250,16,"pass"],[222,14,250,20],[222,17,250,23],[222,21,250,27],[223,8,251,12],[223,9,251,13],[223,10,251,14],[223,11,252,13,"catch"],[223,16,252,18],[223,17,252,19],[223,27,252,20,"err"],[223,30,252,23],[223,32,252,28],[224,10,253,16,"console"],[224,17,253,23],[224,18,253,24,"warn"],[224,22,253,28],[224,23,253,29],[224,43,253,49],[224,45,253,51,"err"],[224,48,253,54],[224,49,253,55],[225,10,254,16,"pass"],[225,14,254,20],[225,17,254,23],[225,21,254,27],[226,8,255,12],[226,9,255,13],[226,10,255,14],[227,8,256,8,"log"],[227,11,256,11],[227,12,256,12,"debug"],[227,17,256,17],[227,18,256,18],[227,44,256,44],[227,45,256,45],[228,8,258,8],[228,15,258,15,"result"],[228,21,258,21],[229,6,259,4],[231,6,261,4],[232,0,262,0],[233,0,263,0],[234,0,264,0],[235,0,265,0],[236,0,266,0],[237,4,261,4],[238,6,261,4,"key"],[238,9,261,4],[239,6,261,4,"value"],[239,11,261,4],[239,13,267,4],[239,22,267,4,"readBlob"],[239,30,267,12,"readBlob"],[239,31,267,13,"encoding"],[239,39,267,29],[239,41,267,45],[240,8,268,8],[240,12,268,12],[240,16,268,16],[240,17,268,17,"_closed"],[240,24,268,24],[240,26,269,12],[240,32,269,18],[240,57,269,43],[241,8,270,8],[241,15,270,15,"fs"],[241,26,270,17],[241,27,270,18,"readFile"],[241,35,270,26],[241,36,270,27],[241,40,270,31],[241,41,270,32,"_ref"],[241,45,270,36],[241,47,270,38,"encoding"],[241,55,270,46],[241,59,270,50],[241,65,270,56],[241,66,270,57],[242,6,271,4],[244,6,273,4],[245,0,274,0],[246,0,275,0],[247,0,276,0],[248,0,277,0],[249,4,273,4],[250,6,273,4,"key"],[250,9,273,4],[251,6,273,4,"value"],[251,11,273,4],[251,13,278,4],[251,22,278,4,"close"],[251,27,278,9,"close"],[251,28,278,9],[251,30,278,12],[252,8,279,8],[252,12,279,12],[252,16,279,16],[252,17,279,17,"_closed"],[252,24,279,24],[252,26,280,12],[252,33,280,19,"Promise"],[252,40,280,26],[252,41,280,27,"reject"],[252,47,280,33],[252,48,280,34],[252,73,280,59],[252,74,280,60],[253,8,281,8],[253,12,281,12],[253,13,281,13,"_closed"],[253,20,281,20],[253,23,281,23],[253,27,281,27],[254,8,282,8],[254,15,282,15,"fs"],[254,26,282,17],[254,27,282,18,"unlink"],[254,33,282,24],[254,34,282,25],[254,38,282,29],[254,39,282,30,"_ref"],[254,43,282,34],[254,44,282,35],[254,45,282,36,"catch"],[254,50,282,41],[254,51,282,42],[254,61,282,43,"err"],[254,64,282,46],[254,66,282,51],[255,10,283,12,"console"],[255,17,283,19],[255,18,283,20,"warn"],[255,22,283,24],[255,23,283,25,"err"],[255,26,283,28],[255,27,283,29],[256,8,284,8],[256,9,284,9],[256,10,284,10],[257,6,285,4],[258,4,285,5],[259,6,285,5,"key"],[259,9,285,5],[260,6,285,5,"value"],[260,11,285,5],[260,13,287,4],[260,22,287,4,"safeClose"],[260,31,287,13,"safeClose"],[260,32,287,13],[260,34,287,16],[261,8,288,8],[261,12,288,12],[261,16,288,16],[261,17,288,17,"_closed"],[261,24,288,24],[261,26,289,12],[261,33,289,19,"Promise"],[261,40,289,26],[261,41,289,27,"reject"],[261,47,289,33],[261,48,289,34],[261,73,289,59],[261,74,289,60],[262,8,290,8],[262,12,290,12],[262,13,290,13,"_closed"],[262,20,290,20],[262,23,290,23],[262,27,290,27],[263,8,291,8],[263,12,291,12],[263,13,291,13],[263,17,291,17],[263,18,291,18,"_isReference"],[263,30,291,30],[263,32,291,32],[264,10,292,12],[264,17,292,19,"fs"],[264,28,292,21],[264,29,292,22,"unlink"],[264,35,292,28],[264,36,292,29],[264,40,292,33],[264,41,292,34,"_ref"],[264,45,292,38],[264,46,292,39],[264,47,292,40,"catch"],[264,52,292,45],[264,53,292,46],[264,63,292,47,"err"],[264,66,292,50],[264,68,292,55],[265,12,293,16,"console"],[265,19,293,23],[265,20,293,24,"warn"],[265,24,293,28],[265,25,293,29,"err"],[265,28,293,32],[265,29,293,33],[266,10,294,12],[266,11,294,13],[266,12,294,14],[267,8,295,8],[267,9,295,9],[267,15,296,13],[268,10,297,12],[268,17,297,19,"Promise"],[268,24,297,26],[268,25,297,27,"resolve"],[268,32,297,34],[268,33,297,35],[268,34,297,36],[269,8,298,8],[270,6,299,4],[271,4,299,5],[272,6,299,5,"key"],[272,9,299,5],[273,6,299,5,"value"],[273,11,299,5],[273,13,301,4],[273,22,301,4,"_invokeOnCreateEvent"],[273,42,301,24,"_invokeOnCreateEvent"],[273,43,301,24],[273,45,301,27],[274,8,302,8,"log"],[274,11,302,11],[274,12,302,12,"verbose"],[274,19,302,19],[274,20,302,20],[274,41,302,41],[274,43,302,43],[274,47,302,47],[274,48,302,48,"_onCreated"],[274,58,302,58],[274,59,302,59],[275,8,303,8],[275,12,303,12],[275,13,303,13,"_blobCreated"],[275,25,303,25],[275,28,303,28],[275,32,303,32],[276,8,304,8],[276,12,304,12,"fns"],[276,15,304,15],[276,18,304,18],[276,22,304,22],[276,23,304,23,"_onCreated"],[276,33,304,33],[277,8,305,8],[277,13,305,13],[277,17,305,17,"i"],[277,18,305,18],[277,22,305,22,"fns"],[277,25,305,25],[277,27,305,27],[278,10,306,12],[278,14,306,16],[278,21,306,23,"fns"],[278,24,306,26],[278,25,306,27,"i"],[278,26,306,28],[278,27,306,29],[278,32,306,34],[278,42,306,44],[278,44,306,46],[279,12,307,16,"fns"],[279,15,307,19],[279,16,307,20,"i"],[279,17,307,21],[279,18,307,22],[279,19,307,23],[279,23,307,27],[279,24,307,28],[280,10,308,12],[281,8,309,8],[282,8,310,8],[282,15,310,15],[282,19,310,19],[282,20,310,20,"_onCreated"],[282,30,310,30],[283,6,311,4],[284,4,311,5],[285,6,311,5,"key"],[285,9,311,5],[286,6,311,5,"value"],[286,11,311,5],[287,6,34,4],[288,0,35,0],[289,0,36,0],[290,0,37,0],[291,0,38,0],[292,6,39,4],[292,15,39,11,"clearCache"],[292,25,39,21,"clearCache"],[292,26,39,21],[292,28,39,24],[293,8,40,8],[293,15,40,15,"fs"],[293,26,40,17],[293,27,40,18,"unlink"],[293,33,40,24],[293,34,40,25,"blobCacheDir"],[293,46,40,37],[293,47,40,38],[293,48,40,39,"then"],[293,52,40,43],[293,53,40,44],[294,10,40,44],[294,17,40,50,"fs"],[294,28,40,52],[294,29,40,53,"mkdir"],[294,34,40,58],[294,35,40,59,"blobCacheDir"],[294,47,40,71],[294,48,40,72],[295,8,40,72],[295,10,40,73],[296,6,41,4],[297,4,41,5],[298,6,41,5,"key"],[298,9,41,5],[299,6,41,5,"value"],[299,11,41,5],[299,13,43,4],[299,22,43,11,"build"],[299,27,43,16,"build"],[299,28,43,17,"data"],[299,32,43,26],[299,34,43,28,"cType"],[299,39,43,38],[299,41,43,55],[300,8,44,8],[300,15,44,15],[300,19,44,19,"Promise"],[300,26,44,26],[300,27,44,27],[300,37,44,28,"resolve"],[300,44,44,35],[300,46,44,37,"reject"],[300,52,44,43],[300,54,44,48],[301,10,45,12],[301,14,45,16,"Blob"],[301,18,45,20],[301,19,45,21,"data"],[301,23,45,25],[301,25,45,27,"cType"],[301,30,45,32],[301,31,45,33],[301,32,45,34,"onCreated"],[301,41,45,43],[301,42,45,44,"resolve"],[301,49,45,51],[301,50,45,52],[302,8,46,8],[302,9,46,9],[302,10,46,10],[303,6,47,4],[304,4,47,5],[305,6,47,5,"key"],[305,9,47,5],[306,6,47,5,"value"],[306,11,47,5],[306,13,53,4],[306,22,53,11,"setLog"],[306,28,53,17,"setLog"],[306,29,53,18,"level"],[306,34,53,31],[306,36,53,33],[307,8,54,8],[307,12,54,12,"level"],[307,17,54,17],[307,22,54,22],[307,23,54,23],[307,24,54,24],[307,26,55,12,"log"],[307,29,55,15],[307,30,55,16,"disable"],[307,37,55,23],[307,38,55,24],[307,39,55,25],[307,40,55,26],[307,45,57,12,"log"],[307,48,57,15],[307,49,57,16,"level"],[307,54,57,21],[307,55,57,22,"level"],[307,60,57,27],[307,61,57,28],[308,6,58,4],[309,4,58,5],[310,2,58,5],[310,4,21,34,"EventTarget"],[310,25,21,45],[311,2,315,0],[312,0,316,0],[313,0,317,0],[314,0,318,0],[315,2,319,0],[315,11,319,9,"getBlobName"],[315,22,319,20,"getBlobName"],[315,23,319,20],[315,25,319,23],[316,4,320,4],[316,11,320,11],[316,18,320,18],[316,21,320,21],[316,25,320,21,"getUUID"],[316,38,320,28],[316,40,320,29],[316,41,320,30],[317,2,321,0],[319,2,323,0],[320,0,324,0],[321,0,325,0],[322,0,326,0],[323,0,327,0],[324,0,328,0],[325,0,329,0],[326,2,330,0],[326,11,330,9,"createMixedBlobData"],[326,30,330,28,"createMixedBlobData"],[326,31,330,29,"ref"],[326,34,330,32],[326,36,330,34,"dataArray"],[326,45,330,43],[326,47,330,45],[327,4,331,4],[328,4,332,4],[328,8,332,8,"p"],[328,9,332,9],[328,12,332,12,"fs"],[328,23,332,14],[328,24,332,15,"writeFile"],[328,33,332,24],[328,34,332,25,"ref"],[328,37,332,28],[328,39,332,30],[328,41,332,32],[328,42,332,33],[329,4,333,4],[329,8,333,8,"args"],[329,12,333,12],[329,15,333,15],[329,17,333,17],[330,4,334,4],[330,8,334,8,"size"],[330,12,334,12],[330,15,334,15],[330,16,334,16],[331,4,335,4],[331,9,335,9],[331,13,335,13,"i"],[331,14,335,14],[331,18,335,18,"dataArray"],[331,27,335,27],[331,29,335,29],[332,6,336,8],[332,10,336,12,"part"],[332,14,336,16],[332,17,336,19,"dataArray"],[332,26,336,28],[332,27,336,29,"i"],[332,28,336,30],[332,29,336,31],[333,6,337,8],[333,10,337,12],[333,11,337,13,"part"],[333,15,337,17],[333,17,338,12],[334,6,339,8],[334,10,339,12,"part"],[334,14,339,16],[334,15,339,17,"isReactNativeBlobUtilPolyfill"],[334,44,339,46],[334,46,339,48],[335,8,340,12,"args"],[335,12,340,16],[335,13,340,17,"push"],[335,17,340,21],[335,18,340,22],[335,19,340,23,"ref"],[335,22,340,26],[335,24,340,28,"part"],[335,28,340,32],[335,29,340,33,"_ref"],[335,33,340,37],[335,35,340,39],[335,40,340,44],[335,41,340,45],[335,42,340,46],[336,6,341,8],[336,7,341,9],[336,13,342,13],[336,17,342,17],[336,24,342,24,"part"],[336,28,342,28],[336,33,342,33],[336,41,342,41],[336,43,343,12,"args"],[336,47,343,16],[336,48,343,17,"push"],[336,52,343,21],[336,53,343,22],[336,54,343,23,"ref"],[336,57,343,26],[336,59,343,28,"part"],[336,63,343,32],[336,65,343,34],[336,71,343,40],[336,72,343,41],[336,73,343,42],[337,6,344,12],[338,6,345,12],[339,6,346,12],[340,6,347,8],[341,6,347,8],[341,11,348,13],[341,15,348,17,"Array"],[341,20,348,22],[341,21,348,23,"isArray"],[341,28,348,30],[341,29,348,31,"part"],[341,33,348,35],[341,34,348,36],[341,36,349,12,"args"],[341,40,349,16],[341,41,349,17,"push"],[341,45,349,21],[341,46,349,22],[341,47,349,23,"ref"],[341,50,349,26],[341,52,349,28,"part"],[341,56,349,32],[341,58,349,34],[341,65,349,41],[341,66,349,42],[341,67,349,43],[342,4,350,4],[343,4,351,4],[344,4,351,4],[344,8,351,4,"_loop"],[344,13,351,4],[344,25,351,4,"_loop"],[344,31,351,4,"_i"],[344,33,351,4],[344,35,352,24],[345,6,353,8,"p"],[345,7,353,9],[345,10,353,12,"p"],[345,11,353,13],[345,12,353,14,"then"],[345,16,353,18],[345,17,353,19],[345,27,353,29,"written"],[345,34,353,36],[345,36,353,38],[346,8,354,12],[346,12,354,16,"arg"],[346,15,354,19],[346,18,354,22],[346,22,354,26],[347,8,355,12],[347,12,355,16,"written"],[347,19,355,23],[347,21,356,16,"size"],[347,25,356,20],[347,29,356,24,"written"],[347,36,356,31],[348,8,357,12,"log"],[348,11,357,15],[348,12,357,16,"verbose"],[348,19,357,23],[348,20,357,24],[348,38,357,42],[348,40,357,44,"args"],[348,44,357,48],[348,45,357,49,"i"],[348,47,357,50],[348,48,357,51],[348,50,357,53,"written"],[348,57,357,60],[348,58,357,61],[349,8,358,12],[349,15,358,19,"fs"],[349,26,358,21],[349,27,358,22,"appendFile"],[349,37,358,32],[349,38,358,32,"apply"],[349,43,358,32],[349,44,358,19,"fs"],[349,55,358,21],[349,61,358,21,"_toConsumableArray2"],[349,80,358,21],[349,81,358,21,"default"],[349,88,358,21],[349,90,358,36,"arg"],[349,93,358,39],[349,95,358,40],[350,6,359,8],[350,7,359,9],[350,8,359,10,"bind"],[350,12,359,14],[350,13,359,15,"args"],[350,17,359,19],[350,18,359,20,"i"],[350,20,359,21],[350,21,359,22],[350,22,359,23],[350,23,359,24],[351,4,360,4],[351,5,360,5],[352,4,352,4],[352,9,352,9],[352,13,352,13,"i"],[352,15,352,14],[352,19,352,18,"args"],[352,23,352,22],[353,6,352,22,"_loop"],[353,11,352,22],[353,12,352,22,"_i"],[353,14,352,22],[354,4,352,22],[355,4,361,4],[355,11,361,11,"p"],[355,12,361,12],[355,13,361,13,"then"],[355,17,361,17],[355,18,361,18],[356,6,361,18],[356,13,361,24,"Promise"],[356,20,361,31],[356,21,361,32,"resolve"],[356,28,361,39],[356,29,361,40,"size"],[356,33,361,44],[356,34,361,45],[357,4,361,45],[357,6,361,46],[358,2,362,0],[359,0,362,1],[359,3]],"functionMap":{"names":["<global>","Blob","clearCache","fs.unlink.then$argument_0","build","Promise$argument_0","get__blobPath","setLog","constructor","fs.exists.then$argument_0","fs.writeFile.then$argument_0","fs.writeFile.then._catch$argument_0","fs.stat.then$argument_0","p.then$argument_0","p.then._catch$argument_0","onCreated","markAsDerived","get__isDerived","getReactNativeBlobUtilRef","slice","fs.exists.then.then$argument_0","fs.exists.then.then.then$argument_0","fs.exists...then._catch$argument_0","readBlob","close","fs.unlink._catch$argument_0","safeClose","_invokeOnCreateEvent","getBlobName","createMixedBlobData","<anonymous>"],"mappings":"AAA;eCoB;ICkB;4CCC,4BD;KDC;IGE;2BCC;SDE;KHC;IKE;KLE;IME;KNK;IOa;sBCmB;kCCG,+BD;mCEC;6BFE;iBDG;0BI0C;qBJE;sBEiB;iBFE;sBEe,+BF;oBKE;SLG;mBMC;aNE;KPE;IcS;KdQ;IeE;KfE;IgBE;KhBE;IiBO;KjBE;IkBS;kBVW;aUI;kBCC,8CD;kBEC;aFI;mBGC;aHG;KlBI;IsBQ;KtBI;IuBO;0CCI;SDE;KvBC;IyBE;8CDK;aCE;KzBK;I0BE;K1BU;CDE;A4BM;C5BE;A6BS;mBCuB;SDM;kBhBE,2BgB;C7BC"}},"type":"js/module"}]}