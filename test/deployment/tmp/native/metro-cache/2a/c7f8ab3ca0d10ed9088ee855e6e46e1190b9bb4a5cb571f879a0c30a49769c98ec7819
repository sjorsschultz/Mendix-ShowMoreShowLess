{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0},"end":{"line":72,"column":1}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0},"end":{"line":72,"column":1}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0},"end":{"line":72,"column":1}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0},"end":{"line":11,"column":34}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"invariant\"));\n  var ChildListCollection = exports.default = /*#__PURE__*/function () {\n    function ChildListCollection() {\n      (0, _classCallCheck2.default)(this, ChildListCollection);\n      this._cellKeyToChildren = new Map();\n      this._childrenToCellKey = new Map();\n    }\n    return (0, _createClass2.default)(ChildListCollection, [{\n      key: \"add\",\n      value: function add(list, cellKey) {\n        var _this$_cellKeyToChild;\n        (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n        var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild : new Set();\n        cellLists.add(list);\n        this._cellKeyToChildren.set(cellKey, cellLists);\n        this._childrenToCellKey.set(list, cellKey);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(list) {\n        var cellKey = this._childrenToCellKey.get(list);\n        (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');\n        this._childrenToCellKey.delete(list);\n        var cellLists = this._cellKeyToChildren.get(cellKey);\n        (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');\n        cellLists.delete(list);\n        if (cellLists.size === 0) {\n          this._cellKeyToChildren.delete(cellKey);\n        }\n      }\n    }, {\n      key: \"forEach\",\n      value: function forEach(fn) {\n        for (var listSet of this._cellKeyToChildren.values()) {\n          for (var list of listSet) {\n            fn(list);\n          }\n        }\n      }\n    }, {\n      key: \"forEachInCell\",\n      value: function forEachInCell(cellKey, fn) {\n        var _this$_cellKeyToChild2;\n        var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild2 : [];\n        for (var list of listSet) {\n          fn(list);\n        }\n      }\n    }, {\n      key: \"anyInCell\",\n      value: function anyInCell(cellKey, fn) {\n        var _this$_cellKeyToChild3;\n        var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild3 : [];\n        for (var list of listSet) {\n          if (fn(list)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"size\",\n      value: function size() {\n        return this._childrenToCellKey.size;\n      }\n    }]);\n  }();\n});","lineCount":76,"map":[[9,2,11,0],[9,6,11,0,"_invariant"],[9,16,11,0],[9,19,11,0,"_interopRequireDefault"],[9,41,11,0],[9,42,11,0,"_$$_REQUIRE"],[9,53,11,0],[9,54,11,0,"_dependencyMap"],[9,68,11,0],[10,2,11,34],[10,6,13,21,"ChildListCollection"],[10,25,13,40],[10,28,13,40,"exports"],[10,35,13,40],[10,36,13,40,"default"],[10,43,13,40],[11,4,13,40],[11,13,13,40,"ChildListCollection"],[11,33,13,40],[12,6,13,40],[12,10,13,40,"_classCallCheck2"],[12,26,13,40],[12,27,13,40,"default"],[12,34,13,40],[12,42,13,40,"ChildListCollection"],[12,61,13,40],[13,6,13,40],[13,11,14,2,"_cellKeyToChildren"],[13,29,14,20],[13,32,14,48],[13,36,14,52,"Map"],[13,39,14,55],[13,40,14,56],[13,41,14,57],[14,6,14,57],[14,11,15,2,"_childrenToCellKey"],[14,29,15,20],[14,32,15,43],[14,36,15,47,"Map"],[14,39,15,50],[14,40,15,51],[14,41,15,52],[15,4,15,52],[16,4,15,52],[16,15,15,52,"_createClass2"],[16,28,15,52],[16,29,15,52,"default"],[16,36,15,52],[16,38,15,52,"ChildListCollection"],[16,57,15,52],[17,6,15,52,"key"],[17,9,15,52],[18,6,15,52,"value"],[18,11,15,52],[18,13,17,2],[18,22,17,2,"add"],[18,25,17,5,"add"],[18,26,17,6,"list"],[18,30,17,17],[18,32,17,19,"cellKey"],[18,39,17,34],[18,41,17,42],[19,8,17,42],[19,12,17,42,"_this$_cellKeyToChild"],[19,33,17,42],[20,8,18,4],[20,12,18,4,"invariant"],[20,30,18,13],[20,32,19,6],[20,33,19,7],[20,37,19,11],[20,38,19,12,"_childrenToCellKey"],[20,56,19,30],[20,57,19,31,"has"],[20,60,19,34],[20,61,19,35,"list"],[20,65,19,39],[20,66,19,40],[20,68,20,6],[20,110,21,4],[20,111,21,5],[21,8,23,4],[21,12,23,10,"cellLists"],[21,21,23,19],[21,25,23,19,"_this$_cellKeyToChild"],[21,46,23,19],[21,49,23,22],[21,53,23,26],[21,54,23,27,"_cellKeyToChildren"],[21,72,23,45],[21,73,23,46,"get"],[21,76,23,49],[21,77,23,50,"cellKey"],[21,84,23,57],[21,85,23,58],[21,97,23,58,"_this$_cellKeyToChild"],[21,118,23,58],[21,121,23,62],[21,125,23,66,"Set"],[21,128,23,69],[21,129,23,70],[21,130,23,71],[22,8,24,4,"cellLists"],[22,17,24,13],[22,18,24,14,"add"],[22,21,24,17],[22,22,24,18,"list"],[22,26,24,22],[22,27,24,23],[23,8,25,4],[23,12,25,8],[23,13,25,9,"_cellKeyToChildren"],[23,31,25,27],[23,32,25,28,"set"],[23,35,25,31],[23,36,25,32,"cellKey"],[23,43,25,39],[23,45,25,41,"cellLists"],[23,54,25,50],[23,55,25,51],[24,8,27,4],[24,12,27,8],[24,13,27,9,"_childrenToCellKey"],[24,31,27,27],[24,32,27,28,"set"],[24,35,27,31],[24,36,27,32,"list"],[24,40,27,36],[24,42,27,38,"cellKey"],[24,49,27,45],[24,50,27,46],[25,6,28,2],[26,4,28,3],[27,6,28,3,"key"],[27,9,28,3],[28,6,28,3,"value"],[28,11,28,3],[28,13,30,2],[28,22,30,2,"remove"],[28,28,30,8,"remove"],[28,29,30,9,"list"],[28,33,30,20],[28,35,30,28],[29,8,31,4],[29,12,31,10,"cellKey"],[29,19,31,17],[29,22,31,20],[29,26,31,24],[29,27,31,25,"_childrenToCellKey"],[29,45,31,43],[29,46,31,44,"get"],[29,49,31,47],[29,50,31,48,"list"],[29,54,31,52],[29,55,31,53],[30,8,32,4],[30,12,32,4,"invariant"],[30,30,32,13],[30,32,32,14,"cellKey"],[30,39,32,21],[30,43,32,25],[30,47,32,29],[30,49,32,31],[30,90,32,72],[30,91,32,73],[31,8,33,4],[31,12,33,8],[31,13,33,9,"_childrenToCellKey"],[31,31,33,27],[31,32,33,28,"delete"],[31,38,33,34],[31,39,33,35,"list"],[31,43,33,39],[31,44,33,40],[32,8,35,4],[32,12,35,10,"cellLists"],[32,21,35,19],[32,24,35,22],[32,28,35,26],[32,29,35,27,"_cellKeyToChildren"],[32,47,35,45],[32,48,35,46,"get"],[32,51,35,49],[32,52,35,50,"cellKey"],[32,59,35,57],[32,60,35,58],[33,8,36,4],[33,12,36,4,"invariant"],[33,30,36,13],[33,32,36,14,"cellLists"],[33,41,36,23],[33,43,36,25],[33,86,36,68],[33,87,36,69],[34,8,37,4,"cellLists"],[34,17,37,13],[34,18,37,14,"delete"],[34,24,37,20],[34,25,37,21,"list"],[34,29,37,25],[34,30,37,26],[35,8,39,4],[35,12,39,8,"cellLists"],[35,21,39,17],[35,22,39,18,"size"],[35,26,39,22],[35,31,39,27],[35,32,39,28],[35,34,39,30],[36,10,40,6],[36,14,40,10],[36,15,40,11,"_cellKeyToChildren"],[36,33,40,29],[36,34,40,30,"delete"],[36,40,40,36],[36,41,40,37,"cellKey"],[36,48,40,44],[36,49,40,45],[37,8,41,4],[38,6,42,2],[39,4,42,3],[40,6,42,3,"key"],[40,9,42,3],[41,6,42,3,"value"],[41,11,42,3],[41,13,44,2],[41,22,44,2,"forEach"],[41,29,44,9,"forEach"],[41,30,44,10,"fn"],[41,32,44,27],[41,34,44,35],[42,8,45,4],[42,13,45,9],[42,17,45,15,"listSet"],[42,24,45,22],[42,28,45,26],[42,32,45,30],[42,33,45,31,"_cellKeyToChildren"],[42,51,45,49],[42,52,45,50,"values"],[42,58,45,56],[42,59,45,57],[42,60,45,58],[42,62,45,60],[43,10,46,6],[43,15,46,11],[43,19,46,17,"list"],[43,23,46,21],[43,27,46,25,"listSet"],[43,34,46,32],[43,36,46,34],[44,12,47,8,"fn"],[44,14,47,10],[44,15,47,11,"list"],[44,19,47,15],[44,20,47,16],[45,10,48,6],[46,8,49,4],[47,6,50,2],[48,4,50,3],[49,6,50,3,"key"],[49,9,50,3],[50,6,50,3,"value"],[50,11,50,3],[50,13,52,2],[50,22,52,2,"forEachInCell"],[50,35,52,15,"forEachInCell"],[50,36,52,16,"cellKey"],[50,43,52,31],[50,45,52,33,"fn"],[50,47,52,50],[50,49,52,58],[51,8,52,58],[51,12,52,58,"_this$_cellKeyToChild2"],[51,34,52,58],[52,8,53,4],[52,12,53,10,"listSet"],[52,19,53,17],[52,23,53,17,"_this$_cellKeyToChild2"],[52,45,53,17],[52,48,53,20],[52,52,53,24],[52,53,53,25,"_cellKeyToChildren"],[52,71,53,43],[52,72,53,44,"get"],[52,75,53,47],[52,76,53,48,"cellKey"],[52,83,53,55],[52,84,53,56],[52,96,53,56,"_this$_cellKeyToChild2"],[52,118,53,56],[52,121,53,60],[52,123,53,62],[53,8,54,4],[53,13,54,9],[53,17,54,15,"list"],[53,21,54,19],[53,25,54,23,"listSet"],[53,32,54,30],[53,34,54,32],[54,10,55,6,"fn"],[54,12,55,8],[54,13,55,9,"list"],[54,17,55,13],[54,18,55,14],[55,8,56,4],[56,6,57,2],[57,4,57,3],[58,6,57,3,"key"],[58,9,57,3],[59,6,57,3,"value"],[59,11,57,3],[59,13,59,2],[59,22,59,2,"anyInCell"],[59,31,59,11,"anyInCell"],[59,32,59,12,"cellKey"],[59,39,59,27],[59,41,59,29,"fn"],[59,43,59,49],[59,45,59,60],[60,8,59,60],[60,12,59,60,"_this$_cellKeyToChild3"],[60,34,59,60],[61,8,60,4],[61,12,60,10,"listSet"],[61,19,60,17],[61,23,60,17,"_this$_cellKeyToChild3"],[61,45,60,17],[61,48,60,20],[61,52,60,24],[61,53,60,25,"_cellKeyToChildren"],[61,71,60,43],[61,72,60,44,"get"],[61,75,60,47],[61,76,60,48,"cellKey"],[61,83,60,55],[61,84,60,56],[61,96,60,56,"_this$_cellKeyToChild3"],[61,118,60,56],[61,121,60,60],[61,123,60,62],[62,8,61,4],[62,13,61,9],[62,17,61,15,"list"],[62,21,61,19],[62,25,61,23,"listSet"],[62,32,61,30],[62,34,61,32],[63,10,62,6],[63,14,62,10,"fn"],[63,16,62,12],[63,17,62,13,"list"],[63,21,62,17],[63,22,62,18],[63,24,62,20],[64,12,63,8],[64,19,63,15],[64,23,63,19],[65,10,64,6],[66,8,65,4],[67,8,66,4],[67,15,66,11],[67,20,66,16],[68,6,67,2],[69,4,67,3],[70,6,67,3,"key"],[70,9,67,3],[71,6,67,3,"value"],[71,11,67,3],[71,13,69,2],[71,22,69,2,"size"],[71,26,69,6,"size"],[71,27,69,6],[71,29,69,17],[72,8,70,4],[72,15,70,11],[72,19,70,15],[72,20,70,16,"_childrenToCellKey"],[72,38,70,34],[72,39,70,35,"size"],[72,43,70,39],[73,6,71,2],[74,4,71,3],[75,2,71,3],[76,0,71,3],[76,3]],"functionMap":{"names":["<global>","ChildListCollection","add","remove","forEach","forEachInCell","anyInCell","size"],"mappings":"AAA;eCY;ECI;GDW;EEE;GFY;EGE;GHM;EIE;GJK;EKE;GLQ;EME;GNE"}},"type":"js/module"}]}