{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0},"end":{"line":155,"column":1}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0},"end":{"line":155,"column":1}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0},"end":{"line":155,"column":1}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0},"end":{"line":155,"column":1}}],"key":"yg7e6laZwmpbIvId5jovq9ugXp8="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0},"end":{"line":155,"column":1}}],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30="}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0},"end":{"line":11,"column":34}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.CellRenderMask = void 0;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"invariant\"));\n  var CellRenderMask = exports.CellRenderMask = /*#__PURE__*/function () {\n    function CellRenderMask(numCells) {\n      (0, _classCallCheck2.default)(this, CellRenderMask);\n      (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n      this._numCells = numCells;\n      if (numCells === 0) {\n        this._regions = [];\n      } else {\n        this._regions = [{\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true\n        }];\n      }\n    }\n    return (0, _createClass2.default)(CellRenderMask, [{\n      key: \"enumerateRegions\",\n      value: function enumerateRegions() {\n        return this._regions;\n      }\n    }, {\n      key: \"addCells\",\n      value: function addCells(cells) {\n        var _this$_regions;\n        (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n        if (cells.last < cells.first) {\n          return;\n        }\n        var _this$_findRegion = this._findRegion(cells.first),\n          _this$_findRegion2 = (0, _slicedToArray2.default)(_this$_findRegion, 2),\n          firstIntersect = _this$_findRegion2[0],\n          firstIntersectIdx = _this$_findRegion2[1];\n        var _this$_findRegion3 = this._findRegion(cells.last),\n          _this$_findRegion4 = (0, _slicedToArray2.default)(_this$_findRegion3, 2),\n          lastIntersect = _this$_findRegion4[0],\n          lastIntersectIdx = _this$_findRegion4[1];\n        if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n          return;\n        }\n        var newLeadRegion = [];\n        var newTailRegion = [];\n        var newMainRegion = Object.assign({}, cells, {\n          isSpacer: false\n        });\n        if (firstIntersect.first < newMainRegion.first) {\n          if (firstIntersect.isSpacer) {\n            newLeadRegion.push({\n              first: firstIntersect.first,\n              last: newMainRegion.first - 1,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.first = firstIntersect.first;\n          }\n        }\n        if (lastIntersect.last > newMainRegion.last) {\n          if (lastIntersect.isSpacer) {\n            newTailRegion.push({\n              first: newMainRegion.last + 1,\n              last: lastIntersect.last,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.last = lastIntersect.last;\n          }\n        }\n        var replacementRegions = [].concat(newLeadRegion, [newMainRegion], newTailRegion);\n        var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n        (_this$_regions = this._regions).splice.apply(_this$_regions, [firstIntersectIdx, numRegionsToDelete].concat((0, _toConsumableArray2.default)(replacementRegions)));\n      }\n    }, {\n      key: \"numCells\",\n      value: function numCells() {\n        return this._numCells;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(other) {\n        return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every(function (region, i) {\n          return region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer;\n        });\n      }\n    }, {\n      key: \"_findRegion\",\n      value: function _findRegion(cellIdx) {\n        var firstIdx = 0;\n        var lastIdx = this._regions.length - 1;\n        while (firstIdx <= lastIdx) {\n          var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n          var middleRegion = this._regions[middleIdx];\n          if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n            return [middleRegion, middleIdx];\n          } else if (cellIdx < middleRegion.first) {\n            lastIdx = middleIdx - 1;\n          } else if (cellIdx > middleRegion.last) {\n            firstIdx = middleIdx + 1;\n          }\n        }\n        (0, _invariant.default)(false, `A region was not found containing cellIdx ${cellIdx}`);\n      }\n    }]);\n  }();\n});","lineCount":114,"map":[[11,2,11,0],[11,6,11,0,"_invariant"],[11,16,11,0],[11,19,11,0,"_interopRequireDefault"],[11,41,11,0],[11,42,11,0,"_$$_REQUIRE"],[11,53,11,0],[11,54,11,0,"_dependencyMap"],[11,68,11,0],[12,2,11,34],[12,6,19,13,"CellRenderMask"],[12,20,19,27],[12,23,19,27,"exports"],[12,30,19,27],[12,31,19,27,"CellRenderMask"],[12,45,19,27],[13,4,23,2],[13,13,23,2,"CellRenderMask"],[13,28,23,14,"numCells"],[13,36,23,30],[13,38,23,32],[14,6,23,32],[14,10,23,32,"_classCallCheck2"],[14,26,23,32],[14,27,23,32,"default"],[14,34,23,32],[14,42,23,32,"CellRenderMask"],[14,56,23,32],[15,6,24,4],[15,10,24,4,"invariant"],[15,28,24,13],[15,30,25,6,"numCells"],[15,38,25,14],[15,42,25,18],[15,43,25,19],[15,45,26,6],[15,105,27,4],[15,106,27,5],[16,6,29,4],[16,10,29,8],[16,11,29,9,"_numCells"],[16,20,29,18],[16,23,29,21,"numCells"],[16,31,29,29],[17,6,31,4],[17,10,31,8,"numCells"],[17,18,31,16],[17,23,31,21],[17,24,31,22],[17,26,31,24],[18,8,32,6],[18,12,32,10],[18,13,32,11,"_regions"],[18,21,32,19],[18,24,32,22],[18,26,32,24],[19,6,33,4],[19,7,33,5],[19,13,33,11],[20,8,34,6],[20,12,34,10],[20,13,34,11,"_regions"],[20,21,34,19],[20,24,34,22],[20,25,35,8],[21,10,36,10,"first"],[21,15,36,15],[21,17,36,17],[21,18,36,18],[22,10,37,10,"last"],[22,14,37,14],[22,16,37,16,"numCells"],[22,24,37,24],[22,27,37,27],[22,28,37,28],[23,10,38,10,"isSpacer"],[23,18,38,18],[23,20,38,20],[24,8,39,8],[24,9,39,9],[24,10,40,7],[25,6,41,4],[26,4,42,2],[27,4,42,3],[27,15,42,3,"_createClass2"],[27,28,42,3],[27,29,42,3,"default"],[27,36,42,3],[27,38,42,3,"CellRenderMask"],[27,52,42,3],[28,6,42,3,"key"],[28,9,42,3],[29,6,42,3,"value"],[29,11,42,3],[29,13,44,2],[29,22,44,2,"enumerateRegions"],[29,38,44,18,"enumerateRegions"],[29,39,44,18],[29,41,44,49],[30,8,45,4],[30,15,45,11],[30,19,45,15],[30,20,45,16,"_regions"],[30,28,45,24],[31,6,46,2],[32,4,46,3],[33,6,46,3,"key"],[33,9,46,3],[34,6,46,3,"value"],[34,11,46,3],[34,13,48,2],[34,22,48,2,"addCells"],[34,30,48,10,"addCells"],[34,31,48,11,"cells"],[34,36,48,47],[34,38,48,55],[35,8,48,55],[35,12,48,55,"_this$_regions"],[35,26,48,55],[36,8,49,4],[36,12,49,4,"invariant"],[36,30,49,13],[36,32,50,6,"cells"],[36,37,50,11],[36,38,50,12,"first"],[36,43,50,17],[36,47,50,21],[36,48,50,22],[36,52,51,8,"cells"],[36,57,51,13],[36,58,51,14,"first"],[36,63,51,19],[36,66,51,22],[36,70,51,26],[36,71,51,27,"_numCells"],[36,80,51,36],[36,84,52,8,"cells"],[36,89,52,13],[36,90,52,14,"last"],[36,94,52,18],[36,98,52,22],[36,99,52,23],[36,100,52,24],[36,104,53,8,"cells"],[36,109,53,13],[36,110,53,14,"last"],[36,114,53,18],[36,117,53,21],[36,121,53,25],[36,122,53,26,"_numCells"],[36,131,53,35],[36,135,54,8,"cells"],[36,140,54,13],[36,141,54,14,"last"],[36,145,54,18],[36,149,54,22,"cells"],[36,154,54,27],[36,155,54,28,"first"],[36,160,54,33],[36,163,54,36],[36,164,54,37],[36,166,55,6],[36,222,56,4],[36,223,56,5],[37,8,60,4],[37,12,60,8,"cells"],[37,17,60,13],[37,18,60,14,"last"],[37,22,60,18],[37,25,60,21,"cells"],[37,30,60,26],[37,31,60,27,"first"],[37,36,60,32],[37,38,60,34],[38,10,61,6],[39,8,62,4],[40,8,64,4],[40,12,64,4,"_this$_findRegion"],[40,29,64,4],[40,32,64,48],[40,36,64,52],[40,37,64,53,"_findRegion"],[40,48,64,64],[40,49,64,65,"cells"],[40,54,64,70],[40,55,64,71,"first"],[40,60,64,76],[40,61,64,77],[41,10,64,77,"_this$_findRegion2"],[41,28,64,77],[41,35,64,77,"_slicedToArray2"],[41,50,64,77],[41,51,64,77,"default"],[41,58,64,77],[41,60,64,77,"_this$_findRegion"],[41,77,64,77],[42,10,64,11,"firstIntersect"],[42,24,64,25],[42,27,64,25,"_this$_findRegion2"],[42,45,64,25],[43,10,64,27,"firstIntersectIdx"],[43,27,64,44],[43,30,64,44,"_this$_findRegion2"],[43,48,64,44],[44,8,65,4],[44,12,65,4,"_this$_findRegion3"],[44,30,65,4],[44,33,65,46],[44,37,65,50],[44,38,65,51,"_findRegion"],[44,49,65,62],[44,50,65,63,"cells"],[44,55,65,68],[44,56,65,69,"last"],[44,60,65,73],[44,61,65,74],[45,10,65,74,"_this$_findRegion4"],[45,28,65,74],[45,35,65,74,"_slicedToArray2"],[45,50,65,74],[45,51,65,74,"default"],[45,58,65,74],[45,60,65,74,"_this$_findRegion3"],[45,78,65,74],[46,10,65,11,"lastIntersect"],[46,23,65,24],[46,26,65,24,"_this$_findRegion4"],[46,44,65,24],[47,10,65,26,"lastIntersectIdx"],[47,26,65,42],[47,29,65,42,"_this$_findRegion4"],[47,47,65,42],[48,8,69,4],[48,12,69,8,"firstIntersectIdx"],[48,29,69,25],[48,34,69,30,"lastIntersectIdx"],[48,50,69,46],[48,54,69,50],[48,55,69,51,"firstIntersect"],[48,69,69,65],[48,70,69,66,"isSpacer"],[48,78,69,74],[48,80,69,76],[49,10,70,6],[50,8,71,4],[51,8,75,4],[51,12,75,10,"newLeadRegion"],[51,25,75,42],[51,28,75,45],[51,30,75,47],[52,8,76,4],[52,12,76,10,"newTailRegion"],[52,25,76,42],[52,28,76,45],[52,30,76,47],[53,8,77,4],[53,12,77,10,"newMainRegion"],[53,25,77,35],[53,28,77,35,"Object"],[53,34,77,35],[53,35,77,35,"assign"],[53,41,77,35],[53,46,78,9,"cells"],[53,51,78,14],[54,10,79,6,"isSpacer"],[54,18,79,14],[54,20,79,16],[55,8,79,21],[55,10,80,5],[56,8,82,4],[56,12,82,8,"firstIntersect"],[56,26,82,22],[56,27,82,23,"first"],[56,32,82,28],[56,35,82,31,"newMainRegion"],[56,48,82,44],[56,49,82,45,"first"],[56,54,82,50],[56,56,82,52],[57,10,83,6],[57,14,83,10,"firstIntersect"],[57,28,83,24],[57,29,83,25,"isSpacer"],[57,37,83,33],[57,39,83,35],[58,12,84,8,"newLeadRegion"],[58,25,84,21],[58,26,84,22,"push"],[58,30,84,26],[58,31,84,27],[59,14,85,10,"first"],[59,19,85,15],[59,21,85,17,"firstIntersect"],[59,35,85,31],[59,36,85,32,"first"],[59,41,85,37],[60,14,86,10,"last"],[60,18,86,14],[60,20,86,16,"newMainRegion"],[60,33,86,29],[60,34,86,30,"first"],[60,39,86,35],[60,42,86,38],[60,43,86,39],[61,14,87,10,"isSpacer"],[61,22,87,18],[61,24,87,20],[62,12,88,8],[62,13,88,9],[62,14,88,10],[63,10,89,6],[63,11,89,7],[63,17,89,13],[64,12,90,8,"newMainRegion"],[64,25,90,21],[64,26,90,22,"first"],[64,31,90,27],[64,34,90,30,"firstIntersect"],[64,48,90,44],[64,49,90,45,"first"],[64,54,90,50],[65,10,91,6],[66,8,92,4],[67,8,94,4],[67,12,94,8,"lastIntersect"],[67,25,94,21],[67,26,94,22,"last"],[67,30,94,26],[67,33,94,29,"newMainRegion"],[67,46,94,42],[67,47,94,43,"last"],[67,51,94,47],[67,53,94,49],[68,10,95,6],[68,14,95,10,"lastIntersect"],[68,27,95,23],[68,28,95,24,"isSpacer"],[68,36,95,32],[68,38,95,34],[69,12,96,8,"newTailRegion"],[69,25,96,21],[69,26,96,22,"push"],[69,30,96,26],[69,31,96,27],[70,14,97,10,"first"],[70,19,97,15],[70,21,97,17,"newMainRegion"],[70,34,97,30],[70,35,97,31,"last"],[70,39,97,35],[70,42,97,38],[70,43,97,39],[71,14,98,10,"last"],[71,18,98,14],[71,20,98,16,"lastIntersect"],[71,33,98,29],[71,34,98,30,"last"],[71,38,98,34],[72,14,99,10,"isSpacer"],[72,22,99,18],[72,24,99,20],[73,12,100,8],[73,13,100,9],[73,14,100,10],[74,10,101,6],[74,11,101,7],[74,17,101,13],[75,12,102,8,"newMainRegion"],[75,25,102,21],[75,26,102,22,"last"],[75,30,102,26],[75,33,102,29,"lastIntersect"],[75,46,102,42],[75,47,102,43,"last"],[75,51,102,47],[76,10,103,6],[77,8,104,4],[78,8,106,4],[78,12,106,10,"replacementRegions"],[78,30,106,47],[78,36,106,47,"concat"],[78,42,106,47],[78,43,107,9,"newLeadRegion"],[78,56,107,22],[78,59,108,6,"newMainRegion"],[78,72,108,19],[78,75,109,9,"newTailRegion"],[78,88,109,22],[78,89,110,5],[79,8,111,4],[79,12,111,10,"numRegionsToDelete"],[79,30,111,28],[79,33,111,31,"lastIntersectIdx"],[79,49,111,47],[79,52,111,50,"firstIntersectIdx"],[79,69,111,67],[79,72,111,70],[79,73,111,71],[80,8,112,4],[80,9,112,4,"_this$_regions"],[80,23,112,4],[80,30,112,8],[80,31,112,9,"_regions"],[80,39,112,17],[80,41,112,18,"splice"],[80,47,112,24],[80,48,112,24,"apply"],[80,53,112,24],[80,54,112,24,"_this$_regions"],[80,68,112,24],[80,71,113,6,"firstIntersectIdx"],[80,88,113,23],[80,90,114,6,"numRegionsToDelete"],[80,108,114,24],[80,110,114,24,"concat"],[80,116,114,24],[80,121,114,24,"_toConsumableArray2"],[80,140,114,24],[80,141,114,24,"default"],[80,148,114,24],[80,150,115,9,"replacementRegions"],[80,168,115,27],[80,170,116,4],[80,171,116,5],[81,6,117,2],[82,4,117,3],[83,6,117,3,"key"],[83,9,117,3],[84,6,117,3,"value"],[84,11,117,3],[84,13,119,2],[84,22,119,2,"numCells"],[84,30,119,10,"numCells"],[84,31,119,10],[84,33,119,21],[85,8,120,4],[85,15,120,11],[85,19,120,15],[85,20,120,16,"_numCells"],[85,29,120,25],[86,6,121,2],[87,4,121,3],[88,6,121,3,"key"],[88,9,121,3],[89,6,121,3,"value"],[89,11,121,3],[89,13,123,2],[89,22,123,2,"equals"],[89,28,123,8,"equals"],[89,29,123,9,"other"],[89,34,123,30],[89,36,123,41],[90,8,124,4],[90,15,125,6],[90,19,125,10],[90,20,125,11,"_numCells"],[90,29,125,20],[90,34,125,25,"other"],[90,39,125,30],[90,40,125,31,"_numCells"],[90,49,125,40],[90,53,126,6],[90,57,126,10],[90,58,126,11,"_regions"],[90,66,126,19],[90,67,126,20,"length"],[90,73,126,26],[90,78,126,31,"other"],[90,83,126,36],[90,84,126,37,"_regions"],[90,92,126,45],[90,93,126,46,"length"],[90,99,126,52],[90,103,127,6],[90,107,127,10],[90,108,127,11,"_regions"],[90,116,127,19],[90,117,127,20,"every"],[90,122,127,25],[90,123,128,8],[90,133,128,9,"region"],[90,139,128,15],[90,141,128,17,"i"],[90,142,128,18],[91,10,128,18],[91,17,129,10,"region"],[91,23,129,16],[91,24,129,17,"first"],[91,29,129,22],[91,34,129,27,"other"],[91,39,129,32],[91,40,129,33,"_regions"],[91,48,129,41],[91,49,129,42,"i"],[91,50,129,43],[91,51,129,44],[91,52,129,45,"first"],[91,57,129,50],[91,61,130,10,"region"],[91,67,130,16],[91,68,130,17,"last"],[91,72,130,21],[91,77,130,26,"other"],[91,82,130,31],[91,83,130,32,"_regions"],[91,91,130,40],[91,92,130,41,"i"],[91,93,130,42],[91,94,130,43],[91,95,130,44,"last"],[91,99,130,48],[91,103,131,10,"region"],[91,109,131,16],[91,110,131,17,"isSpacer"],[91,118,131,25],[91,123,131,30,"other"],[91,128,131,35],[91,129,131,36,"_regions"],[91,137,131,44],[91,138,131,45,"i"],[91,139,131,46],[91,140,131,47],[91,141,131,48,"isSpacer"],[91,149,131,56],[92,8,131,56],[92,9,132,6],[92,10,132,7],[93,6,134,2],[94,4,134,3],[95,6,134,3,"key"],[95,9,134,3],[96,6,134,3,"value"],[96,11,134,3],[96,13,136,2],[96,22,136,2,"_findRegion"],[96,33,136,13,"_findRegion"],[96,34,136,14,"cellIdx"],[96,41,136,29],[96,43,136,53],[97,8,137,4],[97,12,137,8,"firstIdx"],[97,20,137,16],[97,23,137,19],[97,24,137,20],[98,8,138,4],[98,12,138,8,"lastIdx"],[98,19,138,15],[98,22,138,18],[98,26,138,22],[98,27,138,23,"_regions"],[98,35,138,31],[98,36,138,32,"length"],[98,42,138,38],[98,45,138,41],[98,46,138,42],[99,8,140,4],[99,15,140,11,"firstIdx"],[99,23,140,19],[99,27,140,23,"lastIdx"],[99,34,140,30],[99,36,140,32],[100,10,141,6],[100,14,141,12,"middleIdx"],[100,23,141,21],[100,26,141,24,"Math"],[100,30,141,28],[100,31,141,29,"floor"],[100,36,141,34],[100,37,141,35],[100,38,141,36,"firstIdx"],[100,46,141,44],[100,49,141,47,"lastIdx"],[100,56,141,54],[100,60,141,58],[100,61,141,59],[100,62,141,60],[101,10,142,6],[101,14,142,12,"middleRegion"],[101,26,142,24],[101,29,142,27],[101,33,142,31],[101,34,142,32,"_regions"],[101,42,142,40],[101,43,142,41,"middleIdx"],[101,52,142,50],[101,53,142,51],[102,10,144,6],[102,14,144,10,"cellIdx"],[102,21,144,17],[102,25,144,21,"middleRegion"],[102,37,144,33],[102,38,144,34,"first"],[102,43,144,39],[102,47,144,43,"cellIdx"],[102,54,144,50],[102,58,144,54,"middleRegion"],[102,70,144,66],[102,71,144,67,"last"],[102,75,144,71],[102,77,144,73],[103,12,145,8],[103,19,145,15],[103,20,145,16,"middleRegion"],[103,32,145,28],[103,34,145,30,"middleIdx"],[103,43,145,39],[103,44,145,40],[104,10,146,6],[104,11,146,7],[104,17,146,13],[104,21,146,17,"cellIdx"],[104,28,146,24],[104,31,146,27,"middleRegion"],[104,43,146,39],[104,44,146,40,"first"],[104,49,146,45],[104,51,146,47],[105,12,147,8,"lastIdx"],[105,19,147,15],[105,22,147,18,"middleIdx"],[105,31,147,27],[105,34,147,30],[105,35,147,31],[106,10,148,6],[106,11,148,7],[106,17,148,13],[106,21,148,17,"cellIdx"],[106,28,148,24],[106,31,148,27,"middleRegion"],[106,43,148,39],[106,44,148,40,"last"],[106,48,148,44],[106,50,148,46],[107,12,149,8,"firstIdx"],[107,20,149,16],[107,23,149,19,"middleIdx"],[107,32,149,28],[107,35,149,31],[107,36,149,32],[108,10,150,6],[109,8,151,4],[110,8,153,4],[110,12,153,4,"invariant"],[110,30,153,13],[110,32,153,14],[110,37,153,19],[110,39,153,21],[110,84,153,66,"cellIdx"],[110,91,153,73],[110,93,153,75],[110,94,153,76],[111,6,154,2],[112,4,154,3],[113,2,154,3],[114,0,154,3],[114,3]],"functionMap":{"names":["<global>","CellRenderMask","constructor","enumerateRegions","addCells","numCells","equals","_regions.every$argument_0","_findRegion"],"mappings":"AAA;OCkB;ECI;GDmB;EEE;GFE;EGE;GHqE;EIE;GJE;EKE;QCK;wDDG;GLG;EOE;GPkB"}},"type":"js/module"}]}