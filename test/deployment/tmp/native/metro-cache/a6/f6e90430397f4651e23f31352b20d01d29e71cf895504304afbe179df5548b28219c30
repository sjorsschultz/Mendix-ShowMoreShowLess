{"dependencies":[{"name":"@babel/runtime/helpers/toArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":24,"column":46,"index":1210}}],"key":"yxbT34yjmkVZuhOKwnPlwW2nTdA="}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":49,"index":178},"end":{"line":7,"column":80,"index":209}}],"key":"14QBo/6I2jfYu7Ct29OWBvp5ENM="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _toArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.extractPathFromURL = extractPathFromURL;\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"escape-string-regexp\"));\n  function _interopRequireDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function extractPathFromURL(prefixes, url) {\n    for (var prefix of prefixes) {\n      var _prefix$match$, _prefix$match;\n      var protocol = (_prefix$match$ = (_prefix$match = prefix.match(/^[^:]+:/)) == null ? void 0 : _prefix$match[0]) != null ? _prefix$match$ : '';\n      var host = prefix.replace(new RegExp(`^${(0, _escapeStringRegexp.default)(protocol)}`), '').replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n      .replace(/^\\//, ''); // Remove extra leading slash\n\n      var prefixRegex = new RegExp(`^${(0, _escapeStringRegexp.default)(protocol)}(/)*${host.split('.').map(function (it) {\n        return it === '*' ? '[^/]+' : (0, _escapeStringRegexp.default)(it);\n      }).join('\\\\.')}`);\n      var _url$split = url.split('?'),\n        _url$split2 = _toArray(_url$split),\n        originAndPath = _url$split2[0],\n        searchParams = _url$split2.slice(1);\n      var normalizedURL = originAndPath.replace(/\\/+/g, '/').concat(searchParams.length ? `?${searchParams.join('?')}` : '');\n      if (prefixRegex.test(normalizedURL)) {\n        return normalizedURL.replace(prefixRegex, '');\n      }\n    }\n    return undefined;\n  }\n});","lineCount":36,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toArray"],[4,14,1,13],[4,17,1,13,"_$$_REQUIRE"],[4,28,1,13],[4,29,1,13,"_dependencyMap"],[4,43,1,13],[5,2,3,0,"Object"],[5,8,3,6],[5,9,3,7,"defineProperty"],[5,23,3,21],[5,24,3,22,"exports"],[5,31,3,29],[5,33,3,31],[5,45,3,43],[5,47,3,45],[6,4,4,2,"value"],[6,9,4,7],[6,11,4,9],[7,2,5,0],[7,3,5,1],[7,4,5,2],[8,2,6,0,"exports"],[8,9,6,7],[8,10,6,8,"extractPathFromURL"],[8,28,6,26],[8,31,6,29,"extractPathFromURL"],[8,49,6,47],[9,2,7,0],[9,6,7,4,"_escapeStringRegexp"],[9,25,7,23],[9,28,7,26,"_interopRequireDefault"],[9,50,7,48],[9,51,7,49,"require"],[9,62,7,56],[9,63,7,56,"_dependencyMap"],[9,77,7,56],[9,104,7,79],[9,105,7,80],[9,106,7,81],[10,2,8,0],[10,11,8,9,"_interopRequireDefault"],[10,33,8,31,"_interopRequireDefault"],[10,34,8,32,"e"],[10,35,8,33],[10,37,8,35],[11,4,8,37],[11,11,8,44,"e"],[11,12,8,45],[11,16,8,49,"e"],[11,17,8,50],[11,18,8,51,"__esModule"],[11,28,8,61],[11,31,8,64,"e"],[11,32,8,65],[11,35,8,68],[12,6,8,70,"default"],[12,13,8,77],[12,15,8,79,"e"],[13,4,8,81],[13,5,8,82],[14,2,8,84],[15,2,9,0],[15,11,9,9,"extractPathFromURL"],[15,29,9,27,"extractPathFromURL"],[15,30,9,28,"prefixes"],[15,38,9,36],[15,40,9,38,"url"],[15,43,9,41],[15,45,9,43],[16,4,10,2],[16,9,10,7],[16,13,10,13,"prefix"],[16,19,10,19],[16,23,10,23,"prefixes"],[16,31,10,31],[16,33,10,33],[17,6,10,33],[17,10,10,33,"_prefix$match$"],[17,24,10,33],[17,26,10,33,"_prefix$match"],[17,39,10,33],[18,6,11,4],[18,10,11,10,"protocol"],[18,18,11,18],[18,22,11,18,"_prefix$match$"],[18,36,11,18],[18,40,11,18,"_prefix$match"],[18,53,11,18],[18,56,11,21,"prefix"],[18,62,11,27],[18,63,11,28,"match"],[18,68,11,33],[18,69,11,34],[18,78,11,43],[18,79,11,44],[18,100,11,21,"_prefix$match"],[18,113,11,21],[18,114,11,47],[18,115,11,48],[18,116,11,49],[18,128,11,49,"_prefix$match$"],[18,142,11,49],[18,145,11,53],[18,147,11,55],[19,6,12,4],[19,10,12,10,"host"],[19,14,12,14],[19,17,12,17,"prefix"],[19,23,12,23],[19,24,12,24,"replace"],[19,31,12,31],[19,32,12,32],[19,36,12,36,"RegExp"],[19,42,12,42],[19,43,12,43],[19,47,12,47],[19,48,12,48],[19,49,12,49],[19,51,12,51,"_escapeStringRegexp"],[19,70,12,70],[19,71,12,71,"default"],[19,78,12,78],[19,80,12,80,"protocol"],[19,88,12,88],[19,89,12,89],[19,91,12,91],[19,92,12,92],[19,94,12,94],[19,96,12,96],[19,97,12,97],[19,98,12,98,"replace"],[19,105,12,105],[19,106,12,106],[19,112,12,112],[19,114,12,114],[19,117,12,117],[19,118,12,118],[19,119,12,119],[20,6,12,119],[20,7,13,5,"replace"],[20,14,13,12],[20,15,13,13],[20,20,13,18],[20,22,13,20],[20,24,13,22],[20,25,13,23],[20,26,13,24],[20,27,13,25],[22,6,15,4],[22,10,15,10,"prefixRegex"],[22,21,15,21],[22,24,15,24],[22,28,15,28,"RegExp"],[22,34,15,34],[22,35,15,35],[22,39,15,39],[22,40,15,40],[22,41,15,41],[22,43,15,43,"_escapeStringRegexp"],[22,62,15,62],[22,63,15,63,"default"],[22,70,15,70],[22,72,15,72,"protocol"],[22,80,15,80],[22,81,15,81],[22,88,15,88,"host"],[22,92,15,92],[22,93,15,93,"split"],[22,98,15,98],[22,99,15,99],[22,102,15,102],[22,103,15,103],[22,104,15,104,"map"],[22,107,15,107],[22,108,15,108],[22,118,15,108,"it"],[22,120,15,110],[23,8,15,110],[23,15,15,114,"it"],[23,17,15,116],[23,22,15,121],[23,25,15,124],[23,28,15,127],[23,35,15,134],[23,38,15,137],[23,39,15,138],[23,40,15,139],[23,42,15,141,"_escapeStringRegexp"],[23,61,15,160],[23,62,15,161,"default"],[23,69,15,168],[23,71,15,170,"it"],[23,73,15,172],[23,74,15,173],[24,6,15,173],[24,8,15,174],[24,9,15,175,"join"],[24,13,15,179],[24,14,15,180],[24,19,15,185],[24,20,15,186],[24,22,15,188],[24,23,15,189],[25,6,16,4],[25,10,16,4,"_url$split"],[25,20,16,4],[25,23,16,45,"url"],[25,26,16,48],[25,27,16,49,"split"],[25,32,16,54],[25,33,16,55],[25,36,16,58],[25,37,16,59],[26,8,16,59,"_url$split2"],[26,19,16,59],[26,22,16,59,"_toArray"],[26,30,16,59],[26,31,16,59,"_url$split"],[26,41,16,59],[27,8,16,11,"originAndPath"],[27,21,16,24],[27,24,16,24,"_url$split2"],[27,35,16,24],[28,8,16,29,"searchParams"],[28,20,16,41],[28,23,16,41,"_url$split2"],[28,34,16,41],[28,35,16,41,"slice"],[28,40,16,41],[29,6,17,4],[29,10,17,10,"normalizedURL"],[29,23,17,23],[29,26,17,26,"originAndPath"],[29,39,17,39],[29,40,17,40,"replace"],[29,47,17,47],[29,48,17,48],[29,54,17,54],[29,56,17,56],[29,59,17,59],[29,60,17,60],[29,61,17,61,"concat"],[29,67,17,67],[29,68,17,68,"searchParams"],[29,80,17,80],[29,81,17,81,"length"],[29,87,17,87],[29,90,17,90],[29,94,17,94,"searchParams"],[29,106,17,106],[29,107,17,107,"join"],[29,111,17,111],[29,112,17,112],[29,115,17,115],[29,116,17,116],[29,118,17,118],[29,121,17,121],[29,123,17,123],[29,124,17,124],[30,6,18,4],[30,10,18,8,"prefixRegex"],[30,21,18,19],[30,22,18,20,"test"],[30,26,18,24],[30,27,18,25,"normalizedURL"],[30,40,18,38],[30,41,18,39],[30,43,18,41],[31,8,19,6],[31,15,19,13,"normalizedURL"],[31,28,19,26],[31,29,19,27,"replace"],[31,36,19,34],[31,37,19,35,"prefixRegex"],[31,48,19,46],[31,50,19,48],[31,52,19,50],[31,53,19,51],[32,6,20,4],[33,4,21,2],[34,4,22,2],[34,11,22,9,"undefined"],[34,20,22,18],[35,2,23,0],[36,0,23,1],[36,3]],"functionMap":{"names":["<global>","_interopRequireDefault","extractPathFromURL","host.split.map$argument_0"],"mappings":"AAA;ACO,qFD;AEC;4GCM,iED;CFQ"}},"type":"js/module"}]}