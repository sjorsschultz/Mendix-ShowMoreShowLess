{"dependencies":[{"name":"react-native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":19,"index":134},"end":{"line":7,"column":42,"index":157}}],"key":"lGv6jwyWtmgghjjYvCX5yhM2Jt0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.conditional = conditional;\n  var _reactNative = _$$_REQUIRE(_dependencyMap[0], \"react-native\");\n  var _reactNative$Animated = _reactNative.Animated,\n    add = _reactNative$Animated.add,\n    multiply = _reactNative$Animated.multiply;\n\n  /**\n   * Use an Animated Node based on a condition. Similar to Reanimated's `cond`.\n   *\n   * @param condition Animated Node representing the condition, must be 0 or 1, 1 means `true`, 0 means `false`\n   * @param main Animated Node to use if the condition is `true`\n   * @param fallback Animated Node to use if the condition is `false`\n   */\n  function conditional(condition, main, fallback) {\n    // To implement this behavior, we multiply the main node with the condition.\n    // So if condition is 0, result will be 0, and if condition is 1, result will be main node.\n    // Then we multiple reverse of the condition (0 if condition is 1) with the fallback.\n    // So if condition is 0, result will be fallback node, and if condition is 1, result will be 0,\n    // This way, one of them will always be 0, and other one will be the value we need.\n    // In the end we add them both together, 0 + value we need = value we need\n    return add(multiply(condition, main), multiply(condition.interpolate({\n      inputRange: [0, 1],\n      outputRange: [1, 0]\n    }), fallback));\n  }\n});","lineCount":32,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"conditional"],[7,21,6,19],[7,24,6,22,"conditional"],[7,35,6,33],[8,2,7,0],[8,6,7,4,"_reactNative"],[8,18,7,16],[8,21,7,19,"require"],[8,32,7,26],[8,33,7,26,"_dependencyMap"],[8,47,7,26],[8,66,7,41],[8,67,7,42],[9,2,8,0],[9,6,8,0,"_reactNative$Animated"],[9,27,8,0],[9,30,11,4,"_reactNative"],[9,42,11,16],[9,43,11,17,"Animated"],[9,51,11,25],[10,4,9,2,"add"],[10,7,9,5],[10,10,9,5,"_reactNative$Animated"],[10,31,9,5],[10,32,9,2,"add"],[10,35,9,5],[11,4,10,2,"multiply"],[11,12,10,10],[11,15,10,10,"_reactNative$Animated"],[11,36,10,10],[11,37,10,2,"multiply"],[11,45,10,10],[13,2,13,0],[14,0,14,0],[15,0,15,0],[16,0,16,0],[17,0,17,0],[18,0,18,0],[19,0,19,0],[20,2,20,0],[20,11,20,9,"conditional"],[20,22,20,20,"conditional"],[20,23,20,21,"condition"],[20,32,20,30],[20,34,20,32,"main"],[20,38,20,36],[20,40,20,38,"fallback"],[20,48,20,46],[20,50,20,48],[21,4,21,2],[22,4,22,2],[23,4,23,2],[24,4,24,2],[25,4,25,2],[26,4,26,2],[27,4,27,2],[27,11,27,9,"add"],[27,14,27,12],[27,15,27,13,"multiply"],[27,23,27,21],[27,24,27,22,"condition"],[27,33,27,31],[27,35,27,33,"main"],[27,39,27,37],[27,40,27,38],[27,42,27,40,"multiply"],[27,50,27,48],[27,51,27,49,"condition"],[27,60,27,58],[27,61,27,59,"interpolate"],[27,72,27,70],[27,73,27,71],[28,6,28,4,"inputRange"],[28,16,28,14],[28,18,28,16],[28,19,28,17],[28,20,28,18],[28,22,28,20],[28,23,28,21],[28,24,28,22],[29,6,29,4,"outputRange"],[29,17,29,15],[29,19,29,17],[29,20,29,18],[29,21,29,19],[29,23,29,21],[29,24,29,22],[30,4,30,2],[30,5,30,3],[30,6,30,4],[30,8,30,6,"fallback"],[30,16,30,14],[30,17,30,15],[30,18,30,16],[31,2,31,0],[32,0,31,1],[32,3]],"functionMap":{"names":["<global>","conditional"],"mappings":"AAA;ACmB;CDW"}},"type":"js/module"}]}