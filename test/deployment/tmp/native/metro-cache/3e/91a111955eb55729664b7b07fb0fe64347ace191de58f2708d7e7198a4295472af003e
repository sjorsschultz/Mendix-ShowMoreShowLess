{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":55,"column":0,"index":1944}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk="}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":174},"end":{"line":5,"column":43,"index":217}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8="}},{"name":"../../../findNodeHandle","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":218},"end":{"line":6,"column":53,"index":271}}],"key":"k+xfarWxri7fB3IShKFMK0oi5UQ="}},{"name":"../../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"4wo4OYT4MSo2InL8kiWmZxvepwE="}},{"name":"../../../getShadowNodeFromRef","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":69,"index":124}}],"key":"84Qu5UH2d/L4S1+Pr1wW2nxbCNI="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useViewRefHandler = useViewRefHandler;\n  var _react = _$$_REQUIRE(_dependencyMap[1], \"react\");\n  var _findNodeHandle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"../../../findNodeHandle\"));\n  // Ref handler for the Wrap component attached under the GestureDetector.\n  // It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n  // if the view has changed.\n  function useViewRefHandler(state, updateAttachedGestures) {\n    var refHandler = (0, _react.useCallback)(function (ref) {\n      if (ref === null) {\n        return;\n      }\n      state.viewRef = ref;\n\n      // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = (0, _findNodeHandle.default)(state.viewRef);\n      }\n\n      // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n      if (__DEV__ && (0, _$$_REQUIRE(_dependencyMap[3], \"../../../utils\").isFabric)() && global.isViewFlatteningDisabled) {\n        var node = (0, _$$_REQUIRE(_dependencyMap[4], \"../../../getShadowNodeFromRef\").getShadowNodeFromRef)(ref);\n        if (global.isViewFlatteningDisabled(node) === false) {\n          console.error((0, _$$_REQUIRE(_dependencyMap[3], \"../../../utils\").tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));\n        }\n      }\n    }, [state, updateAttachedGestures]);\n    return refHandler;\n  }\n});","lineCount":38,"map":[[7,2,5,0],[7,6,5,0,"_react"],[7,12,5,0],[7,15,5,0,"_$$_REQUIRE"],[7,26,5,0],[7,27,5,0,"_dependencyMap"],[7,41,5,0],[8,2,6,0],[8,6,6,0,"_findNodeHandle"],[8,21,6,0],[8,24,6,0,"_interopRequireDefault"],[8,46,6,0],[8,47,6,0,"_$$_REQUIRE"],[8,58,6,0],[8,59,6,0,"_dependencyMap"],[8,73,6,0],[9,2,12,0],[10,2,13,0],[11,2,14,0],[12,2,15,7],[12,11,15,16,"useViewRefHandler"],[12,28,15,33,"useViewRefHandler"],[12,29,16,2,"state"],[12,34,16,29],[12,36,17,2,"updateAttachedGestures"],[12,58,17,62],[12,60,18,2],[13,4,19,2],[13,8,19,8,"refHandler"],[13,18,19,18],[13,21,19,21],[13,25,19,21,"useCallback"],[13,43,19,32],[13,45,20,4],[13,55,20,5,"ref"],[13,58,20,32],[13,60,20,37],[14,6,21,6],[14,10,21,10,"ref"],[14,13,21,13],[14,18,21,18],[14,22,21,22],[14,24,21,24],[15,8,22,8],[16,6,23,6],[17,6,25,6,"state"],[17,11,25,11],[17,12,25,12,"viewRef"],[17,19,25,19],[17,22,25,22,"ref"],[17,25,25,25],[19,6,27,6],[20,6,28,6],[20,10,28,10,"state"],[20,15,28,15],[20,16,28,16,"previousViewTag"],[20,31,28,31],[20,36,28,36],[20,37,28,37],[20,38,28,38],[20,40,28,40],[21,8,29,8,"state"],[21,13,29,13],[21,14,29,14,"previousViewTag"],[21,29,29,29],[21,32,29,32],[21,36,29,32,"findNodeHandle"],[21,59,29,46],[21,61,29,47,"state"],[21,66,29,52],[21,67,29,53,"viewRef"],[21,74,29,60],[21,75,29,71],[22,6,30,6],[24,6,32,6],[25,6,33,6],[26,6,34,6],[26,10,34,10],[26,11,34,11,"state"],[26,16,34,16],[26,17,34,17,"firstRender"],[26,28,34,28],[26,30,34,30],[27,8,35,8,"updateAttachedGestures"],[27,30,35,30],[27,31,35,31],[27,35,35,35],[27,36,35,36],[28,6,36,6],[29,6,38,6],[29,10,38,10,"__DEV__"],[29,17,38,17],[29,21,38,21],[29,25,38,21,"isFabric"],[29,55,38,21],[29,56,38,21,"isFabric"],[29,82,38,29],[29,84,38,30],[29,85,38,31],[29,89,38,35,"global"],[29,95,38,41],[29,96,38,42,"isViewFlatteningDisabled"],[29,120,38,66],[29,122,38,68],[30,8,39,8],[30,12,39,14,"node"],[30,16,39,18],[30,19,39,21],[30,23,39,21,"getShadowNodeFromRef"],[30,53,39,21],[30,54,39,21,"getShadowNodeFromRef"],[30,107,39,41],[30,109,39,42,"ref"],[30,112,39,45],[30,113,39,46],[31,8,40,8],[31,12,40,12,"global"],[31,18,40,18],[31,19,40,19,"isViewFlatteningDisabled"],[31,43,40,43],[31,44,40,44,"node"],[31,48,40,48],[31,49,40,49],[31,54,40,54],[31,59,40,59],[31,61,40,61],[32,10,41,10,"console"],[32,17,41,17],[32,18,41,18,"error"],[32,23,41,23],[32,24,42,12],[32,28,42,12,"tagMessage"],[32,58,42,12],[32,59,42,12,"tagMessage"],[32,87,42,22],[32,89,43,14],[32,157,43,82],[32,160,44,16],[32,258,45,12],[32,259,46,10],[32,260,46,11],[33,8,47,8],[34,6,48,6],[35,4,49,4],[35,5,49,5],[35,7,50,4],[35,8,50,5,"state"],[35,13,50,10],[35,15,50,12,"updateAttachedGestures"],[35,37,50,34],[35,38,51,2],[35,39,51,3],[36,4,53,2],[36,11,53,9,"refHandler"],[36,21,53,19],[37,2,54,0],[38,0,54,1],[38,3]],"functionMap":{"names":["<global>","useViewRefHandler","refHandler"],"mappings":"AAA;OCc;ICK;KD6B;CDK"}},"type":"js/module"}]}