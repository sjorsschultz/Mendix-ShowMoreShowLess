{"dependencies":[{"name":"./useRouteCache.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":21,"index":170},"end":{"line":7,"column":50,"index":199}}],"key":"vRgeMZqFJTNPt+F3yethsGfdxa8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getFocusedRouteNameFromRoute = getFocusedRouteNameFromRoute;\n  function getFocusedRouteNameFromRoute(route) {\n    var _route$_useRouteCache, _state$index;\n    // @ts-expect-error: this isn't in type definitions coz we want this private\n    var state = (_route$_useRouteCache = route[_$$_REQUIRE(_dependencyMap[0], \"./useRouteCache.js\").CHILD_STATE]) != null ? _route$_useRouteCache : route.state;\n    var params = route.params;\n    var routeName = state ?\n    // Get the currently active route name in the nested navigator\n    state.routes[// If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n    // The type property will only exist for rehydrated state and not for state from deep link\n    (_state$index = state.index) != null ? _state$index : typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1].name :\n    // If state doesn't exist, we need to default to `screen` param if available\n    typeof (params == null ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n    return routeName;\n  }\n});","lineCount":22,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"getFocusedRouteNameFromRoute"],[7,38,6,36],[7,41,6,39,"getFocusedRouteNameFromRoute"],[7,69,6,67],[8,2,8,0],[8,11,8,9,"getFocusedRouteNameFromRoute"],[8,39,8,37,"getFocusedRouteNameFromRoute"],[8,40,8,38,"route"],[8,45,8,43],[8,47,8,45],[9,4,8,45],[9,8,8,45,"_route$_useRouteCache"],[9,29,8,45],[9,31,8,45,"_state$index"],[9,43,8,45],[10,4,9,2],[11,4,10,2],[11,8,10,8,"state"],[11,13,10,13],[11,17,10,13,"_route$_useRouteCache"],[11,38,10,13],[11,41,10,16,"route"],[11,46,10,21],[11,47,10,22,"_$$_REQUIRE"],[11,58,10,22],[11,59,10,22,"_dependencyMap"],[11,73,10,22],[11,100,10,37,"CHILD_STATE"],[11,111,10,48],[11,112,10,49],[11,124,10,49,"_route$_useRouteCache"],[11,145,10,49],[11,148,10,53,"route"],[11,153,10,58],[11,154,10,59,"state"],[11,159,10,64],[12,4,11,2],[12,8,11,8,"params"],[12,14,11,14],[12,17,11,17,"route"],[12,22,11,22],[12,23,11,23,"params"],[12,29,11,29],[13,4,12,2],[13,8,12,8,"routeName"],[13,17,12,17],[13,20,12,20,"state"],[13,25,12,25],[14,4,13,2],[15,4,14,2,"state"],[15,9,14,7],[15,10,14,8,"routes"],[15,16,14,14],[15,17,15,2],[16,4,16,2],[17,4,16,2],[17,5,16,2,"_state$index"],[17,17,16,2],[17,20,17,2,"state"],[17,25,17,7],[17,26,17,8,"index"],[17,31,17,13],[17,43,17,13,"_state$index"],[17,55,17,13],[17,58,17,18],[17,65,17,25,"state"],[17,70,17,30],[17,71,17,31,"type"],[17,75,17,35],[17,80,17,40],[17,88,17,48],[17,92,17,52,"state"],[17,97,17,57],[17,98,17,58,"type"],[17,102,17,62],[17,107,17,67],[17,114,17,74],[17,117,17,77],[17,118,17,78],[17,121,17,81,"state"],[17,126,17,86],[17,127,17,87,"routes"],[17,133,17,93],[17,134,17,94,"length"],[17,140,17,100],[17,143,17,103],[17,144,17,104],[17,145,17,106],[17,146,17,107,"name"],[17,150,17,111],[18,4,18,2],[19,4,19,2],[19,12,19,9,"params"],[19,18,19,15],[19,38,19,9,"params"],[19,44,19,15],[19,45,19,17,"screen"],[19,51,19,23],[19,57,19,28],[19,65,19,36],[19,68,19,39,"params"],[19,74,19,45],[19,75,19,46,"screen"],[19,81,19,52],[19,84,19,55,"undefined"],[19,93,19,64],[20,4,20,2],[20,11,20,9,"routeName"],[20,20,20,18],[21,2,21,0],[22,0,21,1],[22,3]],"functionMap":{"names":["<global>","getFocusedRouteNameFromRoute"],"mappings":"AAA;ACO;CDa"}},"type":"js/module"}]}