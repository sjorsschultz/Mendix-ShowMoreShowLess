{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":521,"column":44,"index":18033}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}},{"name":"@babel/runtime/helpers/defineProperty","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":521,"column":44,"index":18033}}],"key":"X490zePjq+0IljAc8X0qcBg0iTo="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":521,"column":44,"index":18033}}],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE="}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":49,"index":174},"end":{"line":7,"column":80,"index":205}}],"key":"14QBo/6I2jfYu7Ct29OWBvp5ENM="}},{"name":"query-string","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":42,"index":250},"end":{"line":8,"column":65,"index":273}}],"key":"CQ4f6+ZdkmuRCkqw6zIINc/cka0="}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":26,"index":522},"end":{"line":13,"column":60,"index":556}}],"key":"XXyPbgw7BQ4s5X/Hs9Zl3De2oag="}},{"name":"./isArrayEqual.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":20,"index":466},"end":{"line":12,"column":48,"index":494}}],"key":"J42REN97/MZDKzfzDiREOCKQEZg="}},{"name":"./arrayStartsWith.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":23,"index":299},"end":{"line":9,"column":54,"index":330}},{"start":{"line":9,"column":23,"index":299},"end":{"line":9,"column":54,"index":330}},{"start":{"line":9,"column":23,"index":299},"end":{"line":9,"column":54,"index":330}}],"key":"S2bIb7cMQ7Oz4fM/uZJVzMgsFa4="}},{"name":"./getPatternParts.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":23,"index":413},"end":{"line":11,"column":54,"index":444}}],"key":"x373vX1U7UCQUMl5g8AN3pEqZu0="}},{"name":"./findFocusedRoute.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":24,"index":356},"end":{"line":10,"column":56,"index":388}}],"key":"Qp+0bCmUCZMx8iRtqmi1ggFg6FA="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _defineProperty = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\");\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = getStateFromPath;\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"escape-string-regexp\"));\n  var queryString = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], \"query-string\"));\n  function _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) return null;\n    var r = new WeakMap(),\n      t = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {\n      return e ? t : r;\n    })(e);\n  }\n  function _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) return e;\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n      default: e\n    };\n    var t = _getRequireWildcardCache(r);\n    if (t && t.has(e)) return t.get(e);\n    var n = {\n        __proto__: null\n      },\n      a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n    }\n    return n.default = e, t && t.set(e, n), n;\n  }\n  function _interopRequireDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _options$path;\n    var _getConfigResources = getConfigResources(options),\n      initialRoutes = _getConfigResources.initialRoutes,\n      configs = _getConfigResources.configs;\n    var screens = options == null ? void 0 : options.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    var prefix = options == null || (_options$path = options.path) == null ? void 0 : _options$path.replace(/^\\//, ''); // Remove extra leading slash\n\n    if (prefix) {\n      // Make sure there is a trailing slash\n      var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n        var name = decodeURIComponent(segment);\n        return {\n          name: name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(function (config) {\n        return config.segments.join('/') === '';\n      });\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(function (name) {\n          return {\n            name: name\n          };\n        }), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  var cachedConfigResources = new WeakMap();\n  function getConfigResources(options) {\n    if (!options) return prepareConfigResources();\n    var cached = cachedConfigResources.get(options);\n    if (cached) return cached;\n    var resources = prepareConfigResources(options);\n    cachedConfigResources.set(options, resources);\n    return resources;\n  }\n  function prepareConfigResources(options) {\n    if (options) {\n      (0, _$$_REQUIRE(_dependencyMap[5], \"./validatePathConfig.js\").validatePathConfig)(options);\n    }\n    var initialRoutes = getInitialRoutes(options);\n    var configs = getSortedNormalizedConfigs(initialRoutes, options == null ? void 0 : options.screens);\n    checkForDuplicatedConfigs(configs);\n    var configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes: initialRoutes,\n      configs: configs,\n      configWithRegexes: configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    var initialRoutes = [];\n    if (options != null && options.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getSortedNormalizedConfigs(initialRoutes) {\n    var _ref;\n    var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Create a normalized configs array which will be easier to use\n    return (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n      return _createNormalizedConfigs(key, screens, initialRoutes, [], [], []);\n    }))).sort(function (a, b) {\n      // Sort config from most specific to least specific:\n      // - more segments\n      // - static segments\n      // - params with regex\n      // - regular params\n      // - wildcard\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if ((0, _$$_REQUIRE(_dependencyMap[6], \"./isArrayEqual.js\").isArrayEqual)(a.segments, b.segments)) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if ((0, _$$_REQUIRE(_dependencyMap[7], \"./arrayStartsWith.js\").arrayStartsWith)(a.segments, b.segments)) {\n        return -1;\n      }\n      if ((0, _$$_REQUIRE(_dependencyMap[7], \"./arrayStartsWith.js\").arrayStartsWith)(b.segments, a.segments)) {\n        return 1;\n      }\n      for (var i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {\n        // if b is longer, b gets higher priority\n        if (a.segments[i] == null) {\n          return 1;\n        }\n\n        // if a is longer, a gets higher priority\n        if (b.segments[i] == null) {\n          return -1;\n        }\n        var aWildCard = a.segments[i] === '*';\n        var bWildCard = b.segments[i] === '*';\n        var aParam = a.segments[i].startsWith(':');\n        var bParam = b.segments[i].startsWith(':');\n        var aRegex = aParam && a.segments[i].includes('(');\n        var bRegex = bParam && b.segments[i].includes('(');\n\n        // if both are wildcard or regex, we compare next component\n        if (aWildCard && bWildCard || aRegex && bRegex) {\n          continue;\n        }\n\n        // if only a is wildcard, b gets higher priority\n        if (aWildCard && !bWildCard) {\n          return 1;\n        }\n\n        // if only b is wildcard, a gets higher priority\n        if (bWildCard && !aWildCard) {\n          return -1;\n        }\n\n        // If only a has a param, b gets higher priority\n        if (aParam && !bParam) {\n          return 1;\n        }\n\n        // If only b has a param, a gets higher priority\n        if (bParam && !aParam) {\n          return -1;\n        }\n\n        // if only a has regex, a gets higher priority\n        if (aRegex && !bRegex) {\n          return -1;\n        }\n\n        // if only b has regex, b gets higher priority\n        if (bRegex && !aRegex) {\n          return 1;\n        }\n      }\n      return a.segments.length - b.segments.length;\n    });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce(function (acc, config) {\n      var pattern = config.segments.join('/');\n      if (acc[pattern]) {\n        var a = acc[pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every(function (it, i) {\n          return a[i] === it;\n        }) : a.every(function (it, i) {\n          return b[i] === it;\n        });\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, _defineProperty({}, pattern, config));\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(function (c) {\n      return Object.assign({}, c, {\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      });\n    });\n  }\n  var matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function _loop(config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          routes = config.routeNames.map(function (routeName) {\n            var routeConfig = configs.find(function (c) {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === routeName && (0, _$$_REQUIRE(_dependencyMap[7], \"./arrayStartsWith.js\").arrayStartsWith)(config.segments, c.segments);\n            });\n            var params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(function (_ref2) {\n              var _ref3 = _slicedToArray(_ref2, 2),\n                key = _ref3[0],\n                value = _ref3[1];\n              var index = Number(key.replace('param_', ''));\n              var param = routeConfig.params.find(function (it) {\n                return it.index === index;\n              });\n              if ((param == null ? void 0 : param.screen) === routeName && param != null && param.name) {\n                return [param.name, value];\n              }\n              return null;\n            }).filter(function (it) {\n              return it != null;\n            }).map(function (_ref4) {\n              var _routeConfig$parse;\n              var _ref5 = _slicedToArray(_ref4, 2),\n                key = _ref5[0],\n                value = _ref5[1];\n              if (value == null) {\n                return [key, undefined];\n              }\n              var decoded = decodeURIComponent(value);\n              var parsed = (_routeConfig$parse = routeConfig.parse) != null && _routeConfig$parse[key] ? routeConfig.parse[key](decoded) : decoded;\n              return [key, parsed];\n            })) : undefined;\n            if (params && Object.keys(params).length) {\n              return {\n                name: routeName,\n                params: params\n              };\n            }\n            return {\n              name: routeName\n            };\n          });\n          remainingPath = remainingPath.replace(match[0], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes: routes,\n      remainingPath: remainingPath\n    };\n  };\n  var _createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig, initials, paths, parentScreens, routeNames) {\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      paths.push({\n        screen: screen,\n        path: config\n      });\n      configs.push(createConfigItem(screen, _toConsumableArray(routeNames), _toConsumableArray(paths)));\n    } else if (typeof config === 'object') {\n      var _config$alias;\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path == null) {\n          throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. \\`path: ''\\`.`);\n        }\n\n        // We should add alias configs after the main config\n        // So unless they are more specific, main config will be matched first\n        var aliasConfigs = [];\n        if (config.alias) {\n          for (var alias of config.alias) {\n            if (typeof alias === 'string') {\n              aliasConfigs.push(createConfigItem(screen, _toConsumableArray(routeNames), [].concat(_toConsumableArray(paths), [{\n                screen: screen,\n                path: alias\n              }]), config.parse));\n            } else if (typeof alias === 'object') {\n              aliasConfigs.push(createConfigItem(screen, _toConsumableArray(routeNames), alias.exact ? [{\n                screen: screen,\n                path: alias.path\n              }] : [].concat(_toConsumableArray(paths), [{\n                screen: screen,\n                path: alias.path\n              }]), alias.parse));\n            }\n          }\n        }\n        if (config.exact) {\n          // If it's an exact path, we don't need to keep track of the parent screens\n          // So we can clear it\n          paths.length = 0;\n        }\n        paths.push({\n          screen: screen,\n          path: config.path\n        });\n        configs.push(createConfigItem(screen, _toConsumableArray(routeNames), _toConsumableArray(paths), config.parse));\n        configs.push.apply(configs, aliasConfigs);\n      }\n      if (typeof config !== 'string' && typeof config.path !== 'string' && (_config$alias = config.alias) != null && _config$alias.length) {\n        throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'.`);\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens: parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(function (nestedConfig) {\n          var result = _createNormalizedConfigs(nestedConfig, config.screens, initials, _toConsumableArray(paths), _toConsumableArray(parentScreens), routeNames);\n          configs.push.apply(configs, _toConsumableArray(result));\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = function createConfigItem(screen, routeNames, paths, parse) {\n    var parts = [];\n\n    // Parse the path string into parts for easier matching\n    var _loop2 = function _loop2(_screen) {\n      parts.push.apply(parts, _toConsumableArray((0, _$$_REQUIRE(_dependencyMap[8], \"./getPatternParts.js\").getPatternParts)(path).map(function (part) {\n        return Object.assign({}, part, {\n          screen: _screen\n        });\n      })));\n    };\n    for (var _ref6 of paths) {\n      var _screen = _ref6.screen;\n      var path = _ref6.path;\n      _loop2(_screen);\n    }\n    var regex = parts.length ? new RegExp(`^(${parts.map(function (it, i) {\n      if (it.param) {\n        var reg = it.regex || '[^/]+';\n        return `(((?<param_${i}>${reg})\\\\/)${it.optional ? '?' : ''})`;\n      }\n      return `${it.segment === '*' ? '.*' : (0, _escapeStringRegexp.default)(it.segment)}\\\\/`;\n    }).join('')})$`) : undefined;\n    var segments = parts.map(function (it) {\n      return it.segment;\n    });\n    var params = parts.map(function (it, i) {\n      return it.param ? {\n        index: i,\n        screen: it.screen,\n        name: it.param\n      } : null;\n    }).filter(function (it) {\n      return it != null;\n    });\n    return {\n      screen: screen,\n      regex: regex,\n      segments: segments,\n      params: params,\n      routeNames: routeNames,\n      parse: parse\n    };\n  };\n  var findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      } else {\n        return {\n          routes: [Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _$$_REQUIRE(_dependencyMap[9], \"./findFocusedRoute.js\").findFocusedRoute)(state);\n    route.path = path.replace(/\\/$/, '');\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = Object.assign({}, route.params, params);\n    }\n    return state;\n  };\n  var parseQueryParams = function parseQueryParams(path, parseConfig) {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(function (name) {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":579,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"_$$_REQUIRE"],[4,34,1,13],[4,35,1,13,"_dependencyMap"],[4,49,1,13],[5,2,1,13],[5,6,1,13,"_defineProperty"],[5,21,1,13],[5,24,1,13,"_$$_REQUIRE"],[5,35,1,13],[5,36,1,13,"_dependencyMap"],[5,50,1,13],[6,2,1,13],[6,6,1,13,"_toConsumableArray"],[6,24,1,13],[6,27,1,13,"_$$_REQUIRE"],[6,38,1,13],[6,39,1,13,"_dependencyMap"],[6,53,1,13],[7,2,3,0,"Object"],[7,8,3,6],[7,9,3,7,"defineProperty"],[7,23,3,21],[7,24,3,22,"exports"],[7,31,3,29],[7,33,3,31],[7,45,3,43],[7,47,3,45],[8,4,4,2,"value"],[8,9,4,7],[8,11,4,9],[9,2,5,0],[9,3,5,1],[9,4,5,2],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"getStateFromPath"],[10,26,6,24],[10,29,6,27,"getStateFromPath"],[10,45,6,43],[11,2,7,0],[11,6,7,4,"_escapeStringRegexp"],[11,25,7,23],[11,28,7,26,"_interopRequireDefault"],[11,50,7,48],[11,51,7,49,"require"],[11,62,7,56],[11,63,7,56,"_dependencyMap"],[11,77,7,56],[11,104,7,79],[11,105,7,80],[11,106,7,81],[12,2,8,0],[12,6,8,4,"queryString"],[12,17,8,15],[12,20,8,18,"_interopRequireWildcard"],[12,43,8,41],[12,44,8,42,"require"],[12,55,8,49],[12,56,8,49,"_dependencyMap"],[12,70,8,49],[12,89,8,64],[12,90,8,65],[12,91,8,66],[13,2,14,0],[13,11,14,9,"_getRequireWildcardCache"],[13,35,14,33,"_getRequireWildcardCache"],[13,36,14,34,"e"],[13,37,14,35],[13,39,14,37],[14,4,14,39],[14,8,14,43],[14,18,14,53],[14,22,14,57],[14,29,14,64,"WeakMap"],[14,36,14,71],[14,38,14,73],[14,45,14,80],[14,49,14,84],[15,4,14,86],[15,8,14,90,"r"],[15,9,14,91],[15,12,14,94],[15,16,14,98,"WeakMap"],[15,23,14,105],[15,24,14,106],[15,25,14,107],[16,6,14,109,"t"],[16,7,14,110],[16,10,14,113],[16,14,14,117,"WeakMap"],[16,21,14,124],[16,22,14,125],[16,23,14,126],[17,4,14,128],[17,11,14,135],[17,12,14,136,"_getRequireWildcardCache"],[17,36,14,160],[17,39,14,163],[17,48,14,136,"_getRequireWildcardCache"],[17,72,14,160,"_getRequireWildcardCache"],[17,73,14,173,"e"],[17,74,14,174],[17,76,14,176],[18,6,14,178],[18,13,14,185,"e"],[18,14,14,186],[18,17,14,189,"t"],[18,18,14,190],[18,21,14,193,"r"],[18,22,14,194],[19,4,14,196],[19,5,14,197],[19,7,14,199,"e"],[19,8,14,200],[19,9,14,201],[20,2,14,203],[21,2,15,0],[21,11,15,9,"_interopRequireWildcard"],[21,34,15,32,"_interopRequireWildcard"],[21,35,15,33,"e"],[21,36,15,34],[21,38,15,36,"r"],[21,39,15,37],[21,41,15,39],[22,4,15,41],[22,8,15,45],[22,9,15,46,"r"],[22,10,15,47],[22,14,15,51,"e"],[22,15,15,52],[22,19,15,56,"e"],[22,20,15,57],[22,21,15,58,"__esModule"],[22,31,15,68],[22,33,15,70],[22,40,15,77,"e"],[22,41,15,78],[23,4,15,80],[23,8,15,84],[23,12,15,88],[23,17,15,93,"e"],[23,18,15,94],[23,22,15,98],[23,30,15,106],[23,34,15,110],[23,41,15,117,"e"],[23,42,15,118],[23,46,15,122],[23,56,15,132],[23,60,15,136],[23,67,15,143,"e"],[23,68,15,144],[23,70,15,146],[23,77,15,153],[24,6,15,155,"default"],[24,13,15,162],[24,15,15,164,"e"],[25,4,15,166],[25,5,15,167],[26,4,15,169],[26,8,15,173,"t"],[26,9,15,174],[26,12,15,177,"_getRequireWildcardCache"],[26,36,15,201],[26,37,15,202,"r"],[26,38,15,203],[26,39,15,204],[27,4,15,206],[27,8,15,210,"t"],[27,9,15,211],[27,13,15,215,"t"],[27,14,15,216],[27,15,15,217,"has"],[27,18,15,220],[27,19,15,221,"e"],[27,20,15,222],[27,21,15,223],[27,23,15,225],[27,30,15,232,"t"],[27,31,15,233],[27,32,15,234,"get"],[27,35,15,237],[27,36,15,238,"e"],[27,37,15,239],[27,38,15,240],[28,4,15,242],[28,8,15,246,"n"],[28,9,15,247],[28,12,15,250],[29,8,15,252,"__proto__"],[29,17,15,261],[29,19,15,263],[30,6,15,268],[30,7,15,269],[31,6,15,271,"a"],[31,7,15,272],[31,10,15,275,"Object"],[31,16,15,281],[31,17,15,282,"defineProperty"],[31,31,15,296],[31,35,15,300,"Object"],[31,41,15,306],[31,42,15,307,"getOwnPropertyDescriptor"],[31,66,15,331],[32,4,15,333],[32,9,15,338],[32,13,15,342,"u"],[32,14,15,343],[32,18,15,347,"e"],[32,19,15,348],[32,21,15,350],[32,25,15,354],[32,34,15,363],[32,39,15,368,"u"],[32,40,15,369],[32,44,15,373],[32,45,15,374],[32,46,15,375],[32,47,15,376,"hasOwnProperty"],[32,61,15,390],[32,62,15,391,"call"],[32,66,15,395],[32,67,15,396,"e"],[32,68,15,397],[32,70,15,399,"u"],[32,71,15,400],[32,72,15,401],[32,74,15,403],[33,6,15,405],[33,10,15,409,"i"],[33,11,15,410],[33,14,15,413,"a"],[33,15,15,414],[33,18,15,417,"Object"],[33,24,15,423],[33,25,15,424,"getOwnPropertyDescriptor"],[33,49,15,448],[33,50,15,449,"e"],[33,51,15,450],[33,53,15,452,"u"],[33,54,15,453],[33,55,15,454],[33,58,15,457],[33,62,15,461],[34,6,15,463,"i"],[34,7,15,464],[34,12,15,469,"i"],[34,13,15,470],[34,14,15,471,"get"],[34,17,15,474],[34,21,15,478,"i"],[34,22,15,479],[34,23,15,480,"set"],[34,26,15,483],[34,27,15,484],[34,30,15,487,"Object"],[34,36,15,493],[34,37,15,494,"defineProperty"],[34,51,15,508],[34,52,15,509,"n"],[34,53,15,510],[34,55,15,512,"u"],[34,56,15,513],[34,58,15,515,"i"],[34,59,15,516],[34,60,15,517],[34,63,15,520,"n"],[34,64,15,521],[34,65,15,522,"u"],[34,66,15,523],[34,67,15,524],[34,70,15,527,"e"],[34,71,15,528],[34,72,15,529,"u"],[34,73,15,530],[34,74,15,531],[35,4,15,533],[36,4,15,535],[36,11,15,542,"n"],[36,12,15,543],[36,13,15,544,"default"],[36,20,15,551],[36,23,15,554,"e"],[36,24,15,555],[36,26,15,557,"t"],[36,27,15,558],[36,31,15,562,"t"],[36,32,15,563],[36,33,15,564,"set"],[36,36,15,567],[36,37,15,568,"e"],[36,38,15,569],[36,40,15,571,"n"],[36,41,15,572],[36,42,15,573],[36,44,15,575,"n"],[36,45,15,576],[37,2,15,578],[38,2,16,0],[38,11,16,9,"_interopRequireDefault"],[38,33,16,31,"_interopRequireDefault"],[38,34,16,32,"e"],[38,35,16,33],[38,37,16,35],[39,4,16,37],[39,11,16,44,"e"],[39,12,16,45],[39,16,16,49,"e"],[39,17,16,50],[39,18,16,51,"__esModule"],[39,28,16,61],[39,31,16,64,"e"],[39,32,16,65],[39,35,16,68],[40,6,16,70,"default"],[40,13,16,77],[40,15,16,79,"e"],[41,4,16,81],[41,5,16,82],[42,2,16,84],[43,2,17,0],[44,0,18,0],[45,0,19,0],[46,0,20,0],[47,0,21,0],[48,0,22,0],[49,0,23,0],[50,0,24,0],[51,0,25,0],[52,0,26,0],[53,0,27,0],[54,0,28,0],[55,0,29,0],[56,0,30,0],[57,0,31,0],[58,0,32,0],[59,0,33,0],[60,0,34,0],[61,0,35,0],[62,0,36,0],[63,0,37,0],[64,2,38,0],[64,11,38,9,"getStateFromPath"],[64,27,38,25,"getStateFromPath"],[64,28,38,26,"path"],[64,32,38,30],[64,34,38,32,"options"],[64,41,38,39],[64,43,38,41],[65,4,38,41],[65,8,38,41,"_options$path"],[65,21,38,41],[66,4,39,2],[66,8,39,2,"_getConfigResources"],[66,27,39,2],[66,30,42,6,"getConfigResources"],[66,48,42,24],[66,49,42,25,"options"],[66,56,42,32],[66,57,42,33],[67,6,40,4,"initialRoutes"],[67,19,40,17],[67,22,40,17,"_getConfigResources"],[67,41,40,17],[67,42,40,4,"initialRoutes"],[67,55,40,17],[68,6,41,4,"configs"],[68,13,41,11],[68,16,41,11,"_getConfigResources"],[68,35,41,11],[68,36,41,4,"configs"],[68,43,41,11],[69,4,43,2],[69,8,43,8,"screens"],[69,15,43,15],[69,18,43,18,"options"],[69,25,43,25],[69,45,43,18,"options"],[69,52,43,25],[69,53,43,27,"screens"],[69,60,43,34],[70,4,44,2],[70,8,44,6,"remaining"],[70,17,44,15],[70,20,44,18,"path"],[70,24,44,22],[70,25,44,23,"replace"],[70,32,44,30],[70,33,44,31],[70,39,44,37],[70,41,44,39],[70,44,44,42],[70,45,44,43],[70,46,44,44],[71,4,44,44],[71,5,45,3,"replace"],[71,12,45,10],[71,13,45,11],[71,18,45,16],[71,20,45,18],[71,22,45,20],[71,23,45,21],[71,24,45,22],[72,4,45,22],[72,5,46,3,"replace"],[72,12,46,10],[72,13,46,11],[72,20,46,18],[72,22,46,20],[72,24,46,22],[72,25,46,23],[72,26,46,24],[72,27,46,25],[74,4,48,2],[75,4,49,2,"remaining"],[75,13,49,11],[75,16,49,14,"remaining"],[75,25,49,23],[75,26,49,24,"endsWith"],[75,34,49,32],[75,35,49,33],[75,38,49,36],[75,39,49,37],[75,42,49,40,"remaining"],[75,51,49,49],[75,54,49,52],[75,57,49,55,"remaining"],[75,66,49,64],[75,69,49,67],[76,4,50,2],[76,8,50,8,"prefix"],[76,14,50,14],[76,17,50,17,"options"],[76,24,50,24],[76,37,50,24,"_options$path"],[76,50,50,24],[76,53,50,17,"options"],[76,60,50,24],[76,61,50,26,"path"],[76,65,50,30],[76,86,50,17,"_options$path"],[76,99,50,17],[76,100,50,32,"replace"],[76,107,50,39],[76,108,50,40],[76,113,50,45],[76,115,50,47],[76,117,50,49],[76,118,50,50],[76,119,50,51],[76,120,50,52],[78,4,52,2],[78,8,52,6,"prefix"],[78,14,52,12],[78,16,52,14],[79,6,53,4],[80,6,54,4],[80,10,54,10,"normalizedPrefix"],[80,26,54,26],[80,29,54,29,"prefix"],[80,35,54,35],[80,36,54,36,"endsWith"],[80,44,54,44],[80,45,54,45],[80,48,54,48],[80,49,54,49],[80,52,54,52,"prefix"],[80,58,54,58],[80,61,54,61],[80,64,54,64,"prefix"],[80,70,54,70],[80,73,54,73],[82,6,56,4],[83,6,57,4],[83,10,57,8],[83,11,57,9,"remaining"],[83,20,57,18],[83,21,57,19,"startsWith"],[83,31,57,29],[83,32,57,30,"normalizedPrefix"],[83,48,57,46],[83,49,57,47],[83,51,57,49],[84,8,58,6],[84,15,58,13,"undefined"],[84,24,58,22],[85,6,59,4],[87,6,61,4],[88,6,62,4,"remaining"],[88,15,62,13],[88,18,62,16,"remaining"],[88,27,62,25],[88,28,62,26,"replace"],[88,35,62,33],[88,36,62,34,"normalizedPrefix"],[88,52,62,50],[88,54,62,52],[88,56,62,54],[88,57,62,55],[89,4,63,2],[90,4,64,2],[90,8,64,6,"screens"],[90,15,64,13],[90,20,64,18,"undefined"],[90,29,64,27],[90,31,64,29],[91,6,65,4],[92,6,66,4],[92,10,66,10,"routes"],[92,17,66,16],[92,20,66,19,"remaining"],[92,29,66,28],[92,30,66,29,"split"],[92,35,66,34],[92,36,66,35],[92,39,66,38],[92,40,66,39],[92,41,66,40,"filter"],[92,47,66,46],[92,48,66,47,"Boolean"],[92,55,66,54],[92,56,66,55],[92,57,66,56,"map"],[92,60,66,59],[92,61,66,60],[92,71,66,60,"segment"],[92,78,66,67],[92,80,66,71],[93,8,67,6],[93,12,67,12,"name"],[93,16,67,16],[93,19,67,19,"decodeURIComponent"],[93,37,67,37],[93,38,67,38,"segment"],[93,45,67,45],[93,46,67,46],[94,8,68,6],[94,15,68,13],[95,10,69,8,"name"],[95,14,69,12],[95,16,69,8,"name"],[96,8,70,6],[96,9,70,7],[97,6,71,4],[97,7,71,5],[97,8,71,6],[98,6,72,4],[98,10,72,8,"routes"],[98,17,72,14],[98,18,72,15,"length"],[98,24,72,21],[98,26,72,23],[99,8,73,6],[99,15,73,13,"createNestedStateObject"],[99,38,73,36],[99,39,73,37,"path"],[99,43,73,41],[99,45,73,43,"routes"],[99,52,73,49],[99,54,73,51,"initialRoutes"],[99,67,73,64],[99,68,73,65],[100,6,74,4],[101,6,75,4],[101,13,75,11,"undefined"],[101,22,75,20],[102,4,76,2],[103,4,77,2],[103,8,77,6,"remaining"],[103,17,77,15],[103,22,77,20],[103,25,77,23],[103,27,77,25],[104,6,78,4],[105,6,79,4],[106,6,80,4],[106,10,80,10,"match"],[106,15,80,15],[106,18,80,18,"configs"],[106,25,80,25],[106,26,80,26,"find"],[106,30,80,30],[106,31,80,31],[106,41,80,31,"config"],[106,47,80,37],[107,8,80,37],[107,15,80,41,"config"],[107,21,80,47],[107,22,80,48,"segments"],[107,30,80,56],[107,31,80,57,"join"],[107,35,80,61],[107,36,80,62],[107,39,80,65],[107,40,80,66],[107,45,80,71],[107,47,80,73],[108,6,80,73],[108,8,80,74],[109,6,81,4],[109,10,81,8,"match"],[109,15,81,13],[109,17,81,15],[110,8,82,6],[110,15,82,13,"createNestedStateObject"],[110,38,82,36],[110,39,82,37,"path"],[110,43,82,41],[110,45,82,43,"match"],[110,50,82,48],[110,51,82,49,"routeNames"],[110,61,82,59],[110,62,82,60,"map"],[110,65,82,63],[110,66,82,64],[110,76,82,64,"name"],[110,80,82,68],[111,10,82,68],[111,17,82,73],[112,12,83,8,"name"],[112,16,83,12],[112,18,83,8,"name"],[113,10,84,6],[113,11,84,7],[114,8,84,7],[114,9,84,8],[114,10,84,9],[114,12,84,11,"initialRoutes"],[114,25,84,24],[114,27,84,26,"configs"],[114,34,84,33],[114,35,84,34],[115,6,85,4],[116,6,86,4],[116,13,86,11,"undefined"],[116,22,86,20],[117,4,87,2],[118,4,88,2],[118,8,88,6,"result"],[118,14,88,12],[119,4,89,2],[119,8,89,6,"current"],[119,15,89,13],[121,4,91,2],[122,4,92,2],[123,4,93,2],[123,8,93,2,"_matchAgainstConfigs"],[123,28,93,2],[123,31,96,6,"matchAgainstConfigs"],[123,50,96,25],[123,51,96,26,"remaining"],[123,60,96,35],[123,62,96,37,"configs"],[123,69,96,44],[123,70,96,45],[124,6,94,4,"routes"],[124,12,94,10],[124,15,94,10,"_matchAgainstConfigs"],[124,35,94,10],[124,36,94,4,"routes"],[124,42,94,10],[125,6,95,4,"remainingPath"],[125,19,95,17],[125,22,95,17,"_matchAgainstConfigs"],[125,42,95,17],[125,43,95,4,"remainingPath"],[125,56,95,17],[126,4,97,2],[126,8,97,6,"routes"],[126,14,97,12],[126,19,97,17,"undefined"],[126,28,97,26],[126,30,97,28],[127,6,98,4],[128,6,99,4,"current"],[128,13,99,11],[128,16,99,14,"createNestedStateObject"],[128,39,99,37],[128,40,99,38,"path"],[128,44,99,42],[128,46,99,44,"routes"],[128,52,99,50],[128,54,99,52,"initialRoutes"],[128,67,99,65],[128,69,99,67,"configs"],[128,76,99,74],[128,77,99,75],[129,6,100,4,"remaining"],[129,15,100,13],[129,18,100,16,"remainingPath"],[129,31,100,29],[130,6,101,4,"result"],[130,12,101,10],[130,15,101,13,"current"],[130,22,101,20],[131,4,102,2],[132,4,103,2],[132,8,103,6,"current"],[132,15,103,13],[132,19,103,17],[132,23,103,21],[132,27,103,25,"result"],[132,33,103,31],[132,37,103,35],[132,41,103,39],[132,43,103,41],[133,6,104,4],[133,13,104,11,"undefined"],[133,22,104,20],[134,4,105,2],[135,4,106,2],[135,11,106,9,"result"],[135,17,106,15],[136,2,107,0],[138,2,109,0],[139,0,110,0],[140,0,111,0],[141,2,112,0],[141,6,112,6,"cachedConfigResources"],[141,27,112,27],[141,30,112,30],[141,34,112,34,"WeakMap"],[141,41,112,41],[141,42,112,42],[141,43,112,43],[142,2,113,0],[142,11,113,9,"getConfigResources"],[142,29,113,27,"getConfigResources"],[142,30,113,28,"options"],[142,37,113,35],[142,39,113,37],[143,4,114,2],[143,8,114,6],[143,9,114,7,"options"],[143,16,114,14],[143,18,114,16],[143,25,114,23,"prepareConfigResources"],[143,47,114,45],[143,48,114,46],[143,49,114,47],[144,4,115,2],[144,8,115,8,"cached"],[144,14,115,14],[144,17,115,17,"cachedConfigResources"],[144,38,115,38],[144,39,115,39,"get"],[144,42,115,42],[144,43,115,43,"options"],[144,50,115,50],[144,51,115,51],[145,4,116,2],[145,8,116,6,"cached"],[145,14,116,12],[145,16,116,14],[145,23,116,21,"cached"],[145,29,116,27],[146,4,117,2],[146,8,117,8,"resources"],[146,17,117,17],[146,20,117,20,"prepareConfigResources"],[146,42,117,42],[146,43,117,43,"options"],[146,50,117,50],[146,51,117,51],[147,4,118,2,"cachedConfigResources"],[147,25,118,23],[147,26,118,24,"set"],[147,29,118,27],[147,30,118,28,"options"],[147,37,118,35],[147,39,118,37,"resources"],[147,48,118,46],[147,49,118,47],[148,4,119,2],[148,11,119,9,"resources"],[148,20,119,18],[149,2,120,0],[150,2,121,0],[150,11,121,9,"prepareConfigResources"],[150,33,121,31,"prepareConfigResources"],[150,34,121,32,"options"],[150,41,121,39],[150,43,121,41],[151,4,122,2],[151,8,122,6,"options"],[151,15,122,13],[151,17,122,15],[152,6,123,4],[152,7,123,5],[152,8,123,6],[152,10,123,8,"_$$_REQUIRE"],[152,21,123,8],[152,22,123,8,"_dependencyMap"],[152,36,123,8],[152,68,123,28,"validatePathConfig"],[152,86,123,46],[152,88,123,48,"options"],[152,95,123,55],[152,96,123,56],[153,4,124,2],[154,4,125,2],[154,8,125,8,"initialRoutes"],[154,21,125,21],[154,24,125,24,"getInitialRoutes"],[154,40,125,40],[154,41,125,41,"options"],[154,48,125,48],[154,49,125,49],[155,4,126,2],[155,8,126,8,"configs"],[155,15,126,15],[155,18,126,18,"getSortedNormalizedConfigs"],[155,44,126,44],[155,45,126,45,"initialRoutes"],[155,58,126,58],[155,60,126,60,"options"],[155,67,126,67],[155,87,126,60,"options"],[155,94,126,67],[155,95,126,69,"screens"],[155,102,126,76],[155,103,126,77],[156,4,127,2,"checkForDuplicatedConfigs"],[156,29,127,27],[156,30,127,28,"configs"],[156,37,127,35],[156,38,127,36],[157,4,128,2],[157,8,128,8,"configWithRegexes"],[157,25,128,25],[157,28,128,28,"getConfigsWithRegexes"],[157,49,128,49],[157,50,128,50,"configs"],[157,57,128,57],[157,58,128,58],[158,4,129,2],[158,11,129,9],[159,6,130,4,"initialRoutes"],[159,19,130,17],[159,21,130,4,"initialRoutes"],[159,34,130,17],[160,6,131,4,"configs"],[160,13,131,11],[160,15,131,4,"configs"],[160,22,131,11],[161,6,132,4,"configWithRegexes"],[161,23,132,21],[161,25,132,4,"configWithRegexes"],[162,4,133,2],[162,5,133,3],[163,2,134,0],[164,2,135,0],[164,11,135,9,"getInitialRoutes"],[164,27,135,25,"getInitialRoutes"],[164,28,135,26,"options"],[164,35,135,33],[164,37,135,35],[165,4,136,2],[165,8,136,8,"initialRoutes"],[165,21,136,21],[165,24,136,24],[165,26,136,26],[166,4,137,2],[166,8,137,6,"options"],[166,15,137,13],[166,27,137,6,"options"],[166,34,137,13],[166,35,137,15,"initialRouteName"],[166,51,137,31],[166,53,137,33],[167,6,138,4,"initialRoutes"],[167,19,138,17],[167,20,138,18,"push"],[167,24,138,22],[167,25,138,23],[168,8,139,6,"initialRouteName"],[168,24,139,22],[168,26,139,24,"options"],[168,33,139,31],[168,34,139,32,"initialRouteName"],[168,50,139,48],[169,8,140,6,"parentScreens"],[169,21,140,19],[169,23,140,21],[170,6,141,4],[170,7,141,5],[170,8,141,6],[171,4,142,2],[172,4,143,2],[172,11,143,9,"initialRoutes"],[172,24,143,22],[173,2,144,0],[174,2,145,0],[174,11,145,9,"getSortedNormalizedConfigs"],[174,37,145,35,"getSortedNormalizedConfigs"],[174,38,145,36,"initialRoutes"],[174,51,145,49],[174,53,145,65],[175,4,145,65],[175,8,145,65,"_ref"],[175,12,145,65],[176,4,145,65],[176,8,145,51,"screens"],[176,15,145,58],[176,18,145,58,"arguments"],[176,27,145,58],[176,28,145,58,"length"],[176,34,145,58],[176,42,145,58,"arguments"],[176,51,145,58],[176,59,145,58,"undefined"],[176,68,145,58],[176,71,145,58,"arguments"],[176,80,145,58],[176,86,145,61],[176,87,145,62],[176,88,145,63],[177,4,146,2],[178,4,147,2],[178,11,147,9],[178,12,147,9,"_ref"],[178,16,147,9],[178,21,147,11],[178,23,147,12,"concat"],[178,29,147,18],[178,30,147,18,"apply"],[178,35,147,18],[178,36,147,18,"_ref"],[178,40,147,18],[178,42,147,18,"_toConsumableArray"],[178,60,147,18],[178,61,147,22,"Object"],[178,67,147,28],[178,68,147,29,"keys"],[178,72,147,33],[178,73,147,34,"screens"],[178,80,147,41],[178,81,147,42],[178,82,147,43,"map"],[178,85,147,46],[178,86,147,47],[178,96,147,47,"key"],[178,99,147,50],[179,6,147,50],[179,13,147,54,"createNormalizedConfigs"],[179,37,147,77],[179,38,147,78,"key"],[179,41,147,81],[179,43,147,83,"screens"],[179,50,147,90],[179,52,147,92,"initialRoutes"],[179,65,147,105],[179,67,147,107],[179,69,147,109],[179,71,147,111],[179,73,147,113],[179,75,147,115],[179,77,147,117],[179,78,147,118],[180,4,147,118],[180,6,147,119],[180,8,147,120],[180,9,147,121,"sort"],[180,13,147,125],[180,14,147,126],[180,24,147,127,"a"],[180,25,147,128],[180,27,147,130,"b"],[180,28,147,131],[180,30,147,136],[181,6,148,4],[182,6,149,4],[183,6,150,4],[184,6,151,4],[185,6,152,4],[186,6,153,4],[188,6,155,4],[189,6,156,4],[190,6,157,4],[190,10,157,8],[190,11,157,9],[190,12,157,10],[190,14,157,12,"_$$_REQUIRE"],[190,25,157,12],[190,26,157,12,"_dependencyMap"],[190,40,157,12],[190,66,157,26,"isArrayEqual"],[190,78,157,38],[190,80,157,40,"a"],[190,81,157,41],[190,82,157,42,"segments"],[190,90,157,50],[190,92,157,52,"b"],[190,93,157,53],[190,94,157,54,"segments"],[190,102,157,62],[190,103,157,63],[190,105,157,65],[191,8,158,6],[191,15,158,13,"b"],[191,16,158,14],[191,17,158,15,"routeNames"],[191,27,158,25],[191,28,158,26,"join"],[191,32,158,30],[191,33,158,31],[191,36,158,34],[191,37,158,35],[191,38,158,36,"localeCompare"],[191,51,158,49],[191,52,158,50,"a"],[191,53,158,51],[191,54,158,52,"routeNames"],[191,64,158,62],[191,65,158,63,"join"],[191,69,158,67],[191,70,158,68],[191,73,158,71],[191,74,158,72],[191,75,158,73],[192,6,159,4],[194,6,161,4],[195,6,162,4],[196,6,163,4],[196,10,163,8],[196,11,163,9],[196,12,163,10],[196,14,163,12,"_$$_REQUIRE"],[196,25,163,12],[196,26,163,12,"_dependencyMap"],[196,40,163,12],[196,69,163,29,"arrayStartsWith"],[196,84,163,44],[196,86,163,46,"a"],[196,87,163,47],[196,88,163,48,"segments"],[196,96,163,56],[196,98,163,58,"b"],[196,99,163,59],[196,100,163,60,"segments"],[196,108,163,68],[196,109,163,69],[196,111,163,71],[197,8,164,6],[197,15,164,13],[197,16,164,14],[197,17,164,15],[198,6,165,4],[199,6,166,4],[199,10,166,8],[199,11,166,9],[199,12,166,10],[199,14,166,12,"_$$_REQUIRE"],[199,25,166,12],[199,26,166,12,"_dependencyMap"],[199,40,166,12],[199,69,166,29,"arrayStartsWith"],[199,84,166,44],[199,86,166,46,"b"],[199,87,166,47],[199,88,166,48,"segments"],[199,96,166,56],[199,98,166,58,"a"],[199,99,166,59],[199,100,166,60,"segments"],[199,108,166,68],[199,109,166,69],[199,111,166,71],[200,8,167,6],[200,15,167,13],[200,16,167,14],[201,6,168,4],[202,6,169,4],[202,11,169,9],[202,15,169,13,"i"],[202,16,169,14],[202,19,169,17],[202,20,169,18],[202,22,169,20,"i"],[202,23,169,21],[202,26,169,24,"Math"],[202,30,169,28],[202,31,169,29,"max"],[202,34,169,32],[202,35,169,33,"a"],[202,36,169,34],[202,37,169,35,"segments"],[202,45,169,43],[202,46,169,44,"length"],[202,52,169,50],[202,54,169,52,"b"],[202,55,169,53],[202,56,169,54,"segments"],[202,64,169,62],[202,65,169,63,"length"],[202,71,169,69],[202,72,169,70],[202,74,169,72,"i"],[202,75,169,73],[202,77,169,75],[202,79,169,77],[203,8,170,6],[204,8,171,6],[204,12,171,10,"a"],[204,13,171,11],[204,14,171,12,"segments"],[204,22,171,20],[204,23,171,21,"i"],[204,24,171,22],[204,25,171,23],[204,29,171,27],[204,33,171,31],[204,35,171,33],[205,10,172,8],[205,17,172,15],[205,18,172,16],[206,8,173,6],[208,8,175,6],[209,8,176,6],[209,12,176,10,"b"],[209,13,176,11],[209,14,176,12,"segments"],[209,22,176,20],[209,23,176,21,"i"],[209,24,176,22],[209,25,176,23],[209,29,176,27],[209,33,176,31],[209,35,176,33],[210,10,177,8],[210,17,177,15],[210,18,177,16],[210,19,177,17],[211,8,178,6],[212,8,179,6],[212,12,179,12,"aWildCard"],[212,21,179,21],[212,24,179,24,"a"],[212,25,179,25],[212,26,179,26,"segments"],[212,34,179,34],[212,35,179,35,"i"],[212,36,179,36],[212,37,179,37],[212,42,179,42],[212,45,179,45],[213,8,180,6],[213,12,180,12,"bWildCard"],[213,21,180,21],[213,24,180,24,"b"],[213,25,180,25],[213,26,180,26,"segments"],[213,34,180,34],[213,35,180,35,"i"],[213,36,180,36],[213,37,180,37],[213,42,180,42],[213,45,180,45],[214,8,181,6],[214,12,181,12,"aParam"],[214,18,181,18],[214,21,181,21,"a"],[214,22,181,22],[214,23,181,23,"segments"],[214,31,181,31],[214,32,181,32,"i"],[214,33,181,33],[214,34,181,34],[214,35,181,35,"startsWith"],[214,45,181,45],[214,46,181,46],[214,49,181,49],[214,50,181,50],[215,8,182,6],[215,12,182,12,"bParam"],[215,18,182,18],[215,21,182,21,"b"],[215,22,182,22],[215,23,182,23,"segments"],[215,31,182,31],[215,32,182,32,"i"],[215,33,182,33],[215,34,182,34],[215,35,182,35,"startsWith"],[215,45,182,45],[215,46,182,46],[215,49,182,49],[215,50,182,50],[216,8,183,6],[216,12,183,12,"aRegex"],[216,18,183,18],[216,21,183,21,"aParam"],[216,27,183,27],[216,31,183,31,"a"],[216,32,183,32],[216,33,183,33,"segments"],[216,41,183,41],[216,42,183,42,"i"],[216,43,183,43],[216,44,183,44],[216,45,183,45,"includes"],[216,53,183,53],[216,54,183,54],[216,57,183,57],[216,58,183,58],[217,8,184,6],[217,12,184,12,"bRegex"],[217,18,184,18],[217,21,184,21,"bParam"],[217,27,184,27],[217,31,184,31,"b"],[217,32,184,32],[217,33,184,33,"segments"],[217,41,184,41],[217,42,184,42,"i"],[217,43,184,43],[217,44,184,44],[217,45,184,45,"includes"],[217,53,184,53],[217,54,184,54],[217,57,184,57],[217,58,184,58],[219,8,186,6],[220,8,187,6],[220,12,187,10,"aWildCard"],[220,21,187,19],[220,25,187,23,"bWildCard"],[220,34,187,32],[220,38,187,36,"aRegex"],[220,44,187,42],[220,48,187,46,"bRegex"],[220,54,187,52],[220,56,187,54],[221,10,188,8],[222,8,189,6],[224,8,191,6],[225,8,192,6],[225,12,192,10,"aWildCard"],[225,21,192,19],[225,25,192,23],[225,26,192,24,"bWildCard"],[225,35,192,33],[225,37,192,35],[226,10,193,8],[226,17,193,15],[226,18,193,16],[227,8,194,6],[229,8,196,6],[230,8,197,6],[230,12,197,10,"bWildCard"],[230,21,197,19],[230,25,197,23],[230,26,197,24,"aWildCard"],[230,35,197,33],[230,37,197,35],[231,10,198,8],[231,17,198,15],[231,18,198,16],[231,19,198,17],[232,8,199,6],[234,8,201,6],[235,8,202,6],[235,12,202,10,"aParam"],[235,18,202,16],[235,22,202,20],[235,23,202,21,"bParam"],[235,29,202,27],[235,31,202,29],[236,10,203,8],[236,17,203,15],[236,18,203,16],[237,8,204,6],[239,8,206,6],[240,8,207,6],[240,12,207,10,"bParam"],[240,18,207,16],[240,22,207,20],[240,23,207,21,"aParam"],[240,29,207,27],[240,31,207,29],[241,10,208,8],[241,17,208,15],[241,18,208,16],[241,19,208,17],[242,8,209,6],[244,8,211,6],[245,8,212,6],[245,12,212,10,"aRegex"],[245,18,212,16],[245,22,212,20],[245,23,212,21,"bRegex"],[245,29,212,27],[245,31,212,29],[246,10,213,8],[246,17,213,15],[246,18,213,16],[246,19,213,17],[247,8,214,6],[249,8,216,6],[250,8,217,6],[250,12,217,10,"bRegex"],[250,18,217,16],[250,22,217,20],[250,23,217,21,"aRegex"],[250,29,217,27],[250,31,217,29],[251,10,218,8],[251,17,218,15],[251,18,218,16],[252,8,219,6],[253,6,220,4],[254,6,221,4],[254,13,221,11,"a"],[254,14,221,12],[254,15,221,13,"segments"],[254,23,221,21],[254,24,221,22,"length"],[254,30,221,28],[254,33,221,31,"b"],[254,34,221,32],[254,35,221,33,"segments"],[254,43,221,41],[254,44,221,42,"length"],[254,50,221,48],[255,4,222,2],[255,5,222,3],[255,6,222,4],[256,2,223,0],[257,2,224,0],[257,11,224,9,"checkForDuplicatedConfigs"],[257,36,224,34,"checkForDuplicatedConfigs"],[257,37,224,35,"configs"],[257,44,224,42],[257,46,224,44],[258,4,225,2],[259,4,226,2,"configs"],[259,11,226,9],[259,12,226,10,"reduce"],[259,18,226,16],[259,19,226,17],[259,29,226,18,"acc"],[259,32,226,21],[259,34,226,23,"config"],[259,40,226,29],[259,42,226,34],[260,6,227,4],[260,10,227,10,"pattern"],[260,17,227,17],[260,20,227,20,"config"],[260,26,227,26],[260,27,227,27,"segments"],[260,35,227,35],[260,36,227,36,"join"],[260,40,227,40],[260,41,227,41],[260,44,227,44],[260,45,227,45],[261,6,228,4],[261,10,228,8,"acc"],[261,13,228,11],[261,14,228,12,"pattern"],[261,21,228,19],[261,22,228,20],[261,24,228,22],[262,8,229,6],[262,12,229,12,"a"],[262,13,229,13],[262,16,229,16,"acc"],[262,19,229,19],[262,20,229,20,"pattern"],[262,27,229,27],[262,28,229,28],[262,29,229,29,"routeNames"],[262,39,229,39],[263,8,230,6],[263,12,230,12,"b"],[263,13,230,13],[263,16,230,16,"config"],[263,22,230,22],[263,23,230,23,"routeNames"],[263,33,230,33],[265,8,232,6],[266,8,233,6],[267,8,234,6],[267,12,234,12,"intersects"],[267,22,234,22],[267,25,234,25,"a"],[267,26,234,26],[267,27,234,27,"length"],[267,33,234,33],[267,36,234,36,"b"],[267,37,234,37],[267,38,234,38,"length"],[267,44,234,44],[267,47,234,47,"b"],[267,48,234,48],[267,49,234,49,"every"],[267,54,234,54],[267,55,234,55],[267,65,234,56,"it"],[267,67,234,58],[267,69,234,60,"i"],[267,70,234,61],[268,10,234,61],[268,17,234,66,"a"],[268,18,234,67],[268,19,234,68,"i"],[268,20,234,69],[268,21,234,70],[268,26,234,75,"it"],[268,28,234,77],[269,8,234,77],[269,10,234,78],[269,13,234,81,"a"],[269,14,234,82],[269,15,234,83,"every"],[269,20,234,88],[269,21,234,89],[269,31,234,90,"it"],[269,33,234,92],[269,35,234,94,"i"],[269,36,234,95],[270,10,234,95],[270,17,234,100,"b"],[270,18,234,101],[270,19,234,102,"i"],[270,20,234,103],[270,21,234,104],[270,26,234,109,"it"],[270,28,234,111],[271,8,234,111],[271,10,234,112],[272,8,235,6],[272,12,235,10],[272,13,235,11,"intersects"],[272,23,235,21],[272,25,235,23],[273,10,236,8],[273,16,236,14],[273,20,236,18,"Error"],[273,25,236,23],[273,26,236,24],[273,91,236,89,"pattern"],[273,98,236,96],[273,121,236,119,"a"],[273,122,236,120],[273,123,236,121,"join"],[273,127,236,125],[273,128,236,126],[273,133,236,131],[273,134,236,132],[273,144,236,142,"b"],[273,145,236,143],[273,146,236,144,"join"],[273,150,236,148],[273,151,236,149],[273,156,236,154],[273,157,236,155],[273,229,236,227],[273,230,236,228],[274,8,237,6],[275,6,238,4],[276,6,239,4],[276,13,239,11,"Object"],[276,19,239,17],[276,20,239,18,"assign"],[276,26,239,24],[276,27,239,25,"acc"],[276,30,239,28],[276,32,239,28,"_defineProperty"],[276,47,239,28],[276,52,240,7,"pattern"],[276,59,240,14],[276,61,240,17,"config"],[276,67,240,23],[276,68,241,5],[276,69,241,6],[277,4,242,2],[277,5,242,3],[277,7,242,5],[277,8,242,6],[277,9,242,7],[277,10,242,8],[278,2,243,0],[279,2,244,0],[279,11,244,9,"getConfigsWithRegexes"],[279,32,244,30,"getConfigsWithRegexes"],[279,33,244,31,"configs"],[279,40,244,38],[279,42,244,40],[280,4,245,2],[280,11,245,9,"configs"],[280,18,245,16],[280,19,245,17,"map"],[280,22,245,20],[280,23,245,21],[280,33,245,21,"c"],[280,34,245,22],[281,6,245,22],[281,13,245,22,"Object"],[281,19,245,22],[281,20,245,22,"assign"],[281,26,245,22],[281,31,246,7,"c"],[281,32,246,8],[282,8,247,4],[283,8,248,4,"regex"],[283,13,248,9],[283,15,248,11,"c"],[283,16,248,12],[283,17,248,13,"regex"],[283,22,248,18],[283,25,248,21],[283,29,248,25,"RegExp"],[283,35,248,31],[283,36,248,32,"c"],[283,37,248,33],[283,38,248,34,"regex"],[283,43,248,39],[283,44,248,40,"source"],[283,50,248,46],[283,53,248,49],[283,56,248,52],[283,57,248,53],[283,60,248,56,"undefined"],[284,6,248,65],[285,4,248,65],[285,5,249,4],[285,6,249,5],[286,2,250,0],[287,2,251,0],[287,6,251,6,"matchAgainstConfigs"],[287,25,251,25],[287,28,251,28],[287,37,251,6,"matchAgainstConfigs"],[287,56,251,25,"matchAgainstConfigs"],[287,57,251,29,"remaining"],[287,66,251,38],[287,68,251,40,"configs"],[287,75,251,47],[287,77,251,52],[288,4,252,2],[288,8,252,6,"routes"],[288,14,252,12],[289,4,253,2],[289,8,253,6,"remainingPath"],[289,21,253,19],[289,24,253,22,"remaining"],[289,33,253,31],[291,4,255,2],[292,4,255,2],[292,8,255,2,"_loop"],[292,13,255,2],[292,25,255,2,"_loop"],[292,31,255,2,"config"],[292,37,255,2],[292,39,256,32],[293,8,257,4],[293,12,257,8],[293,13,257,9,"config"],[293,19,257,15],[293,20,257,16,"regex"],[293,25,257,21],[293,27,257,23],[294,10,257,23],[295,8,259,4],[296,8,260,4],[296,12,260,10,"match"],[296,17,260,15],[296,20,260,18,"remainingPath"],[296,33,260,31],[296,34,260,32,"match"],[296,39,260,37],[296,40,260,38,"config"],[296,46,260,44],[296,47,260,45,"regex"],[296,52,260,50],[296,53,260,51],[298,8,262,4],[299,8,263,4],[299,12,263,8,"match"],[299,17,263,13],[299,19,263,15],[300,10,264,6,"routes"],[300,16,264,12],[300,19,264,15,"config"],[300,25,264,21],[300,26,264,22,"routeNames"],[300,36,264,32],[300,37,264,33,"map"],[300,40,264,36],[300,41,264,37],[300,51,264,37,"routeName"],[300,60,264,46],[300,62,264,50],[301,12,265,8],[301,16,265,14,"routeConfig"],[301,27,265,25],[301,30,265,28,"configs"],[301,37,265,35],[301,38,265,36,"find"],[301,42,265,40],[301,43,265,41],[301,53,265,41,"c"],[301,54,265,42],[301,56,265,46],[302,14,266,10],[303,14,267,10],[303,21,267,17,"c"],[303,22,267,18],[303,23,267,19,"screen"],[303,29,267,25],[303,34,267,30,"routeName"],[303,43,267,39],[303,47,267,43],[303,48,267,44],[303,49,267,45],[303,51,267,47,"_$$_REQUIRE"],[303,62,267,47],[303,63,267,47,"_dependencyMap"],[303,77,267,47],[303,106,267,64,"arrayStartsWith"],[303,121,267,79],[303,123,267,81,"config"],[303,129,267,87],[303,130,267,88,"segments"],[303,138,267,96],[303,140,267,98,"c"],[303,141,267,99],[303,142,267,100,"segments"],[303,150,267,108],[303,151,267,109],[304,12,268,8],[304,13,268,9],[304,14,268,10],[305,12,269,8],[305,16,269,14,"params"],[305,22,269,20],[305,25,269,23,"routeConfig"],[305,36,269,34],[305,40,269,38,"match"],[305,45,269,43],[305,46,269,44,"groups"],[305,52,269,50],[305,55,269,53,"Object"],[305,61,269,59],[305,62,269,60,"fromEntries"],[305,73,269,71],[305,74,269,72,"Object"],[305,80,269,78],[305,81,269,79,"entries"],[305,88,269,86],[305,89,269,87,"match"],[305,94,269,92],[305,95,269,93,"groups"],[305,101,269,99],[305,102,269,100],[305,103,269,101,"map"],[305,106,269,104],[305,107,269,105],[305,117,269,105,"_ref2"],[305,122,269,105],[305,124,269,123],[306,14,269,123],[306,18,269,123,"_ref3"],[306,23,269,123],[306,26,269,123,"_slicedToArray"],[306,40,269,123],[306,41,269,123,"_ref2"],[306,46,269,123],[307,16,269,107,"key"],[307,19,269,110],[307,22,269,110,"_ref3"],[307,27,269,110],[308,16,269,112,"value"],[308,21,269,117],[308,24,269,117,"_ref3"],[308,29,269,117],[309,14,270,10],[309,18,270,16,"index"],[309,23,270,21],[309,26,270,24,"Number"],[309,32,270,30],[309,33,270,31,"key"],[309,36,270,34],[309,37,270,35,"replace"],[309,44,270,42],[309,45,270,43],[309,53,270,51],[309,55,270,53],[309,57,270,55],[309,58,270,56],[309,59,270,57],[310,14,271,10],[310,18,271,16,"param"],[310,23,271,21],[310,26,271,24,"routeConfig"],[310,37,271,35],[310,38,271,36,"params"],[310,44,271,42],[310,45,271,43,"find"],[310,49,271,47],[310,50,271,48],[310,60,271,48,"it"],[310,62,271,50],[311,16,271,50],[311,23,271,54,"it"],[311,25,271,56],[311,26,271,57,"index"],[311,31,271,62],[311,36,271,67,"index"],[311,41,271,72],[312,14,271,72],[312,16,271,73],[313,14,272,10],[313,18,272,14],[313,19,272,14,"param"],[313,24,272,19],[313,44,272,14,"param"],[313,49,272,19],[313,50,272,21,"screen"],[313,56,272,27],[313,62,272,32,"routeName"],[313,71,272,41],[313,75,272,45,"param"],[313,80,272,50],[313,92,272,45,"param"],[313,97,272,50],[313,98,272,52,"name"],[313,102,272,56],[313,104,272,58],[314,16,273,12],[314,23,273,19],[314,24,273,20,"param"],[314,29,273,25],[314,30,273,26,"name"],[314,34,273,30],[314,36,273,32,"value"],[314,41,273,37],[314,42,273,38],[315,14,274,10],[316,14,275,10],[316,21,275,17],[316,25,275,21],[317,12,276,8],[317,13,276,9],[317,14,276,10],[317,15,276,11,"filter"],[317,21,276,17],[317,22,276,18],[317,32,276,18,"it"],[317,34,276,20],[318,14,276,20],[318,21,276,24,"it"],[318,23,276,26],[318,27,276,30],[318,31,276,34],[319,12,276,34],[319,14,276,35],[319,15,276,36,"map"],[319,18,276,39],[319,19,276,40],[319,29,276,40,"_ref4"],[319,34,276,40],[319,36,276,58],[320,14,276,58],[320,18,276,58,"_routeConfig$parse"],[320,36,276,58],[321,14,276,58],[321,18,276,58,"_ref5"],[321,23,276,58],[321,26,276,58,"_slicedToArray"],[321,40,276,58],[321,41,276,58,"_ref4"],[321,46,276,58],[322,16,276,42,"key"],[322,19,276,45],[322,22,276,45,"_ref5"],[322,27,276,45],[323,16,276,47,"value"],[323,21,276,52],[323,24,276,52,"_ref5"],[323,29,276,52],[324,14,277,10],[324,18,277,14,"value"],[324,23,277,19],[324,27,277,23],[324,31,277,27],[324,33,277,29],[325,16,278,12],[325,23,278,19],[325,24,278,20,"key"],[325,27,278,23],[325,29,278,25,"undefined"],[325,38,278,34],[325,39,278,35],[326,14,279,10],[327,14,280,10],[327,18,280,16,"decoded"],[327,25,280,23],[327,28,280,26,"decodeURIComponent"],[327,46,280,44],[327,47,280,45,"value"],[327,52,280,50],[327,53,280,51],[328,14,281,10],[328,18,281,16,"parsed"],[328,24,281,22],[328,27,281,25],[328,28,281,25,"_routeConfig$parse"],[328,46,281,25],[328,49,281,25,"routeConfig"],[328,60,281,36],[328,61,281,37,"parse"],[328,66,281,42],[328,79,281,25,"_routeConfig$parse"],[328,97,281,25],[328,98,281,45,"key"],[328,101,281,48],[328,102,281,49],[328,105,281,52,"routeConfig"],[328,116,281,63],[328,117,281,64,"parse"],[328,122,281,69],[328,123,281,70,"key"],[328,126,281,73],[328,127,281,74],[328,128,281,75,"decoded"],[328,135,281,82],[328,136,281,83],[328,139,281,86,"decoded"],[328,146,281,93],[329,14,282,10],[329,21,282,17],[329,22,282,18,"key"],[329,25,282,21],[329,27,282,23,"parsed"],[329,33,282,29],[329,34,282,30],[330,12,283,8],[330,13,283,9],[330,14,283,10],[330,15,283,11],[330,18,283,14,"undefined"],[330,27,283,23],[331,12,284,8],[331,16,284,12,"params"],[331,22,284,18],[331,26,284,22,"Object"],[331,32,284,28],[331,33,284,29,"keys"],[331,37,284,33],[331,38,284,34,"params"],[331,44,284,40],[331,45,284,41],[331,46,284,42,"length"],[331,52,284,48],[331,54,284,50],[332,14,285,10],[332,21,285,17],[333,16,286,12,"name"],[333,20,286,16],[333,22,286,18,"routeName"],[333,31,286,27],[334,16,287,12,"params"],[334,22,287,18],[334,24,287,12,"params"],[335,14,288,10],[335,15,288,11],[336,12,289,8],[337,12,290,8],[337,19,290,15],[338,14,291,10,"name"],[338,18,291,14],[338,20,291,16,"routeName"],[339,12,292,8],[339,13,292,9],[340,10,293,6],[340,11,293,7],[340,12,293,8],[341,10,294,6,"remainingPath"],[341,23,294,19],[341,26,294,22,"remainingPath"],[341,39,294,35],[341,40,294,36,"replace"],[341,47,294,43],[341,48,294,44,"match"],[341,53,294,49],[341,54,294,50],[341,55,294,51],[341,56,294,52],[341,58,294,54],[341,60,294,56],[341,61,294,57],[342,10,294,58],[343,8,296,4],[344,6,297,2],[344,7,297,3],[345,6,297,3,"_ret"],[345,10,297,3],[346,4,256,2],[346,9,256,7],[346,13,256,13,"config"],[346,19,256,19],[346,23,256,23,"configs"],[346,30,256,30],[347,6,256,30,"_ret"],[347,10,256,30],[347,13,256,30,"_loop"],[347,18,256,30],[347,19,256,30,"config"],[347,25,256,30],[348,6,256,30],[348,10,256,30,"_ret"],[348,14,256,30],[348,22,258,6],[349,6,258,15],[349,10,258,15,"_ret"],[349,14,258,15],[349,22,295,6],[350,4,295,12],[351,4,298,2],[351,11,298,9],[352,6,299,4,"routes"],[352,12,299,10],[352,14,299,4,"routes"],[352,20,299,10],[353,6,300,4,"remainingPath"],[353,19,300,17],[353,21,300,4,"remainingPath"],[354,4,301,2],[354,5,301,3],[355,2,302,0],[355,3,302,1],[356,2,303,0],[356,6,303,6,"createNormalizedConfigs"],[356,30,303,29],[356,33,303,32],[356,42,303,6,"createNormalizedConfigs"],[356,65,303,29,"createNormalizedConfigs"],[356,66,303,33,"screen"],[356,72,303,39],[356,74,303,41,"routeConfig"],[356,85,303,52],[356,87,303,54,"initials"],[356,95,303,62],[356,97,303,64,"paths"],[356,102,303,69],[356,104,303,71,"parentScreens"],[356,117,303,84],[356,119,303,86,"routeNames"],[356,129,303,96],[356,131,303,101],[357,4,304,2],[357,8,304,8,"configs"],[357,15,304,15],[357,18,304,18],[357,20,304,20],[358,4,305,2,"routeNames"],[358,14,305,12],[358,15,305,13,"push"],[358,19,305,17],[358,20,305,18,"screen"],[358,26,305,24],[358,27,305,25],[359,4,306,2,"parentScreens"],[359,17,306,15],[359,18,306,16,"push"],[359,22,306,20],[359,23,306,21,"screen"],[359,29,306,27],[359,30,306,28],[360,4,307,2],[360,8,307,8,"config"],[360,14,307,14],[360,17,307,17,"routeConfig"],[360,28,307,28],[360,29,307,29,"screen"],[360,35,307,35],[360,36,307,36],[361,4,308,2],[361,8,308,6],[361,15,308,13,"config"],[361,21,308,19],[361,26,308,24],[361,34,308,32],[361,36,308,34],[362,6,309,4,"paths"],[362,11,309,9],[362,12,309,10,"push"],[362,16,309,14],[362,17,309,15],[363,8,310,6,"screen"],[363,14,310,12],[363,16,310,6,"screen"],[363,22,310,12],[364,8,311,6,"path"],[364,12,311,10],[364,14,311,12,"config"],[365,6,312,4],[365,7,312,5],[365,8,312,6],[366,6,313,4,"configs"],[366,13,313,11],[366,14,313,12,"push"],[366,18,313,16],[366,19,313,17,"createConfigItem"],[366,35,313,33],[366,36,313,34,"screen"],[366,42,313,40],[366,44,313,40,"_toConsumableArray"],[366,62,313,40],[366,63,313,46,"routeNames"],[366,73,313,56],[366,76,313,56,"_toConsumableArray"],[366,94,313,56],[366,95,313,63,"paths"],[366,100,313,68],[366,101,313,69],[366,102,313,70],[366,103,313,71],[367,4,314,2],[367,5,314,3],[367,11,314,9],[367,15,314,13],[367,22,314,20,"config"],[367,28,314,26],[367,33,314,31],[367,41,314,39],[367,43,314,41],[368,6,314,41],[368,10,314,41,"_config$alias"],[368,23,314,41],[369,6,315,4],[370,6,316,4],[371,6,317,4],[372,6,318,4],[372,10,318,8],[372,17,318,15,"config"],[372,23,318,21],[372,24,318,22,"path"],[372,28,318,26],[372,33,318,31],[372,41,318,39],[372,43,318,41],[373,8,319,6],[373,12,319,10,"config"],[373,18,319,16],[373,19,319,17,"exact"],[373,24,319,22],[373,28,319,26,"config"],[373,34,319,32],[373,35,319,33,"path"],[373,39,319,37],[373,43,319,41],[373,47,319,45],[373,49,319,47],[374,10,320,8],[374,16,320,14],[374,20,320,18,"Error"],[374,25,320,23],[374,26,320,24],[374,37,320,35,"screen"],[374,43,320,41],[374,223,320,221],[374,224,320,222],[375,8,321,6],[377,8,323,6],[378,8,324,6],[379,8,325,6],[379,12,325,12,"aliasConfigs"],[379,24,325,24],[379,27,325,27],[379,29,325,29],[380,8,326,6],[380,12,326,10,"config"],[380,18,326,16],[380,19,326,17,"alias"],[380,24,326,22],[380,26,326,24],[381,10,327,8],[381,15,327,13],[381,19,327,19,"alias"],[381,24,327,24],[381,28,327,28,"config"],[381,34,327,34],[381,35,327,35,"alias"],[381,40,327,40],[381,42,327,42],[382,12,328,10],[382,16,328,14],[382,23,328,21,"alias"],[382,28,328,26],[382,33,328,31],[382,41,328,39],[382,43,328,41],[383,14,329,12,"aliasConfigs"],[383,26,329,24],[383,27,329,25,"push"],[383,31,329,29],[383,32,329,30,"createConfigItem"],[383,48,329,46],[383,49,329,47,"screen"],[383,55,329,53],[383,57,329,53,"_toConsumableArray"],[383,75,329,53],[383,76,329,59,"routeNames"],[383,86,329,69],[383,92,329,69,"concat"],[383,98,329,69],[383,99,329,69,"_toConsumableArray"],[383,117,329,69],[383,118,329,76,"paths"],[383,123,329,81],[383,127,329,83],[384,16,330,14,"screen"],[384,22,330,20],[384,24,330,14,"screen"],[384,30,330,20],[385,16,331,14,"path"],[385,20,331,18],[385,22,331,20,"alias"],[386,14,332,12],[386,15,332,13],[386,19,332,16,"config"],[386,25,332,22],[386,26,332,23,"parse"],[386,31,332,28],[386,32,332,29],[386,33,332,30],[387,12,333,10],[387,13,333,11],[387,19,333,17],[387,23,333,21],[387,30,333,28,"alias"],[387,35,333,33],[387,40,333,38],[387,48,333,46],[387,50,333,48],[388,14,334,12,"aliasConfigs"],[388,26,334,24],[388,27,334,25,"push"],[388,31,334,29],[388,32,334,30,"createConfigItem"],[388,48,334,46],[388,49,334,47,"screen"],[388,55,334,53],[388,57,334,53,"_toConsumableArray"],[388,75,334,53],[388,76,334,59,"routeNames"],[388,86,334,69],[388,89,334,72,"alias"],[388,94,334,77],[388,95,334,78,"exact"],[388,100,334,83],[388,103,334,86],[388,104,334,87],[389,16,335,14,"screen"],[389,22,335,20],[389,24,335,14,"screen"],[389,30,335,20],[390,16,336,14,"path"],[390,20,336,18],[390,22,336,20,"alias"],[390,27,336,25],[390,28,336,26,"path"],[391,14,337,12],[391,15,337,13],[391,16,337,14],[391,22,337,14,"concat"],[391,28,337,14],[391,29,337,14,"_toConsumableArray"],[391,47,337,14],[391,48,337,21,"paths"],[391,53,337,26],[391,57,337,28],[392,16,338,14,"screen"],[392,22,338,20],[392,24,338,14,"screen"],[392,30,338,20],[393,16,339,14,"path"],[393,20,339,18],[393,22,339,20,"alias"],[393,27,339,25],[393,28,339,26,"path"],[394,14,340,12],[394,15,340,13],[394,17,340,14],[394,19,340,16,"alias"],[394,24,340,21],[394,25,340,22,"parse"],[394,30,340,27],[394,31,340,28],[394,32,340,29],[395,12,341,10],[396,10,342,8],[397,8,343,6],[398,8,344,6],[398,12,344,10,"config"],[398,18,344,16],[398,19,344,17,"exact"],[398,24,344,22],[398,26,344,24],[399,10,345,8],[400,10,346,8],[401,10,347,8,"paths"],[401,15,347,13],[401,16,347,14,"length"],[401,22,347,20],[401,25,347,23],[401,26,347,24],[402,8,348,6],[403,8,349,6,"paths"],[403,13,349,11],[403,14,349,12,"push"],[403,18,349,16],[403,19,349,17],[404,10,350,8,"screen"],[404,16,350,14],[404,18,350,8,"screen"],[404,24,350,14],[405,10,351,8,"path"],[405,14,351,12],[405,16,351,14,"config"],[405,22,351,20],[405,23,351,21,"path"],[406,8,352,6],[406,9,352,7],[406,10,352,8],[407,8,353,6,"configs"],[407,15,353,13],[407,16,353,14,"push"],[407,20,353,18],[407,21,353,19,"createConfigItem"],[407,37,353,35],[407,38,353,36,"screen"],[407,44,353,42],[407,46,353,42,"_toConsumableArray"],[407,64,353,42],[407,65,353,48,"routeNames"],[407,75,353,58],[407,78,353,58,"_toConsumableArray"],[407,96,353,58],[407,97,353,65,"paths"],[407,102,353,70],[407,105,353,73,"config"],[407,111,353,79],[407,112,353,80,"parse"],[407,117,353,85],[407,118,353,86],[407,119,353,87],[408,8,354,6,"configs"],[408,15,354,13],[408,16,354,14,"push"],[408,20,354,18],[408,21,354,18,"apply"],[408,26,354,18],[408,27,354,6,"configs"],[408,34,354,13],[408,36,354,22,"aliasConfigs"],[408,48,354,34],[408,49,354,35],[409,6,355,4],[410,6,356,4],[410,10,356,8],[410,17,356,15,"config"],[410,23,356,21],[410,28,356,26],[410,36,356,34],[410,40,356,38],[410,47,356,45,"config"],[410,53,356,51],[410,54,356,52,"path"],[410,58,356,56],[410,63,356,61],[410,71,356,69],[410,76,356,69,"_config$alias"],[410,89,356,69],[410,92,356,73,"config"],[410,98,356,79],[410,99,356,80,"alias"],[410,104,356,85],[410,117,356,73,"_config$alias"],[410,130,356,73],[410,131,356,87,"length"],[410,137,356,93],[410,139,356,95],[411,8,357,6],[411,14,357,12],[411,18,357,16,"Error"],[411,23,357,21],[411,24,357,22],[411,35,357,33,"screen"],[411,41,357,39],[411,126,357,124],[411,127,357,125],[412,6,358,4],[413,6,359,4],[413,10,359,8,"config"],[413,16,359,14],[413,17,359,15,"screens"],[413,24,359,22],[413,26,359,24],[414,8,360,6],[415,8,361,6],[415,12,361,10,"config"],[415,18,361,16],[415,19,361,17,"initialRouteName"],[415,35,361,33],[415,37,361,35],[416,10,362,8,"initials"],[416,18,362,16],[416,19,362,17,"push"],[416,23,362,21],[416,24,362,22],[417,12,363,10,"initialRouteName"],[417,28,363,26],[417,30,363,28,"config"],[417,36,363,34],[417,37,363,35,"initialRouteName"],[417,53,363,51],[418,12,364,10,"parentScreens"],[418,25,364,23],[418,27,364,10,"parentScreens"],[419,10,365,8],[419,11,365,9],[419,12,365,10],[420,8,366,6],[421,8,367,6,"Object"],[421,14,367,12],[421,15,367,13,"keys"],[421,19,367,17],[421,20,367,18,"config"],[421,26,367,24],[421,27,367,25,"screens"],[421,34,367,32],[421,35,367,33],[421,36,367,34,"forEach"],[421,43,367,41],[421,44,367,42],[421,54,367,42,"nestedConfig"],[421,66,367,54],[421,68,367,58],[422,10,368,8],[422,14,368,14,"result"],[422,20,368,20],[422,23,368,23,"createNormalizedConfigs"],[422,47,368,46],[422,48,368,47,"nestedConfig"],[422,60,368,59],[422,62,368,61,"config"],[422,68,368,67],[422,69,368,68,"screens"],[422,76,368,75],[422,78,368,77,"initials"],[422,86,368,85],[422,88,368,85,"_toConsumableArray"],[422,106,368,85],[422,107,368,91,"paths"],[422,112,368,96],[422,115,368,96,"_toConsumableArray"],[422,133,368,96],[422,134,368,103,"parentScreens"],[422,147,368,116],[422,150,368,119,"routeNames"],[422,160,368,129],[422,161,368,130],[423,10,369,8,"configs"],[423,17,369,15],[423,18,369,16,"push"],[423,22,369,20],[423,23,369,20,"apply"],[423,28,369,20],[423,29,369,8,"configs"],[423,36,369,15],[423,38,369,15,"_toConsumableArray"],[423,56,369,15],[423,57,369,24,"result"],[423,63,369,30],[423,65,369,31],[424,8,370,6],[424,9,370,7],[424,10,370,8],[425,6,371,4],[426,4,372,2],[427,4,373,2,"routeNames"],[427,14,373,12],[427,15,373,13,"pop"],[427,18,373,16],[427,19,373,17],[427,20,373,18],[428,4,374,2],[428,11,374,9,"configs"],[428,18,374,16],[429,2,375,0],[429,3,375,1],[430,2,376,0],[430,6,376,6,"createConfigItem"],[430,22,376,22],[430,25,376,25],[430,34,376,6,"createConfigItem"],[430,50,376,22,"createConfigItem"],[430,51,376,26,"screen"],[430,57,376,32],[430,59,376,34,"routeNames"],[430,69,376,44],[430,71,376,46,"paths"],[430,76,376,51],[430,78,376,53,"parse"],[430,83,376,58],[430,85,376,63],[431,4,377,2],[431,8,377,8,"parts"],[431,13,377,13],[431,16,377,16],[431,18,377,18],[433,4,379,2],[434,4,379,2],[434,8,379,2,"_loop2"],[434,14,379,2],[434,26,379,2,"_loop2"],[434,33,379,2,"_screen"],[434,40,379,2],[434,42,383,14],[435,6,384,4,"parts"],[435,11,384,9],[435,12,384,10,"push"],[435,16,384,14],[435,17,384,14,"apply"],[435,22,384,14],[435,23,384,4,"parts"],[435,28,384,9],[435,30,384,9,"_toConsumableArray"],[435,48,384,9],[435,49,384,18],[435,50,384,19],[435,51,384,20],[435,53,384,22,"_$$_REQUIRE"],[435,64,384,22],[435,65,384,22,"_dependencyMap"],[435,79,384,22],[435,108,384,39,"getPatternParts"],[435,123,384,54],[435,125,384,56,"path"],[435,129,384,60],[435,130,384,61],[435,131,384,62,"map"],[435,134,384,65],[435,135,384,66],[435,145,384,66,"part"],[435,149,384,70],[436,8,384,70],[436,15,384,70,"Object"],[436,21,384,70],[436,22,384,70,"assign"],[436,28,384,70],[436,33,385,9,"part"],[436,37,385,13],[437,10,386,6,"screen"],[437,16,386,12],[437,18,386,6,"screen"],[438,8,386,12],[439,6,386,12],[439,7,387,6],[439,8,387,7],[439,10,387,8],[440,4,388,2],[440,5,388,3],[441,4,380,2],[441,13,380,2,"_ref6"],[441,18,380,2],[441,22,383,7,"paths"],[441,27,383,12],[442,6,383,12],[442,10,381,4,"screen"],[442,17,381,10],[442,20,381,10,"_ref6"],[442,25,381,10],[442,26,381,4,"screen"],[442,32,381,10],[443,6,381,10],[443,10,382,4,"path"],[443,14,382,8],[443,17,382,8,"_ref6"],[443,22,382,8],[443,23,382,4,"path"],[443,27,382,8],[444,6,382,8,"_loop2"],[444,12,382,8],[444,13,382,8,"_screen"],[444,20,382,8],[445,4,382,8],[446,4,389,2],[446,8,389,8,"regex"],[446,13,389,13],[446,16,389,16,"parts"],[446,21,389,21],[446,22,389,22,"length"],[446,28,389,28],[446,31,389,31],[446,35,389,35,"RegExp"],[446,41,389,41],[446,42,389,42],[446,47,389,47,"parts"],[446,52,389,52],[446,53,389,53,"map"],[446,56,389,56],[446,57,389,57],[446,67,389,58,"it"],[446,69,389,60],[446,71,389,62,"i"],[446,72,389,63],[446,74,389,68],[447,6,390,4],[447,10,390,8,"it"],[447,12,390,10],[447,13,390,11,"param"],[447,18,390,16],[447,20,390,18],[448,8,391,6],[448,12,391,12,"reg"],[448,15,391,15],[448,18,391,18,"it"],[448,20,391,20],[448,21,391,21,"regex"],[448,26,391,26],[448,30,391,30],[448,37,391,37],[449,8,392,6],[449,15,392,13],[449,29,392,27,"i"],[449,30,392,28],[449,34,392,32,"reg"],[449,37,392,35],[449,45,392,43,"it"],[449,47,392,45],[449,48,392,46,"optional"],[449,56,392,54],[449,59,392,57],[449,62,392,60],[449,65,392,63],[449,67,392,65],[449,70,392,68],[450,6,393,4],[451,6,394,4],[451,13,394,11],[451,16,394,14,"it"],[451,18,394,16],[451,19,394,17,"segment"],[451,26,394,24],[451,31,394,29],[451,34,394,32],[451,37,394,35],[451,41,394,39],[451,44,394,42],[451,45,394,43],[451,46,394,44],[451,48,394,46,"_escapeStringRegexp"],[451,67,394,65],[451,68,394,66,"default"],[451,75,394,73],[451,77,394,75,"it"],[451,79,394,77],[451,80,394,78,"segment"],[451,87,394,85],[451,88,394,86],[451,93,394,91],[452,4,395,2],[452,5,395,3],[452,6,395,4],[452,7,395,5,"join"],[452,11,395,9],[452,12,395,10],[452,14,395,12],[452,15,395,13],[452,19,395,17],[452,20,395,18],[452,23,395,21,"undefined"],[452,32,395,30],[453,4,396,2],[453,8,396,8,"segments"],[453,16,396,16],[453,19,396,19,"parts"],[453,24,396,24],[453,25,396,25,"map"],[453,28,396,28],[453,29,396,29],[453,39,396,29,"it"],[453,41,396,31],[454,6,396,31],[454,13,396,35,"it"],[454,15,396,37],[454,16,396,38,"segment"],[454,23,396,45],[455,4,396,45],[455,6,396,46],[456,4,397,2],[456,8,397,8,"params"],[456,14,397,14],[456,17,397,17,"parts"],[456,22,397,22],[456,23,397,23,"map"],[456,26,397,26],[456,27,397,27],[456,37,397,28,"it"],[456,39,397,30],[456,41,397,32,"i"],[456,42,397,33],[457,6,397,33],[457,13,397,38,"it"],[457,15,397,40],[457,16,397,41,"param"],[457,21,397,46],[457,24,397,49],[458,8,398,4,"index"],[458,13,398,9],[458,15,398,11,"i"],[458,16,398,12],[459,8,399,4,"screen"],[459,14,399,10],[459,16,399,12,"it"],[459,18,399,14],[459,19,399,15,"screen"],[459,25,399,21],[460,8,400,4,"name"],[460,12,400,8],[460,14,400,10,"it"],[460,16,400,12],[460,17,400,13,"param"],[461,6,401,2],[461,7,401,3],[461,10,401,6],[461,14,401,10],[462,4,401,10],[462,6,401,11],[462,7,401,12,"filter"],[462,13,401,18],[462,14,401,19],[462,24,401,19,"it"],[462,26,401,21],[463,6,401,21],[463,13,401,25,"it"],[463,15,401,27],[463,19,401,31],[463,23,401,35],[464,4,401,35],[464,6,401,36],[465,4,402,2],[465,11,402,9],[466,6,403,4,"screen"],[466,12,403,10],[466,14,403,4,"screen"],[466,20,403,10],[467,6,404,4,"regex"],[467,11,404,9],[467,13,404,4,"regex"],[467,18,404,9],[468,6,405,4,"segments"],[468,14,405,12],[468,16,405,4,"segments"],[468,24,405,12],[469,6,406,4,"params"],[469,12,406,10],[469,14,406,4,"params"],[469,20,406,10],[470,6,407,4,"routeNames"],[470,16,407,14],[470,18,407,4,"routeNames"],[470,28,407,14],[471,6,408,4,"parse"],[471,11,408,9],[471,13,408,4,"parse"],[472,4,409,2],[472,5,409,3],[473,2,410,0],[473,3,410,1],[474,2,411,0],[474,6,411,6,"findParseConfigForRoute"],[474,29,411,29],[474,32,411,32],[474,41,411,6,"findParseConfigForRoute"],[474,64,411,29,"findParseConfigForRoute"],[474,65,411,33,"routeName"],[474,74,411,42],[474,76,411,44,"flatConfig"],[474,86,411,54],[474,88,411,59],[475,4,412,2],[475,9,412,7],[475,13,412,13,"config"],[475,19,412,19],[475,23,412,23,"flatConfig"],[475,33,412,33],[475,35,412,35],[476,6,413,4],[476,10,413,8,"routeName"],[476,19,413,17],[476,24,413,22,"config"],[476,30,413,28],[476,31,413,29,"routeNames"],[476,41,413,39],[476,42,413,40,"config"],[476,48,413,46],[476,49,413,47,"routeNames"],[476,59,413,57],[476,60,413,58,"length"],[476,66,413,64],[476,69,413,67],[476,70,413,68],[476,71,413,69],[476,73,413,71],[477,8,414,6],[477,15,414,13,"config"],[477,21,414,19],[477,22,414,20,"parse"],[477,27,414,25],[478,6,415,4],[479,4,416,2],[480,4,417,2],[480,11,417,9,"undefined"],[480,20,417,18],[481,2,418,0],[481,3,418,1],[483,2,420,0],[484,2,421,0],[484,6,421,6,"findInitialRoute"],[484,22,421,22],[484,25,421,25],[484,34,421,6,"findInitialRoute"],[484,50,421,22,"findInitialRoute"],[484,51,421,26,"routeName"],[484,60,421,35],[484,62,421,37,"parentScreens"],[484,75,421,50],[484,77,421,52,"initialRoutes"],[484,90,421,65],[484,92,421,70],[485,4,422,2],[485,9,422,7],[485,13,422,13,"config"],[485,19,422,19],[485,23,422,23,"initialRoutes"],[485,36,422,36],[485,38,422,38],[486,6,423,4],[486,10,423,8,"parentScreens"],[486,23,423,21],[486,24,423,22,"length"],[486,30,423,28],[486,35,423,33,"config"],[486,41,423,39],[486,42,423,40,"parentScreens"],[486,55,423,53],[486,56,423,54,"length"],[486,62,423,60],[486,64,423,62],[487,8,424,6],[487,12,424,10,"sameParents"],[487,23,424,21],[487,26,424,24],[487,30,424,28],[488,8,425,6],[488,13,425,11],[488,17,425,15,"i"],[488,18,425,16],[488,21,425,19],[488,22,425,20],[488,24,425,22,"i"],[488,25,425,23],[488,28,425,26,"parentScreens"],[488,41,425,39],[488,42,425,40,"length"],[488,48,425,46],[488,50,425,48,"i"],[488,51,425,49],[488,53,425,51],[488,55,425,53],[489,10,426,8],[489,14,426,12,"parentScreens"],[489,27,426,25],[489,28,426,26,"i"],[489,29,426,27],[489,30,426,28],[489,31,426,29,"localeCompare"],[489,44,426,42],[489,45,426,43,"config"],[489,51,426,49],[489,52,426,50,"parentScreens"],[489,65,426,63],[489,66,426,64,"i"],[489,67,426,65],[489,68,426,66],[489,69,426,67],[489,74,426,72],[489,75,426,73],[489,77,426,75],[490,12,427,10,"sameParents"],[490,23,427,21],[490,26,427,24],[490,31,427,29],[491,12,428,10],[492,10,429,8],[493,8,430,6],[494,8,431,6],[494,12,431,10,"sameParents"],[494,23,431,21],[494,25,431,23],[495,10,432,8],[495,17,432,15,"routeName"],[495,26,432,24],[495,31,432,29,"config"],[495,37,432,35],[495,38,432,36,"initialRouteName"],[495,54,432,52],[495,57,432,55,"config"],[495,63,432,61],[495,64,432,62,"initialRouteName"],[495,80,432,78],[495,83,432,81,"undefined"],[495,92,432,90],[496,8,433,6],[497,6,434,4],[498,4,435,2],[499,4,436,2],[499,11,436,9,"undefined"],[499,20,436,18],[500,2,437,0],[500,3,437,1],[502,2,439,0],[503,2,440,0],[504,2,441,0],[504,6,441,6,"createStateObject"],[504,23,441,23],[504,26,441,26],[504,35,441,6,"createStateObject"],[504,52,441,23,"createStateObject"],[504,53,441,27,"initialRoute"],[504,65,441,39],[504,67,441,41,"route"],[504,72,441,46],[504,74,441,48,"isEmpty"],[504,81,441,55],[504,83,441,60],[505,4,442,2],[505,8,442,6,"isEmpty"],[505,15,442,13],[505,17,442,15],[506,6,443,4],[506,10,443,8,"initialRoute"],[506,22,443,20],[506,24,443,22],[507,8,444,6],[507,15,444,13],[508,10,445,8,"index"],[508,15,445,13],[508,17,445,15],[508,18,445,16],[509,10,446,8,"routes"],[509,16,446,14],[509,18,446,16],[509,19,446,17],[510,12,447,10,"name"],[510,16,447,14],[510,18,447,16,"initialRoute"],[511,10,448,8],[511,11,448,9],[511,13,448,11,"route"],[511,18,448,16],[512,8,449,6],[512,9,449,7],[513,6,450,4],[513,7,450,5],[513,13,450,11],[514,8,451,6],[514,15,451,13],[515,10,452,8,"routes"],[515,16,452,14],[515,18,452,16],[515,19,452,17,"route"],[515,24,452,22],[516,8,453,6],[516,9,453,7],[517,6,454,4],[518,4,455,2],[518,5,455,3],[518,11,455,9],[519,6,456,4],[519,10,456,8,"initialRoute"],[519,22,456,20],[519,24,456,22],[520,8,457,6],[520,15,457,13],[521,10,458,8,"index"],[521,15,458,13],[521,17,458,15],[521,18,458,16],[522,10,459,8,"routes"],[522,16,459,14],[522,18,459,16],[522,19,459,17],[523,12,460,10,"name"],[523,16,460,14],[523,18,460,16,"initialRoute"],[524,10,461,8],[524,11,461,9],[524,13,461,9,"Object"],[524,19,461,9],[524,20,461,9,"assign"],[524,26,461,9],[524,31,462,13,"route"],[524,36,462,18],[525,12,463,10,"state"],[525,17,463,15],[525,19,463,17],[526,14,464,12,"routes"],[526,20,464,18],[526,22,464,20],[527,12,465,10],[528,10,465,11],[529,8,467,6],[529,9,467,7],[530,6,468,4],[530,7,468,5],[530,13,468,11],[531,8,469,6],[531,15,469,13],[532,10,470,8,"routes"],[532,16,470,14],[532,18,470,16],[532,19,470,16,"Object"],[532,25,470,16],[532,26,470,16,"assign"],[532,32,470,16],[532,37,471,13,"route"],[532,42,471,18],[533,12,472,10,"state"],[533,17,472,15],[533,19,472,17],[534,14,473,12,"routes"],[534,20,473,18],[534,22,473,20],[535,12,474,10],[536,10,474,11],[537,8,476,6],[537,9,476,7],[538,6,477,4],[539,4,478,2],[540,2,479,0],[540,3,479,1],[541,2,480,0],[541,6,480,6,"createNestedStateObject"],[541,29,480,29],[541,32,480,32],[541,41,480,6,"createNestedStateObject"],[541,64,480,29,"createNestedStateObject"],[541,65,480,33,"path"],[541,69,480,37],[541,71,480,39,"routes"],[541,77,480,45],[541,79,480,47,"initialRoutes"],[541,92,480,60],[541,94,480,62,"flatConfig"],[541,104,480,72],[541,106,480,77],[542,4,481,2],[542,8,481,6,"route"],[542,13,481,11],[542,16,481,14,"routes"],[542,22,481,20],[542,23,481,21,"shift"],[542,28,481,26],[542,29,481,27],[542,30,481,28],[543,4,482,2],[543,8,482,8,"parentScreens"],[543,21,482,21],[543,24,482,24],[543,26,482,26],[544,4,483,2],[544,8,483,6,"initialRoute"],[544,20,483,18],[544,23,483,21,"findInitialRoute"],[544,39,483,37],[544,40,483,38,"route"],[544,45,483,43],[544,46,483,44,"name"],[544,50,483,48],[544,52,483,50,"parentScreens"],[544,65,483,63],[544,67,483,65,"initialRoutes"],[544,80,483,78],[544,81,483,79],[545,4,484,2,"parentScreens"],[545,17,484,15],[545,18,484,16,"push"],[545,22,484,20],[545,23,484,21,"route"],[545,28,484,26],[545,29,484,27,"name"],[545,33,484,31],[545,34,484,32],[546,4,485,2],[546,8,485,8,"state"],[546,13,485,13],[546,16,485,16,"createStateObject"],[546,33,485,33],[546,34,485,34,"initialRoute"],[546,46,485,46],[546,48,485,48,"route"],[546,53,485,53],[546,55,485,55,"routes"],[546,61,485,61],[546,62,485,62,"length"],[546,68,485,68],[546,73,485,73],[546,74,485,74],[546,75,485,75],[547,4,486,2],[547,8,486,6,"routes"],[547,14,486,12],[547,15,486,13,"length"],[547,21,486,19],[547,24,486,22],[547,25,486,23],[547,27,486,25],[548,6,487,4],[548,10,487,8,"nestedState"],[548,21,487,19],[548,24,487,22,"state"],[548,29,487,27],[549,6,488,4],[549,13,488,11,"route"],[549,18,488,16],[549,21,488,19,"routes"],[549,27,488,25],[549,28,488,26,"shift"],[549,33,488,31],[549,34,488,32],[549,35,488,33],[549,37,488,35],[550,8,489,6,"initialRoute"],[550,20,489,18],[550,23,489,21,"findInitialRoute"],[550,39,489,37],[550,40,489,38,"route"],[550,45,489,43],[550,46,489,44,"name"],[550,50,489,48],[550,52,489,50,"parentScreens"],[550,65,489,63],[550,67,489,65,"initialRoutes"],[550,80,489,78],[550,81,489,79],[551,8,490,6],[551,12,490,12,"nestedStateIndex"],[551,28,490,28],[551,31,490,31,"nestedState"],[551,42,490,42],[551,43,490,43,"index"],[551,48,490,48],[551,52,490,52,"nestedState"],[551,63,490,63],[551,64,490,64,"routes"],[551,70,490,70],[551,71,490,71,"length"],[551,77,490,77],[551,80,490,80],[551,81,490,81],[552,8,491,6,"nestedState"],[552,19,491,17],[552,20,491,18,"routes"],[552,26,491,24],[552,27,491,25,"nestedStateIndex"],[552,43,491,41],[552,44,491,42],[552,45,491,43,"state"],[552,50,491,48],[552,53,491,51,"createStateObject"],[552,70,491,68],[552,71,491,69,"initialRoute"],[552,83,491,81],[552,85,491,83,"route"],[552,90,491,88],[552,92,491,90,"routes"],[552,98,491,96],[552,99,491,97,"length"],[552,105,491,103],[552,110,491,108],[552,111,491,109],[552,112,491,110],[553,8,492,6],[553,12,492,10,"routes"],[553,18,492,16],[553,19,492,17,"length"],[553,25,492,23],[553,28,492,26],[553,29,492,27],[553,31,492,29],[554,10,493,8,"nestedState"],[554,21,493,19],[554,24,493,22,"nestedState"],[554,35,493,33],[554,36,493,34,"routes"],[554,42,493,40],[554,43,493,41,"nestedStateIndex"],[554,59,493,57],[554,60,493,58],[554,61,493,59,"state"],[554,66,493,64],[555,8,494,6],[556,8,495,6,"parentScreens"],[556,21,495,19],[556,22,495,20,"push"],[556,26,495,24],[556,27,495,25,"route"],[556,32,495,30],[556,33,495,31,"name"],[556,37,495,35],[556,38,495,36],[557,6,496,4],[558,4,497,2],[559,4,498,2,"route"],[559,9,498,7],[559,12,498,10],[559,13,498,11],[559,14,498,12],[559,16,498,14,"_$$_REQUIRE"],[559,27,498,14],[559,28,498,14,"_dependencyMap"],[559,42,498,14],[559,72,498,32,"findFocusedRoute"],[559,88,498,48],[559,90,498,50,"state"],[559,95,498,55],[559,96,498,56],[560,4,499,2,"route"],[560,9,499,7],[560,10,499,8,"path"],[560,14,499,12],[560,17,499,15,"path"],[560,21,499,19],[560,22,499,20,"replace"],[560,29,499,27],[560,30,499,28],[560,35,499,33],[560,37,499,35],[560,39,499,37],[560,40,499,38],[561,4,500,2],[561,8,500,8,"params"],[561,14,500,14],[561,17,500,17,"parseQueryParams"],[561,33,500,33],[561,34,500,34,"path"],[561,38,500,38],[561,40,500,40,"flatConfig"],[561,50,500,50],[561,53,500,53,"findParseConfigForRoute"],[561,76,500,76],[561,77,500,77,"route"],[561,82,500,82],[561,83,500,83,"name"],[561,87,500,87],[561,89,500,89,"flatConfig"],[561,99,500,99],[561,100,500,100],[561,103,500,103,"undefined"],[561,112,500,112],[561,113,500,113],[562,4,501,2],[562,8,501,6,"params"],[562,14,501,12],[562,16,501,14],[563,6,502,4,"route"],[563,11,502,9],[563,12,502,10,"params"],[563,18,502,16],[563,21,502,16,"Object"],[563,27,502,16],[563,28,502,16,"assign"],[563,34,502,16],[563,39,503,9,"route"],[563,44,503,14],[563,45,503,15,"params"],[563,51,503,21],[563,53,504,9,"params"],[563,59,504,15],[563,60,505,5],[564,4,506,2],[565,4,507,2],[565,11,507,9,"state"],[565,16,507,14],[566,2,508,0],[566,3,508,1],[567,2,509,0],[567,6,509,6,"parseQueryParams"],[567,22,509,22],[567,25,509,25],[567,34,509,6,"parseQueryParams"],[567,50,509,22,"parseQueryParams"],[567,51,509,26,"path"],[567,55,509,30],[567,57,509,32,"parseConfig"],[567,68,509,43],[567,70,509,48],[568,4,510,2],[568,8,510,8,"query"],[568,13,510,13],[568,16,510,16,"path"],[568,20,510,20],[568,21,510,21,"split"],[568,26,510,26],[568,27,510,27],[568,30,510,30],[568,31,510,31],[568,32,510,32],[568,33,510,33],[568,34,510,34],[569,4,511,2],[569,8,511,8,"params"],[569,14,511,14],[569,17,511,17,"queryString"],[569,28,511,28],[569,29,511,29,"parse"],[569,34,511,34],[569,35,511,35,"query"],[569,40,511,40],[569,41,511,41],[570,4,512,2],[570,8,512,6,"parseConfig"],[570,19,512,17],[570,21,512,19],[571,6,513,4,"Object"],[571,12,513,10],[571,13,513,11,"keys"],[571,17,513,15],[571,18,513,16,"params"],[571,24,513,22],[571,25,513,23],[571,26,513,24,"forEach"],[571,33,513,31],[571,34,513,32],[571,44,513,32,"name"],[571,48,513,36],[571,50,513,40],[572,8,514,6],[572,12,514,10,"Object"],[572,18,514,16],[572,19,514,17,"hasOwnProperty"],[572,33,514,31],[572,34,514,32,"call"],[572,38,514,36],[572,39,514,37,"parseConfig"],[572,50,514,48],[572,52,514,50,"name"],[572,56,514,54],[572,57,514,55],[572,61,514,59],[572,68,514,66,"params"],[572,74,514,72],[572,75,514,73,"name"],[572,79,514,77],[572,80,514,78],[572,85,514,83],[572,93,514,91],[572,95,514,93],[573,10,515,8,"params"],[573,16,515,14],[573,17,515,15,"name"],[573,21,515,19],[573,22,515,20],[573,25,515,23,"parseConfig"],[573,36,515,34],[573,37,515,35,"name"],[573,41,515,39],[573,42,515,40],[573,43,515,41,"params"],[573,49,515,47],[573,50,515,48,"name"],[573,54,515,52],[573,55,515,53],[573,56,515,54],[574,8,516,6],[575,6,517,4],[575,7,517,5],[575,8,517,6],[576,4,518,2],[577,4,519,2],[577,11,519,9,"Object"],[577,17,519,15],[577,18,519,16,"keys"],[577,22,519,20],[577,23,519,21,"params"],[577,29,519,27],[577,30,519,28],[577,31,519,29,"length"],[577,37,519,35],[577,40,519,38,"params"],[577,46,519,44],[577,49,519,47,"undefined"],[577,58,519,56],[578,2,520,0],[578,3,520,1],[579,0,520,2],[579,3]],"functionMap":{"names":["<global>","_getRequireWildcardCache","_interopRequireWildcard","_interopRequireDefault","getStateFromPath","remaining.split.filter.map$argument_0","configs.find$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getSortedNormalizedConfigs","Object.keys.map$argument_0","concat.sort$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","matchAgainstConfigs","config.routeNames.map$argument_0","Object.entries.map$argument_0","routeConfig.params.find$argument_0","Object.entries.map.filter$argument_0","Object.entries.map.filter.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","map$argument_0","parts.map$argument_0","parts.map.filter$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;ACa,4MD;AEC,mkBF;AGC,qFH;AIsB;4DC4B;KDK;+BES,0CF;gEGE;QHE;CJuB;AQM;CRO;ASC;CTa;AUC;CVS;AWC;+CCE,uED,QE;GF2E;CXC;AcC;iBCE;uDCQ,sBD,YE,sBF;GDQ;CdC;AkBC;qBCC;IDI;ClBC;4BoBC;qCCa;yCfC;SeG;yGCC;gDCE,wBD;SDK,SG,gBH,MI;SJO;ODU;CpBS;gC0BC;0CCgE;ODG;C1BK;yB4BC;kECQ;MDG;yDEE;GFM;6BEC,gBF;2BEC;UFI,SG,gBH;C5BS;gCgCC;ChCO;yBiCG;CjCgB;0BkCI;ClCsC;gCmCC;CnC4B;yBoCC;gCTI;KSI;CpCG"}},"type":"js/module"}]}