{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var RE_FRAME = /^ {4}at (.+?)(?: \\((native)\\)?| \\((address at )?(.*?):(\\d+):(\\d+)\\))$/;\n  var RE_SKIPPED = /^ {4}... skipping (\\d+) frames$/;\n  var RE_COMPONENT_NO_STACK = /^ {4}at .*$/;\n  function isInternalBytecodeSourceUrl(sourceUrl) {\n    return sourceUrl === 'InternalBytecode.js';\n  }\n  function parseLine(line) {\n    var asFrame = line.match(RE_FRAME);\n    if (asFrame) {\n      return {\n        type: 'FRAME',\n        functionName: asFrame[1],\n        location: asFrame[2] === 'native' ? {\n          type: 'NATIVE'\n        } : asFrame[3] === 'address at ' ? isInternalBytecodeSourceUrl(asFrame[4]) ? {\n          type: 'INTERNAL_BYTECODE',\n          sourceUrl: asFrame[4],\n          line1Based: Number.parseInt(asFrame[5], 10),\n          virtualOffset0Based: Number.parseInt(asFrame[6], 10)\n        } : {\n          type: 'BYTECODE',\n          sourceUrl: asFrame[4],\n          line1Based: Number.parseInt(asFrame[5], 10),\n          virtualOffset0Based: Number.parseInt(asFrame[6], 10)\n        } : {\n          type: 'SOURCE',\n          sourceUrl: asFrame[4],\n          line1Based: Number.parseInt(asFrame[5], 10),\n          column1Based: Number.parseInt(asFrame[6], 10)\n        }\n      };\n    }\n    var asSkipped = line.match(RE_SKIPPED);\n    if (asSkipped) {\n      return {\n        type: 'SKIPPED',\n        count: Number.parseInt(asSkipped[1], 10)\n      };\n    }\n  }\n  module.exports = function parseHermesStack(stack) {\n    var lines = stack.split(/\\n/);\n    var entries = [];\n    var lastMessageLine = -1;\n    for (var i = 0; i < lines.length; ++i) {\n      var line = lines[i];\n      if (!line) {\n        continue;\n      }\n      var entry = parseLine(line);\n      if (entry) {\n        entries.push(entry);\n        continue;\n      }\n      if (RE_COMPONENT_NO_STACK.test(line)) {\n        continue;\n      }\n      lastMessageLine = i;\n      entries = [];\n    }\n    var message = lines.slice(0, lastMessageLine + 1).join('\\n');\n    return {\n      message: message,\n      entries: entries\n    };\n  };\n});","lineCount":70,"map":[[2,2,11,0],[2,14,11,12],[4,2,69,0],[4,6,69,6,"RE_FRAME"],[4,14,69,14],[4,17,70,2],[4,88,70,73],[5,2,74,0],[5,6,74,6,"RE_SKIPPED"],[5,16,74,16],[5,19,74,19],[5,52,74,52],[6,2,75,0],[6,6,75,6,"RE_COMPONENT_NO_STACK"],[6,27,75,27],[6,30,75,30],[6,43,75,43],[7,2,77,0],[7,11,77,9,"isInternalBytecodeSourceUrl"],[7,38,77,36,"isInternalBytecodeSourceUrl"],[7,39,77,37,"sourceUrl"],[7,48,77,54],[7,50,77,65],[8,4,79,2],[8,11,79,9,"sourceUrl"],[8,20,79,18],[8,25,79,23],[8,46,79,44],[9,2,80,0],[10,2,82,0],[10,11,82,9,"parseLine"],[10,20,82,18,"parseLine"],[10,21,82,19,"line"],[10,25,82,31],[10,27,82,52],[11,4,83,2],[11,8,83,8,"asFrame"],[11,15,83,15],[11,18,83,18,"line"],[11,22,83,22],[11,23,83,23,"match"],[11,28,83,28],[11,29,83,29,"RE_FRAME"],[11,37,83,37],[11,38,83,38],[12,4,84,2],[12,8,84,6,"asFrame"],[12,15,84,13],[12,17,84,15],[13,6,85,4],[13,13,85,11],[14,8,86,6,"type"],[14,12,86,10],[14,14,86,12],[14,21,86,19],[15,8,87,6,"functionName"],[15,20,87,18],[15,22,87,20,"asFrame"],[15,29,87,27],[15,30,87,28],[15,31,87,29],[15,32,87,30],[16,8,88,6,"location"],[16,16,88,14],[16,18,89,8,"asFrame"],[16,25,89,15],[16,26,89,16],[16,27,89,17],[16,28,89,18],[16,33,89,23],[16,41,89,31],[16,44,90,12],[17,10,90,13,"type"],[17,14,90,17],[17,16,90,19],[18,8,90,27],[18,9,90,28],[18,12,91,12,"asFrame"],[18,19,91,19],[18,20,91,20],[18,21,91,21],[18,22,91,22],[18,27,91,27],[18,40,91,40],[18,43,92,14,"isInternalBytecodeSourceUrl"],[18,70,92,41],[18,71,92,42,"asFrame"],[18,78,92,49],[18,79,92,50],[18,80,92,51],[18,81,92,52],[18,82,92,53],[18,85,93,16],[19,10,94,18,"type"],[19,14,94,22],[19,16,94,24],[19,35,94,43],[20,10,95,18,"sourceUrl"],[20,19,95,27],[20,21,95,29,"asFrame"],[20,28,95,36],[20,29,95,37],[20,30,95,38],[20,31,95,39],[21,10,96,18,"line1Based"],[21,20,96,28],[21,22,96,30,"Number"],[21,28,96,36],[21,29,96,37,"parseInt"],[21,37,96,45],[21,38,96,46,"asFrame"],[21,45,96,53],[21,46,96,54],[21,47,96,55],[21,48,96,56],[21,50,96,58],[21,52,96,60],[21,53,96,61],[22,10,97,18,"virtualOffset0Based"],[22,29,97,37],[22,31,97,39,"Number"],[22,37,97,45],[22,38,97,46,"parseInt"],[22,46,97,54],[22,47,97,55,"asFrame"],[22,54,97,62],[22,55,97,63],[22,56,97,64],[22,57,97,65],[22,59,97,67],[22,61,97,69],[23,8,98,16],[23,9,98,17],[23,12,99,16],[24,10,100,18,"type"],[24,14,100,22],[24,16,100,24],[24,26,100,34],[25,10,101,18,"sourceUrl"],[25,19,101,27],[25,21,101,29,"asFrame"],[25,28,101,36],[25,29,101,37],[25,30,101,38],[25,31,101,39],[26,10,102,18,"line1Based"],[26,20,102,28],[26,22,102,30,"Number"],[26,28,102,36],[26,29,102,37,"parseInt"],[26,37,102,45],[26,38,102,46,"asFrame"],[26,45,102,53],[26,46,102,54],[26,47,102,55],[26,48,102,56],[26,50,102,58],[26,52,102,60],[26,53,102,61],[27,10,103,18,"virtualOffset0Based"],[27,29,103,37],[27,31,103,39,"Number"],[27,37,103,45],[27,38,103,46,"parseInt"],[27,46,103,54],[27,47,103,55,"asFrame"],[27,54,103,62],[27,55,103,63],[27,56,103,64],[27,57,103,65],[27,59,103,67],[27,61,103,69],[28,8,104,16],[28,9,104,17],[28,12,105,14],[29,10,106,16,"type"],[29,14,106,20],[29,16,106,22],[29,24,106,30],[30,10,107,16,"sourceUrl"],[30,19,107,25],[30,21,107,27,"asFrame"],[30,28,107,34],[30,29,107,35],[30,30,107,36],[30,31,107,37],[31,10,108,16,"line1Based"],[31,20,108,26],[31,22,108,28,"Number"],[31,28,108,34],[31,29,108,35,"parseInt"],[31,37,108,43],[31,38,108,44,"asFrame"],[31,45,108,51],[31,46,108,52],[31,47,108,53],[31,48,108,54],[31,50,108,56],[31,52,108,58],[31,53,108,59],[32,10,109,16,"column1Based"],[32,22,109,28],[32,24,109,30,"Number"],[32,30,109,36],[32,31,109,37,"parseInt"],[32,39,109,45],[32,40,109,46,"asFrame"],[32,47,109,53],[32,48,109,54],[32,49,109,55],[32,50,109,56],[32,52,109,58],[32,54,109,60],[33,8,110,14],[34,6,111,4],[34,7,111,5],[35,4,112,2],[36,4,113,2],[36,8,113,8,"asSkipped"],[36,17,113,17],[36,20,113,20,"line"],[36,24,113,24],[36,25,113,25,"match"],[36,30,113,30],[36,31,113,31,"RE_SKIPPED"],[36,41,113,41],[36,42,113,42],[37,4,114,2],[37,8,114,6,"asSkipped"],[37,17,114,15],[37,19,114,17],[38,6,115,4],[38,13,115,11],[39,8,116,6,"type"],[39,12,116,10],[39,14,116,12],[39,23,116,21],[40,8,117,6,"count"],[40,13,117,11],[40,15,117,13,"Number"],[40,21,117,19],[40,22,117,20,"parseInt"],[40,30,117,28],[40,31,117,29,"asSkipped"],[40,40,117,38],[40,41,117,39],[40,42,117,40],[40,43,117,41],[40,45,117,43],[40,47,117,45],[41,6,118,4],[41,7,118,5],[42,4,119,2],[43,2,120,0],[44,2,122,0,"module"],[44,8,122,6],[44,9,122,7,"exports"],[44,16,122,14],[44,19,122,17],[44,28,122,26,"parseHermesStack"],[44,44,122,42,"parseHermesStack"],[44,45,122,43,"stack"],[44,50,122,56],[44,52,122,77],[45,4,123,2],[45,8,123,8,"lines"],[45,13,123,13],[45,16,123,16,"stack"],[45,21,123,21],[45,22,123,22,"split"],[45,27,123,27],[45,28,123,28],[45,32,123,32],[45,33,123,33],[46,4,124,2],[46,8,124,6,"entries"],[46,15,124,69],[46,18,124,72],[46,20,124,74],[47,4,125,2],[47,8,125,6,"lastMessageLine"],[47,23,125,21],[47,26,125,24],[47,27,125,25],[47,28,125,26],[48,4,126,2],[48,9,126,7],[48,13,126,11,"i"],[48,14,126,12],[48,17,126,15],[48,18,126,16],[48,20,126,18,"i"],[48,21,126,19],[48,24,126,22,"lines"],[48,29,126,27],[48,30,126,28,"length"],[48,36,126,34],[48,38,126,36],[48,40,126,38,"i"],[48,41,126,39],[48,43,126,41],[49,6,127,4],[49,10,127,10,"line"],[49,14,127,14],[49,17,127,17,"lines"],[49,22,127,22],[49,23,127,23,"i"],[49,24,127,24],[49,25,127,25],[50,6,128,4],[50,10,128,8],[50,11,128,9,"line"],[50,15,128,13],[50,17,128,15],[51,8,129,6],[52,6,130,4],[53,6,131,4],[53,10,131,10,"entry"],[53,15,131,15],[53,18,131,18,"parseLine"],[53,27,131,27],[53,28,131,28,"line"],[53,32,131,32],[53,33,131,33],[54,6,132,4],[54,10,132,8,"entry"],[54,15,132,13],[54,17,132,15],[55,8,133,6,"entries"],[55,15,133,13],[55,16,133,14,"push"],[55,20,133,18],[55,21,133,19,"entry"],[55,26,133,24],[55,27,133,25],[56,8,134,6],[57,6,135,4],[58,6,136,4],[58,10,136,8,"RE_COMPONENT_NO_STACK"],[58,31,136,29],[58,32,136,30,"test"],[58,36,136,34],[58,37,136,35,"line"],[58,41,136,39],[58,42,136,40],[58,44,136,42],[59,8,139,6],[60,6,140,4],[61,6,142,4,"lastMessageLine"],[61,21,142,19],[61,24,142,22,"i"],[61,25,142,23],[62,6,143,4,"entries"],[62,13,143,11],[62,16,143,14],[62,18,143,16],[63,4,144,2],[64,4,145,2],[64,8,145,8,"message"],[64,15,145,15],[64,18,145,18,"lines"],[64,23,145,23],[64,24,145,24,"slice"],[64,29,145,29],[64,30,145,30],[64,31,145,31],[64,33,145,33,"lastMessageLine"],[64,48,145,48],[64,51,145,51],[64,52,145,52],[64,53,145,53],[64,54,145,54,"join"],[64,58,145,58],[64,59,145,59],[64,63,145,63],[64,64,145,64],[65,4,146,2],[65,11,146,9],[66,6,146,10,"message"],[66,13,146,17],[66,15,146,10,"message"],[66,22,146,17],[67,6,146,19,"entries"],[67,13,146,26],[67,15,146,19,"entries"],[68,4,146,26],[68,5,146,27],[69,2,147,0],[69,3,147,1],[70,0,147,2],[70,3]],"functionMap":{"names":["<global>","isInternalBytecodeSourceUrl","parseLine","parseHermesStack"],"mappings":"AAA;AC4E;CDG;AEE;CFsC;iBGE;CHyB"}},"type":"js/module"}]}