{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":105,"column":43,"index":2988}}],"key":"5y7e5+zC7teYEEC6niD9f5zII1M="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getPatternParts = getPatternParts;\n  /**\n   * Parse a path into an array of parts with information about each segment.\n   */\n  function getPatternParts(path) {\n    var parts = [];\n    var current = {\n      segment: ''\n    };\n    var isRegex = false;\n    var isParam = false;\n    var regexInnerParens = 0;\n\n    // One extra iteration to add the last character\n    for (var i = 0; i <= path.length; i++) {\n      var char = path[i];\n      if (char != null) {\n        current.segment += char;\n      }\n      if (char === ':') {\n        // The segment must start with a colon if it's a param\n        if (current.segment === ':') {\n          isParam = true;\n        } else if (!isRegex) {\n          throw new Error(`Encountered ':' in the middle of a segment in path: ${path}`);\n        }\n      } else if (char === '(') {\n        if (isParam) {\n          if (isRegex) {\n            // The '(' is part of the regex if we're already inside one\n            regexInnerParens++;\n          } else {\n            isRegex = true;\n          }\n        } else {\n          throw new Error(`Encountered '(' without preceding ':' in path: ${path}`);\n        }\n      } else if (char === ')') {\n        if (isParam && isRegex) {\n          if (regexInnerParens) {\n            // The ')' is part of the regex if we're already inside one\n            regexInnerParens--;\n            current.regex += char;\n          } else {\n            isRegex = false;\n            isParam = false;\n          }\n        } else {\n          throw new Error(`Encountered ')' without preceding '(' in path: ${path}`);\n        }\n      } else if (char === '?') {\n        if (current.param) {\n          isParam = false;\n          current.optional = true;\n        } else {\n          throw new Error(`Encountered '?' without preceding ':' in path: ${path}`);\n        }\n      } else if (char == null || char === '/' && !isRegex) {\n        isParam = false;\n\n        // Remove trailing slash from segment\n        current.segment = current.segment.replace(/\\/$/, '');\n        if (current.segment === '') {\n          continue;\n        }\n        if (current.param) {\n          current.param = current.param.replace(/^:/, '');\n        }\n        if (current.regex) {\n          current.regex = current.regex.replace(/^\\(/, '').replace(/\\)$/, '');\n        }\n        parts.push(current);\n        if (char == null) {\n          break;\n        }\n        current = {\n          segment: ''\n        };\n      }\n      if (isRegex) {\n        current.regex = current.regex || '';\n        current.regex += char;\n      }\n      if (isParam && !isRegex) {\n        current.param = current.param || '';\n        current.param += char;\n      }\n    }\n    if (isRegex) {\n      throw new Error(`Could not find closing ')' in path: ${path}`);\n    }\n    var params = parts.map(function (part) {\n      return part.param;\n    }).filter(Boolean);\n    for (var _ref of params.entries()) {\n      var _ref2 = _slicedToArray(_ref, 2);\n      var index = _ref2[0];\n      var param = _ref2[1];\n      if (params.indexOf(param) !== index) {\n        throw new Error(`Duplicate param name '${param}' found in path: ${path}`);\n      }\n    }\n    return parts;\n  }\n});","lineCount":112,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"_$$_REQUIRE"],[4,34,1,13],[4,35,1,13,"_dependencyMap"],[4,49,1,13],[5,2,3,0,"Object"],[5,8,3,6],[5,9,3,7,"defineProperty"],[5,23,3,21],[5,24,3,22,"exports"],[5,31,3,29],[5,33,3,31],[5,45,3,43],[5,47,3,45],[6,4,4,2,"value"],[6,9,4,7],[6,11,4,9],[7,2,5,0],[7,3,5,1],[7,4,5,2],[8,2,6,0,"exports"],[8,9,6,7],[8,10,6,8,"getPatternParts"],[8,25,6,23],[8,28,6,26,"getPatternParts"],[8,43,6,41],[9,2,7,0],[10,0,8,0],[11,0,9,0],[12,2,10,0],[12,11,10,9,"getPatternParts"],[12,26,10,24,"getPatternParts"],[12,27,10,25,"path"],[12,31,10,29],[12,33,10,31],[13,4,11,2],[13,8,11,8,"parts"],[13,13,11,13],[13,16,11,16],[13,18,11,18],[14,4,12,2],[14,8,12,6,"current"],[14,15,12,13],[14,18,12,16],[15,6,13,4,"segment"],[15,13,13,11],[15,15,13,13],[16,4,14,2],[16,5,14,3],[17,4,15,2],[17,8,15,6,"isRegex"],[17,15,15,13],[17,18,15,16],[17,23,15,21],[18,4,16,2],[18,8,16,6,"isParam"],[18,15,16,13],[18,18,16,16],[18,23,16,21],[19,4,17,2],[19,8,17,6,"regexInnerParens"],[19,24,17,22],[19,27,17,25],[19,28,17,26],[21,4,19,2],[22,4,20,2],[22,9,20,7],[22,13,20,11,"i"],[22,14,20,12],[22,17,20,15],[22,18,20,16],[22,20,20,18,"i"],[22,21,20,19],[22,25,20,23,"path"],[22,29,20,27],[22,30,20,28,"length"],[22,36,20,34],[22,38,20,36,"i"],[22,39,20,37],[22,41,20,39],[22,43,20,41],[23,6,21,4],[23,10,21,10,"char"],[23,14,21,14],[23,17,21,17,"path"],[23,21,21,21],[23,22,21,22,"i"],[23,23,21,23],[23,24,21,24],[24,6,22,4],[24,10,22,8,"char"],[24,14,22,12],[24,18,22,16],[24,22,22,20],[24,24,22,22],[25,8,23,6,"current"],[25,15,23,13],[25,16,23,14,"segment"],[25,23,23,21],[25,27,23,25,"char"],[25,31,23,29],[26,6,24,4],[27,6,25,4],[27,10,25,8,"char"],[27,14,25,12],[27,19,25,17],[27,22,25,20],[27,24,25,22],[28,8,26,6],[29,8,27,6],[29,12,27,10,"current"],[29,19,27,17],[29,20,27,18,"segment"],[29,27,27,25],[29,32,27,30],[29,35,27,33],[29,37,27,35],[30,10,28,8,"isParam"],[30,17,28,15],[30,20,28,18],[30,24,28,22],[31,8,29,6],[31,9,29,7],[31,15,29,13],[31,19,29,17],[31,20,29,18,"isRegex"],[31,27,29,25],[31,29,29,27],[32,10,30,8],[32,16,30,14],[32,20,30,18,"Error"],[32,25,30,23],[32,26,30,24],[32,81,30,79,"path"],[32,85,30,83],[32,87,30,85],[32,88,30,86],[33,8,31,6],[34,6,32,4],[34,7,32,5],[34,13,32,11],[34,17,32,15,"char"],[34,21,32,19],[34,26,32,24],[34,29,32,27],[34,31,32,29],[35,8,33,6],[35,12,33,10,"isParam"],[35,19,33,17],[35,21,33,19],[36,10,34,8],[36,14,34,12,"isRegex"],[36,21,34,19],[36,23,34,21],[37,12,35,10],[38,12,36,10,"regexInnerParens"],[38,28,36,26],[38,30,36,28],[39,10,37,8],[39,11,37,9],[39,17,37,15],[40,12,38,10,"isRegex"],[40,19,38,17],[40,22,38,20],[40,26,38,24],[41,10,39,8],[42,8,40,6],[42,9,40,7],[42,15,40,13],[43,10,41,8],[43,16,41,14],[43,20,41,18,"Error"],[43,25,41,23],[43,26,41,24],[43,76,41,74,"path"],[43,80,41,78],[43,82,41,80],[43,83,41,81],[44,8,42,6],[45,6,43,4],[45,7,43,5],[45,13,43,11],[45,17,43,15,"char"],[45,21,43,19],[45,26,43,24],[45,29,43,27],[45,31,43,29],[46,8,44,6],[46,12,44,10,"isParam"],[46,19,44,17],[46,23,44,21,"isRegex"],[46,30,44,28],[46,32,44,30],[47,10,45,8],[47,14,45,12,"regexInnerParens"],[47,30,45,28],[47,32,45,30],[48,12,46,10],[49,12,47,10,"regexInnerParens"],[49,28,47,26],[49,30,47,28],[50,12,48,10,"current"],[50,19,48,17],[50,20,48,18,"regex"],[50,25,48,23],[50,29,48,27,"char"],[50,33,48,31],[51,10,49,8],[51,11,49,9],[51,17,49,15],[52,12,50,10,"isRegex"],[52,19,50,17],[52,22,50,20],[52,27,50,25],[53,12,51,10,"isParam"],[53,19,51,17],[53,22,51,20],[53,27,51,25],[54,10,52,8],[55,8,53,6],[55,9,53,7],[55,15,53,13],[56,10,54,8],[56,16,54,14],[56,20,54,18,"Error"],[56,25,54,23],[56,26,54,24],[56,76,54,74,"path"],[56,80,54,78],[56,82,54,80],[56,83,54,81],[57,8,55,6],[58,6,56,4],[58,7,56,5],[58,13,56,11],[58,17,56,15,"char"],[58,21,56,19],[58,26,56,24],[58,29,56,27],[58,31,56,29],[59,8,57,6],[59,12,57,10,"current"],[59,19,57,17],[59,20,57,18,"param"],[59,25,57,23],[59,27,57,25],[60,10,58,8,"isParam"],[60,17,58,15],[60,20,58,18],[60,25,58,23],[61,10,59,8,"current"],[61,17,59,15],[61,18,59,16,"optional"],[61,26,59,24],[61,29,59,27],[61,33,59,31],[62,8,60,6],[62,9,60,7],[62,15,60,13],[63,10,61,8],[63,16,61,14],[63,20,61,18,"Error"],[63,25,61,23],[63,26,61,24],[63,76,61,74,"path"],[63,80,61,78],[63,82,61,80],[63,83,61,81],[64,8,62,6],[65,6,63,4],[65,7,63,5],[65,13,63,11],[65,17,63,15,"char"],[65,21,63,19],[65,25,63,23],[65,29,63,27],[65,33,63,31,"char"],[65,37,63,35],[65,42,63,40],[65,45,63,43],[65,49,63,47],[65,50,63,48,"isRegex"],[65,57,63,55],[65,59,63,57],[66,8,64,6,"isParam"],[66,15,64,13],[66,18,64,16],[66,23,64,21],[68,8,66,6],[69,8,67,6,"current"],[69,15,67,13],[69,16,67,14,"segment"],[69,23,67,21],[69,26,67,24,"current"],[69,33,67,31],[69,34,67,32,"segment"],[69,41,67,39],[69,42,67,40,"replace"],[69,49,67,47],[69,50,67,48],[69,55,67,53],[69,57,67,55],[69,59,67,57],[69,60,67,58],[70,8,68,6],[70,12,68,10,"current"],[70,19,68,17],[70,20,68,18,"segment"],[70,27,68,25],[70,32,68,30],[70,34,68,32],[70,36,68,34],[71,10,69,8],[72,8,70,6],[73,8,71,6],[73,12,71,10,"current"],[73,19,71,17],[73,20,71,18,"param"],[73,25,71,23],[73,27,71,25],[74,10,72,8,"current"],[74,17,72,15],[74,18,72,16,"param"],[74,23,72,21],[74,26,72,24,"current"],[74,33,72,31],[74,34,72,32,"param"],[74,39,72,37],[74,40,72,38,"replace"],[74,47,72,45],[74,48,72,46],[74,52,72,50],[74,54,72,52],[74,56,72,54],[74,57,72,55],[75,8,73,6],[76,8,74,6],[76,12,74,10,"current"],[76,19,74,17],[76,20,74,18,"regex"],[76,25,74,23],[76,27,74,25],[77,10,75,8,"current"],[77,17,75,15],[77,18,75,16,"regex"],[77,23,75,21],[77,26,75,24,"current"],[77,33,75,31],[77,34,75,32,"regex"],[77,39,75,37],[77,40,75,38,"replace"],[77,47,75,45],[77,48,75,46],[77,53,75,51],[77,55,75,53],[77,57,75,55],[77,58,75,56],[77,59,75,57,"replace"],[77,66,75,64],[77,67,75,65],[77,72,75,70],[77,74,75,72],[77,76,75,74],[77,77,75,75],[78,8,76,6],[79,8,77,6,"parts"],[79,13,77,11],[79,14,77,12,"push"],[79,18,77,16],[79,19,77,17,"current"],[79,26,77,24],[79,27,77,25],[80,8,78,6],[80,12,78,10,"char"],[80,16,78,14],[80,20,78,18],[80,24,78,22],[80,26,78,24],[81,10,79,8],[82,8,80,6],[83,8,81,6,"current"],[83,15,81,13],[83,18,81,16],[84,10,82,8,"segment"],[84,17,82,15],[84,19,82,17],[85,8,83,6],[85,9,83,7],[86,6,84,4],[87,6,85,4],[87,10,85,8,"isRegex"],[87,17,85,15],[87,19,85,17],[88,8,86,6,"current"],[88,15,86,13],[88,16,86,14,"regex"],[88,21,86,19],[88,24,86,22,"current"],[88,31,86,29],[88,32,86,30,"regex"],[88,37,86,35],[88,41,86,39],[88,43,86,41],[89,8,87,6,"current"],[89,15,87,13],[89,16,87,14,"regex"],[89,21,87,19],[89,25,87,23,"char"],[89,29,87,27],[90,6,88,4],[91,6,89,4],[91,10,89,8,"isParam"],[91,17,89,15],[91,21,89,19],[91,22,89,20,"isRegex"],[91,29,89,27],[91,31,89,29],[92,8,90,6,"current"],[92,15,90,13],[92,16,90,14,"param"],[92,21,90,19],[92,24,90,22,"current"],[92,31,90,29],[92,32,90,30,"param"],[92,37,90,35],[92,41,90,39],[92,43,90,41],[93,8,91,6,"current"],[93,15,91,13],[93,16,91,14,"param"],[93,21,91,19],[93,25,91,23,"char"],[93,29,91,27],[94,6,92,4],[95,4,93,2],[96,4,94,2],[96,8,94,6,"isRegex"],[96,15,94,13],[96,17,94,15],[97,6,95,4],[97,12,95,10],[97,16,95,14,"Error"],[97,21,95,19],[97,22,95,20],[97,61,95,59,"path"],[97,65,95,63],[97,67,95,65],[97,68,95,66],[98,4,96,2],[99,4,97,2],[99,8,97,8,"params"],[99,14,97,14],[99,17,97,17,"parts"],[99,22,97,22],[99,23,97,23,"map"],[99,26,97,26],[99,27,97,27],[99,37,97,27,"part"],[99,41,97,31],[100,6,97,31],[100,13,97,35,"part"],[100,17,97,39],[100,18,97,40,"param"],[100,23,97,45],[101,4,97,45],[101,6,97,46],[101,7,97,47,"filter"],[101,13,97,53],[101,14,97,54,"Boolean"],[101,21,97,61],[101,22,97,62],[102,4,98,2],[102,13,98,2,"_ref"],[102,17,98,2],[102,21,98,31,"params"],[102,27,98,37],[102,28,98,38,"entries"],[102,35,98,45],[102,36,98,46],[102,37,98,47],[102,39,98,49],[103,6,98,49],[103,10,98,49,"_ref2"],[103,15,98,49],[103,18,98,49,"_slicedToArray"],[103,32,98,49],[103,33,98,49,"_ref"],[103,37,98,49],[104,6,98,49],[104,10,98,14,"index"],[104,15,98,19],[104,18,98,19,"_ref2"],[104,23,98,19],[105,6,98,19],[105,10,98,21,"param"],[105,15,98,26],[105,18,98,26,"_ref2"],[105,23,98,26],[106,6,99,4],[106,10,99,8,"params"],[106,16,99,14],[106,17,99,15,"indexOf"],[106,24,99,22],[106,25,99,23,"param"],[106,30,99,28],[106,31,99,29],[106,36,99,34,"index"],[106,41,99,39],[106,43,99,41],[107,8,100,6],[107,14,100,12],[107,18,100,16,"Error"],[107,23,100,21],[107,24,100,22],[107,49,100,47,"param"],[107,54,100,52],[107,74,100,72,"path"],[107,78,100,76],[107,80,100,78],[107,81,100,79],[108,6,101,4],[109,4,102,2],[110,4,103,2],[110,11,103,9,"parts"],[110,16,103,14],[111,2,104,0],[112,0,104,1],[112,3]],"functionMap":{"names":["<global>","getPatternParts","parts.map$argument_0"],"mappings":"AAA;ACS;2BCuF,kBD;CDO"}},"type":"js/module"}]}